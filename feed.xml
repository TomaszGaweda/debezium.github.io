<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://debezium.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://debezium.io/" rel="alternate" type="text/html"/><updated>2024-02-05T09:45:05+00:00</updated><id>https://debezium.io/feed.xml</id><title type="html">Debezium</title><subtitle>Debezium is an open source distributed platform for change data capture. Start it up, point it at your databases, and your apps can start responding to all of the inserts, updates, and deletes that other apps commit to your databases. Debezium is durable and fast, so your apps can respond quickly and never miss an event, even when things go wrong.</subtitle><entry><title type="html">Debezium 2.5.1.Final Released</title><link href="https://debezium.io/blog/2024/01/30/debezium-2-5-1-final-released/" rel="alternate" type="text/html" title="Debezium 2.5.1.Final Released"/><published>2024-01-30T00:00:00+00:00</published><updated>2024-01-30T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/01/30/debezium-2-5-1-final-released</id><content type="html" xml:base="https://debezium.io/blog/2024/01/30/debezium-2-5-1-final-released/"><![CDATA[<div class="paragraph"> <p>While we remain on track with the upcoming Debezium 2.6 release, we are continuously looking at improvements and fixes that are being made that ensures that older releases continue to provide the best possible experience. With that, the team is pleased to announce the first maintenance release of Debezium 2.5, <strong>Debezium 2.5.1.Final</strong>. Let&#8217;s dive into what this release includes and what you should be aware of while upgrading&#8230;&#8203;</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking_changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>The team aims to avoid any potential breaking changes between minor releases; however, such changes are sometimes inevitable.</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">Re-select Columns Post Processor</dt> <dd> <div class="ulist"> <ul> <li> <p>The re-select columns post processor used the key based on the <code>message.key.columns</code> when building the query. This is not correct for most tables with primary keys. The default behavior has changed and the table primary key is used by default. A new configuration option was introduced to allow the user to choose between whether to use the primary key or the generated key, <code>reselect.use.event.key</code> (<a href="https://issues.redhat.com/browse/DBZ-7358">DBZ-7358</a>).</p> </li> </ul> </div> </dd> </dl> </div> </div> </div> <div class="sect1"> <h2 id="improvements_and_changes">Improvements and changes</h2> <div class="sectionbody"> <div class="sect2"> <h3 id="mongodb_post_image_changes">MongoDB post-image changes</h3> <div class="paragraph"> <p>The MongoDB connector&#8217;s event payload can be configured to include the full document that was changed in an update. The connector previously made an opinionated choice about how the full document would be fetched as part of the change stream; however, this behavior was not consistent with our expectations in all use cases.</p> </div> <div class="paragraph"> <p>Debezium 2.5+ introduces a new configuration option, <code>capture.mode.full.update.type</code>, allowing the connector to explicitly control how the change stream&#8217;s full document lookup should be handled (<a href="https://issues.redhat.com/browse/DBZ-7299">DBZ-7299</a>). The default value for this option is <code>lookup</code>, meaning that the database will make a separate look-up to fetch the full document. If you are working with MongoDB 6+, you can also elect to use <code>post_image</code> to rely on MongoDB change stream&#8217;s post-image support.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_changes">Other changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.5.1.Final%20ORDER%20BY%20component%20ASC">21 issues</a> were fixed in this release:</p> </div> <div class="ulist"> <ul> <li> <p>Connector is getting stopped while processing bulk update(50k) records in debezium server 2.0.1.Final <a href="https://issues.redhat.com/browse/DBZ-6955">DBZ-6955</a></p> </li> <li> <p>Empty object sent to GCP Pub/Sub after DELETE event <a href="https://issues.redhat.com/browse/DBZ-7098">DBZ-7098</a></p> </li> <li> <p>Debezium-ddl-parser crashes on parsing MySQL DDL statement (sub-query with UNION) <a href="https://issues.redhat.com/browse/DBZ-7259">DBZ-7259</a></p> </li> <li> <p>Oracle DDL parsing error in PARTITION REFERENCE <a href="https://issues.redhat.com/browse/DBZ-7266">DBZ-7266</a></p> </li> <li> <p>PostgreSQL ad-hoc blocking snapshots fail when snapshot mode is "never" <a href="https://issues.redhat.com/browse/DBZ-7311">DBZ-7311</a></p> </li> <li> <p>Ad-hoc blocking snapshot dies with "invalid snapshot identifier" immediately after connector creation <a href="https://issues.redhat.com/browse/DBZ-7312">DBZ-7312</a></p> </li> <li> <p>Specifying a table include list with spaces between elements cause LogMiner queries to miss matches <a href="https://issues.redhat.com/browse/DBZ-7315">DBZ-7315</a></p> </li> <li> <p>Debezium heartbeat.action.query does not start before writing to WAL: part 2 <a href="https://issues.redhat.com/browse/DBZ-7316">DBZ-7316</a></p> </li> <li> <p>Oracle connector is occasionally unable to find SCN <a href="https://issues.redhat.com/browse/DBZ-7345">DBZ-7345</a></p> </li> <li> <p>Initial snapshot notifications should use full identifier. <a href="https://issues.redhat.com/browse/DBZ-7347">DBZ-7347</a></p> </li> <li> <p>Debezium fails after table split operation <a href="https://issues.redhat.com/browse/DBZ-7360">DBZ-7360</a></p> </li> <li> <p>MSSQL wrong default values in db schema for varchar, nvarchar, char columns <a href="https://issues.redhat.com/browse/DBZ-7374">DBZ-7374</a></p> </li> <li> <p>Replace additional role binding definition in kubernetes.yml with @RBACRule <a href="https://issues.redhat.com/browse/DBZ-7381">DBZ-7381</a></p> </li> <li> <p>Kinesis Sink Exception on PutRecord <a href="https://issues.redhat.com/browse/DBZ-7417">DBZ-7417</a></p> </li> <li> <p>ParsingException (MariaDB Only): alterSpec drop foreign key with 'tablename.' prefix <a href="https://issues.redhat.com/browse/DBZ-7420">DBZ-7420</a></p> </li> </ul> </div> <div class="paragraph"> <p>A big thank you to all the contributors from the community who worked on this release: <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/brenoavm">Breno Moreira</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/ilyasahsan123">Ilyas Ahsan</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/james-johnston-thumbtack">James Johnston</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/mimaison">Mickael Maison</a>, <a href="https://github.com/wukachn">Peter Hamer</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/koneru9999">V K</a>, and <a href="https://github.com/leoloel">leoloel</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="outlook_whats_next">Outlook &amp; What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>The team remains dedicated toward Debezium 2.6 over the next few months. However, in that time, you can expect that we&#8217;ll continue to review regressions and bugfixes, and provide maintenance releases for Debezium 2.5.</p> </div> <div class="paragraph"> <p>In the meantime, if you&#8217;re interested in what the team has in store for Debezium 2.6 and beyond throughout 2024, we encourage you to review our <a href="/docs/roadmap">road map</a>, which includes details about our path to Debezium 3.0 later this year. If you have any suggestions or ideas, please feel free to get in touch with us on our <a href="https://groups.google.com/forum/#!forum/debezium">mailing list</a> or in our <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a>.</p> </div> <div class="paragraph"> <p>We have two upcoming talks later this week at Fosdem 2024 in Brussels. Ondrej Babec will be speaking about <a href="https://fosdem.org/2024/schedule/event/fosdem-2024-2968-performance-testing-and-why-even-the-imperfect-one-is-important/">performance testing and why it&#8217;s important</a> and Vojtech Juranek will <a href="https://fosdem.org/2024/schedule/event/fosdem-2024-2272-feeding-ml-models-with-the-data-from-the-databases-in-real-time/">use Debezium to feed AI models in real-time</a>. If you plan to attend, be sure to check out these talks and meet and greet with our Debezium engineers.</p> </div> <div class="paragraph"> <p>Until next time&#8230;&#8203;</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><summary type="html"><![CDATA[While we remain on track with the upcoming Debezium 2.6 release, we are continuously looking at improvements and fixes that are being made that ensures that older releases continue to provide the best possible experience. With that, the team is pleased to announce the first maintenance release of Debezium 2.5, Debezium 2.5.1.Final. Let&#8217;s dive into what this release includes and what you should be aware of while upgrading&#8230;&#8203;]]></summary></entry><entry><title type="html">Debezium 2.6.0.Alpha1 Released</title><link href="https://debezium.io/blog/2024/01/22/debezium-2.6-alpha1-released/" rel="alternate" type="text/html" title="Debezium 2.6.0.Alpha1 Released"/><published>2024-01-22T00:00:00+00:00</published><updated>2024-01-22T00:00:00+00:00</updated><id>https://debezium.io/blog/2024/01/22/debezium-2.6-alpha1-released</id><content type="html" xml:base="https://debezium.io/blog/2024/01/22/debezium-2.6-alpha1-released/"><![CDATA[<div class="paragraph"> <p>A new year, a new preview release, in true Debezium fashion. The team is pleased to announce the first installment of the Debezium 2.6 release stream, <strong>Debezium 2.6.0.Alpha1</strong>. Let&#8217;s take a moment and dive into these new features, understand how to use these to improve your change data capture experience&#8230;&#8203;</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking_changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>The team aims to avoid any potential breaking changes between minor releases; however, such changes are sometimes inevitable.</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">MongoDB</dt> <dd> <div class="ulist"> <ul> <li> <p>The MongoDB connector no longer supports the <code>replica_set</code> mode (<a href="https://issues.redhat.com/browse/DBZ-7260)">DBZ-7260</a>). This has been a feature that has been deprecated for several versions and there has been ongoing work over Debezium 2.x to achieve this goal. If you are using the <code>replica_set</code> mode, you will need to make adjustments when using Debezium 2.6+.</p> </li> </ul> </div> </dd> <dt class="hdlist1">Re-select Columns Post Processor</dt> <dd> <div class="ulist"> <ul> <li> <p>The re-select columns post processor used the key based on the <code>message.key.columns</code> when building the query. This is not correct for most tables with primary keys. The default behavior has changed and the table primary key is used by default. A new configuration option was introduced to allow the user to choose between whether to use the primary key or the generated key, <code>reselect.use.event.key</code> (<a href="https://issues.redhat.com/browse/DBZ-7358">DBZ-7358</a>).</p> </li> </ul> </div> </dd> </dl> </div> </div> </div> <div class="sect1"> <h2 id="improvements_and_changes">Improvements and changes</h2> <div class="sectionbody"> <div class="sect2"> <h3 id="new_matching_collections_api_added">New Matching Collections API added</h3> <div class="paragraph"> <p>One of the team&#8217;s ongoing tasks include the migration of Debezium UI&#8217;s backend into the main Debezium repository. One of the unique benefits with doing this is we can identify where there is code overlap between a connector&#8217;s runtime and the UI, and develop interface contracts to expose this shared data.</p> </div> <div class="paragraph"> <p>Thanks to a community contribution for <a href="https://issues.redhat.com/browse/DBZ-7167">DBZ-7167</a>, the <code>RelationalBaseSourceConnector</code> contract has been adjusted and a new method introduced to return a list of table names that match the connector&#8217;s specific configuration. Any connector that implements this abstract base class will need to implement this new method.</p> </div> </div> <div class="sect2"> <h3 id="cloudevents_schema_name_customization">CloudEvents schema name customization</h3> <div class="paragraph"> <p>When using schema registry, event schemas need to be registered with a name so that they can be looked up upon later inquiries by pipelines. So when pairing CloudEvents formatted messages with schema registry, the same applies and in Debezium 2.6, you can explicitly control how the name is registered.</p> </div> <div class="paragraph"> <p>By default, the schema for a CloudEvent message will be automatically generated by the converter. However, if the auto generated schema names are not sufficient, you can adjust the configuration by specifying <code>dataSchemaName</code>, which can be set either to <code>generate</code> (the default behavior) or <code>header</code> to pull the schema name directly from the specified event header field.</p> </div> </div> <div class="sect2"> <h3 id="oracle_infinispan_cache_improvements">Oracle Infinispan cache improvements</h3> <div class="paragraph"> <p>The Debezium Oracle connector maintains a buffer of all in-flight transactions, and this buffer can be allocated off-heap using Infinispan. Sometimes, the user configuration specifies that if an in-flight transaction lasts longer than the specified number of milliseconds, the transaction can be abandoned or discarded by the buffer. This means that the transaction will be forgotten and not emitted by the connector.</p> </div> <div class="paragraph"> <p>In order to improve metrics integration with frameworks like Grafana and Prometheus, a new JMX metric, <code>AbandonedTransactionCount</code>, was added to track the number of transactions that are abandoned by the connector during it&#8217;s runtime.</p> </div> </div> <div class="sect2"> <h3 id="supports_spanner_new_row_and_old_values_value_capture_type">Supports Spanner <code>NEW_ROW_AND_OLD_VALUES</code> value capture type</h3> <div class="paragraph"> <p>Google Spanner&#8217;s value capture type is responsible for controlling how the change stream represents the change data in the event stream and are configured when constructing the change stream.</p> </div> <div class="paragraph"> <p>Spanner introduced a new value capture mode called <code>NEW_ROW_AND_OLD_VALUES</code>, which is responsible for capturing all values of tracked columns, both modified and unmodified, whenever any column changes. This new mode is an improvement over <code>NEW_ROW</code> because it also includes the capture of old values, making it align with what you typically observe with other Debezium connectors.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_changes">Other changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.6.0.Alpha1%20ORDER%20BY%20component%20ASC">25 issues</a> were fixed in this release:</p> </div> <div class="ulist"> <ul> <li> <p>Empty object sent to GCP Pub/Sub after DELETE event <a href="https://issues.redhat.com/browse/DBZ-7098">DBZ-7098</a></p> </li> <li> <p>Notifications are Missing the ID field in log channel <a href="https://issues.redhat.com/browse/DBZ-7249">DBZ-7249</a></p> </li> <li> <p>Debezium-ddl-parser crashes on parsing MySQL DDL statement (sub-query with UNION) <a href="https://issues.redhat.com/browse/DBZ-7259">DBZ-7259</a></p> </li> <li> <p>Oracle DDL parsing error in PARTITION REFERENCE <a href="https://issues.redhat.com/browse/DBZ-7266">DBZ-7266</a></p> </li> <li> <p>Enhance Oracle&#8217;s CREATE TABLE for Multiple Table Specifications <a href="https://issues.redhat.com/browse/DBZ-7286">DBZ-7286</a></p> </li> <li> <p>Add service loader manifests for all Connect plugins <a href="https://issues.redhat.com/browse/DBZ-7298">DBZ-7298</a></p> </li> <li> <p>PostgreSQL ad-hoc blocking snapshots fail when snapshot mode is "never" <a href="https://issues.redhat.com/browse/DBZ-7311">DBZ-7311</a></p> </li> <li> <p>Ad-hoc blocking snapshot dies with "invalid snapshot identifier" immediately after connector creation <a href="https://issues.redhat.com/browse/DBZ-7312">DBZ-7312</a></p> </li> <li> <p>Specifying a table include list with spaces between elements cause LogMiner queries to miss matches <a href="https://issues.redhat.com/browse/DBZ-7315">DBZ-7315</a></p> </li> <li> <p>Debezium heartbeat.action.query does not start before writing to WAL: part 2 <a href="https://issues.redhat.com/browse/DBZ-7316">DBZ-7316</a></p> </li> <li> <p>Update Groovy version to 4.x <a href="https://issues.redhat.com/browse/DBZ-7340">DBZ-7340</a></p> </li> <li> <p>errors.max.retries is not used to stop retrying <a href="https://issues.redhat.com/browse/DBZ-7342">DBZ-7342</a></p> </li> <li> <p>Upgrade Antora to 3.1.7 <a href="https://issues.redhat.com/browse/DBZ-7344">DBZ-7344</a></p> </li> <li> <p>Oracle connector is occasionally unable to find SCN <a href="https://issues.redhat.com/browse/DBZ-7345">DBZ-7345</a></p> </li> <li> <p>Initial snapshot notifications should use full identifier. <a href="https://issues.redhat.com/browse/DBZ-7347">DBZ-7347</a></p> </li> <li> <p>Upgrade Outbox Extension to Quarkus 3.6.5 <a href="https://issues.redhat.com/browse/DBZ-7352">DBZ-7352</a></p> </li> <li> <p>MySqlJdbcSinkDataTypeConverterIT#testBooleanDataTypeMapping fails <a href="https://issues.redhat.com/browse/DBZ-7355">DBZ-7355</a></p> </li> </ul> </div> <div class="paragraph"> <p>A big thank you to all the contributors from the community who worked on this release: <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/shybovycha">Artem Shubovych</a>, <a href="https://github.com/roldanbob">Bob Roldan</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/ilyasahsan123">Ilyas Ahsan</a>, <a href="https://github.com/indraraj">Indra Shukla</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/james-johnston-thumbtack">James Johnston</a>, <a href="https://github.com/sherpa003">Jiri Kulhanek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/mimaison">Mickael Maison</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/wukachn">Peter Hamer</a>, <a href="https://github.com/richardharrington">Richard Harrington</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, <a href="https://github.com/ShuranZhang">Shuran Zhang</a>, <a href="https://github.com/vsantona">Vincenzo Santonastaso</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, and <a href="https://github.com/overwatcheddude">حمود سمبول</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="outlook_whats_next">Outlook &amp; What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>The Debezium 2.6 release cycle is one of our most ambitious initiatives with lots of new features and changes. You can find more about what the team is working on specifically for 2.6 and the road to Debezium 3.0 in our <a href="/docs/roadmap">road map</a>. If you have any suggestions or ideas, please feel free to get in touch with us on our <a href="https://groups.google.com/forum/#!forum/debezium">mailing list</a> or in our <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a>.</p> </div> <div class="paragraph"> <p>As the team continues springing into action with Debezium 2.6, we also intend to continue to bug fix and address any regressions that are reported to last quarter&#8217;s Debezium 2.5 release. Debezium 2.5 is now the project&#8217;s stable release, and we encourage everyone to upgrade and get the latest and greatest features. In fact, you can expect the next maintenance release of Debezium, <strong>2.5.1.Final</strong> to be released later this week :).</p> </div> <div class="paragraph"> <p>Until next time, happy streaming!</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><summary type="html"><![CDATA[A new year, a new preview release, in true Debezium fashion. The team is pleased to announce the first installment of the Debezium 2.6 release stream, Debezium 2.6.0.Alpha1. Let&#8217;s take a moment and dive into these new features, understand how to use these to improve your change data capture experience&#8230;&#8203;]]></summary></entry><entry><title type="html">Debezium and TimescaleDB</title><link href="https://debezium.io/blog/2024/01/11/Debezium-and-TimescaleDB/" rel="alternate" type="text/html" title="Debezium and TimescaleDB"/><published>2024-01-11T10:11:11+00:00</published><updated>2024-01-11T10:11:11+00:00</updated><id>https://debezium.io/blog/2024/01/11/Debezium-and-TimescaleDB</id><content type="html" xml:base="https://debezium.io/blog/2024/01/11/Debezium-and-TimescaleDB/"><![CDATA[<div class="paragraph"> <p>In this article, we are going to present and demonstrate a new feature delivered in Debezium 2.4 - the integration with the TimescaleDB database.</p> </div> <div class="paragraph"> <p><a href="https://github.com/timescale/timescaledb">TimescaleDB</a> is an open-source database designed to make SQL scalable for time-series data. It is implemented as an extension for the PostgreSQL database. This fact leads us to re-use the standard <a href="https://debezium.io/documentation/reference/stable/connectors/postgresql.html">Debezium PostgreSQL connector</a> and implement TimescaleDB support as a <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-66%3A+Single+Message+Transforms+for+Kafka+Connect">single message transform (SMT)</a>.</p> </div> <div class="paragraph"> <p></p> </div> <div class="paragraph"> <p>TimescaleDB provides three basic building blocks/concepts:</p> </div> <div class="ulist"> <ul> <li> <p>Hypertables</p> </li> <li> <p>Continuous aggregates</p> </li> <li> <p>Compression</p> </li> </ul> </div> <div class="paragraph"> <p>Metadata (catalog) that describes the definitions of the instances and the raw data are typically stored in <code>_timescaledb_internal_schema</code>. <a href="https://debezium.io/documentation/reference/stable/transformations/timescaledb.html">TimescaleDb SMT</a> connects to the database and reads and processes the metadata. The raw messages read from the database are then enriched with the metadata stored in Kafka Connect headers, creating the relation between the physical data and the TimescaleDB logical constructs.</p> </div> <div class="sect1"> <h2 id="demonstration">Demonstration</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium <a href="https://github.com/debezium/debezium-examples/tree/main/tutorial">examples repository</a> contains a Docker Compose-based deployment that provides a full environment to demonstrate the TimescaleDB integration.</p> </div> <div class="paragraph"> <p>The first step is to start the deployment</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">$ docker-compose -f docker-compose-timescaledb.yaml up --build</code></pre> </div> </div> <div class="paragraph"> <p>The command will bring up Debezium (Zookeeper, Kafka, Kafka Connect) and the source TimescaleDB database.</p> </div> <div class="paragraph"> <p>The started database is primed with the following database objects:</p> </div> <div class="ulist"> <ul> <li> <p>Hypertable <code>conditions</code> representing temperature and humidity measurements as time-series data; created with DDL <code>CREATE TABLE conditions (time TIMESTAMPTZ NOT NULL, location TEXT NOT NULL, temperature DOUBLE PRECISION NULL, humidity DOUBLE PRECISION NULL); SELECT create_hypertable('conditions', 'time')</code></p> </li> <li> <p>A single record of the measurement data (<code>INSERT INTO conditions VALUES(NOW(), 'Prague', 22.8, 53.3)</code>)</p> </li> <li> <p>PostgreSQL publication used to publish time-series data into replication slot as the demo uses <code>pgoutput</code> decoding plugin (<code>CREATE PUBLICATION dbz_publication FOR ALL TABLES WITH (publish = 'insert, update')</code>)</p> </li> </ul> </div> <div class="paragraph"> <p>In the next step it is necessary to register the Debezium PostgreSQL connector to capture the changes in the database</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">$ curl -i -X POST -H &quot;Accept:application/json&quot; -H  &quot;Content-Type:application/json&quot; http://localhost:8083/connectors/ -d @register-timescaledb.yaml</code></pre> </div> </div> <div class="paragraph"> <p>The registration request file differs from the regular one with the addition of these lines</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
    <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">inventory-connector</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">config</span><span class="delimiter">&quot;</span></span>: {
<span class="error">.</span><span class="error">.</span><span class="error">.</span>
        <span class="key"><span class="delimiter">&quot;</span><span class="content">schema.include.list</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">_timescaledb_internal</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">timescaledb</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.timescaledb.type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.connector.postgresql.transforms.timescaledb.TimescaleDb</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.timescaledb.database.hostname</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">timescaledb</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.timescaledb.database.port</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">5432</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.timescaledb.database.user</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.timescaledb.database.password</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.timescaledb.database.dbname</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>
    }
}</code></pre> </div> </div> <div class="sect2"> <h3 id="hypertables">Hypertables</h3> <div class="paragraph"> <p>The connector will capture the internal TimescaleDB schema with the physical tables containing the raw data and the <code>TimescaleDb</code> SMT will be applied to enrich messages and route them to the correctly named topics based on the logical names. The SMT configuration options contain information needed to connect to the database. In this case, the <code>conditions</code> hypertable will be physically stored in <code>_timescaledb_internal._hyper_1_1_chunk</code> and when processed by the SMT, it will be re-routed to <code>timescaledb.public.conditions</code> topic that is named according to fixed configured prefix <code>timescaledb</code> and logical name <code>public.conditions</code> that conforms to the hypertable name.</p> </div> <div class="paragraph"> <p>Let&#8217;s add a few more measurements to the table</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">$ docker-compose -f docker-compose-timescaledb.yaml exec timescaledb env PGOPTIONS=&quot;--search_path=public&quot; bash -c 'psql -U $POSTGRES_USER postgres'
postgres=# INSERT INTO conditions VALUES (now(), 'Prague', 30, 50);
postgres=# INSERT INTO conditions VALUES (now(), 'Brno', 35, 55);
postgres=# INSERT INTO conditions VALUES (now(), 'Prague', 40, 60);</code></pre> </div> </div> <div class="paragraph"> <p>and read the captured messages for the topic (printing of key and headers is enabled in the command)</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">docker-compose -f docker-compose-timescaledb.yaml exec kafka /kafka/bin/kafka-console-consumer.sh \
    --bootstrap-server kafka:9092 \
    --from-beginning \
    --property print.key=true \
    --property print.headers=true \
    --topic timescaledb.public.conditions</code></pre> </div> </div> <div class="paragraph"> <p>The messages contain two headers <code><em>debezium_timescaledb_chunk_table:_hyper_1_1_chunk,</em>debezium_timescaledb_chunk_schema:_timescaledb_internal</code> that describe the mapping between the logical hypertable name and the physical source table from which they were captured.</p> </div> </div> <div class="sect2"> <h3 id="continuous_aggregates">Continuous aggregates</h3> <div class="paragraph"> <p>Continuous aggregates provide automatic statistical calculations over data that is stored in hypertables. The aggregate is defined as a materialized view that is backed by its own hypertable which in turn is backed by a set of physical tables. After an aggregate is recalculated (either manually or automatically), the new values are stored in the hypertable, from which they can be captured and streamed. The connector captures the new values in the physical tables and the SMT again solves the routing by remapping the physical destination back into the aggregate logical name. Kafka Connect headers with original hypertable and physical table names are added too.</p> </div> <div class="paragraph"> <p>Let&#8217;s create a continuous aggregate named <code>conditions_summary</code> that calculates the average, minimum, and maximum temperature per location and time interval</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">postgres=# CREATE MATERIALIZED VIEW conditions_summary WITH (timescaledb.continuous) AS
  SELECT
    location,
    time_bucket(INTERVAL '1 hour', time) AS bucket,
    AVG(temperature),
    MAX(temperature),
    MIN(temperature)
  FROM conditions
  GROUP BY location, bucket;</code></pre> </div> </div> <div class="paragraph"> <p>and read the captured messages for the topic</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">docker-compose -f docker-compose-timescaledb.yaml exec kafka /kafka/bin/kafka-console-consumer.sh \
    --bootstrap-server kafka:9092 \
    --from-beginning \
    --property print.key=true \
    --property print.headers=true \
    --topic timescaledb.public.conditions_summary</code></pre> </div> </div> <div class="paragraph"> <p>The messages contain two headers <code><em>debezium_timescaledb_hypertable_table:_materialized_hypertable_2,</em>debezium_timescaledb_hypertable_schema:_timescaledb_internal</code> that expose which backing hypertable was used to store the aggregates and two addtional headers <code><em>debezium_timescaledb_chunk_table:_hyper_2_2_chunk,</em>debezium_timescaledb_chunk_schema:_timescaledb_internal</code> that exposes the physical table in which the aggregate was stored.</p> </div> <div class="literalblock"> <div class="content"> <pre>`__debezium_timescaledb_chunk_table:_hyper_1_1_chunk,__debezium_timescaledb_chunk_schema:_timescaledb_internal` that describes the mapping between the logical hypertable name and the physical source table from which they were captured.</pre> </div> </div> <div class="paragraph"> <p>If a new measurement is added and aggregate recomputation is triggered then an updated aggregate is emitted to the topic</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">postgres=# INSERT INTO conditions VALUES (now(), 'Ostrava', 10, 50);
postgres=# CALL refresh_continuous_aggregate('conditions_summary', CURRENT_DATE, CURRENT_DATE + 1);</code></pre> </div> </div> <div class="paragraph"> <p>that looks like</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">{
   &quot;schema&quot;:{
...
   },
   &quot;payload&quot;:{
      &quot;before&quot;:null,
      &quot;after&quot;:{
         &quot;location&quot;:&quot;Ostrava&quot;,
         &quot;bucket&quot;:&quot;2024-01-09T13:00:00.000000Z&quot;,
         &quot;avg&quot;:10.0,
         &quot;max&quot;:10.0,
         &quot;min&quot;:10.0
      },
      &quot;source&quot;:{
         &quot;version&quot;:&quot;2.5.0.Final&quot;,
         &quot;connector&quot;:&quot;postgresql&quot;,
         &quot;name&quot;:&quot;dbserver1&quot;,
         &quot;ts_ms&quot;:1704806938840,
         &quot;snapshot&quot;:&quot;false&quot;,
         &quot;db&quot;:&quot;postgres&quot;,
         &quot;sequence&quot;:&quot;[\&quot;29727872\&quot;,\&quot;29728440\&quot;]&quot;,
         &quot;schema&quot;:&quot;public&quot;,
         &quot;table&quot;:&quot;conditions_summary&quot;,
         &quot;txId&quot;:764,
         &quot;lsn&quot;:29728440,
         &quot;xmin&quot;:null
      },
      &quot;op&quot;:&quot;c&quot;,
      &quot;ts_ms&quot;:1704806939163,
      &quot;transaction&quot;:null
   }
}</code></pre> </div> </div> <div class="paragraph"> <p>So the topic contains two or more messages calculated for two different locations.</p> </div> </div> <div class="sect2"> <h3 id="compression">Compression</h3> <div class="paragraph"> <p>The TimescaleDB SMT does not enhance compressed chunks of data (physical table records), only as a by-product of them being stored in a hypertable. The compressed data is captured and stored in the Kafka topic. Typically, messages with compressed chunks are dropped and are not processed by subsequent jobs in the pipeline.</p> </div> <div class="paragraph"> <p>Let&#8217;s enable compression for the hypertable and compress it</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">postgres=# ALTER TABLE conditions SET (timescaledb.compress, timescaledb.compress_segment by = 'location');
postgres=# SELECT show_chunks('conditions');
              show_chunks
----------------------------------------
 _timescaledb_internal._hyper_1_1_chunk
(1 row)

postgres=# SELECT compress_chunk( '_timescaledb_internal._hyper_1_1_chunk');</code></pre> </div> </div> <div class="paragraph"> <p>Messages are written to <code>timescaledb._timescaledb_internal._compressed_hypertable_3</code>.</p> </div> <div class="paragraph"> <p>Tear down the environment</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">docker-compose -f docker-compose-timescaledb.yaml down</code></pre> </div> </div> </div> </div> </div> <div class="sect1"> <h2 id="conclusion">Conclusion</h2> <div class="sectionbody"> <div class="paragraph"> <p>In this post, we have demonstrated the capturing of data from TimescaleDB time-series database and their processing by the TimescaleDb SMT. We have shown how messages are routed and enriched depending on hypertables and continuous aggregates acting as the source of data.</p> </div> </div> </div>]]></content><author><name>Jiri Pechanec</name></author><category term="debezium"/><category term="features"/><category term="connectors"/><category term="postgres"/><category term="timescaledb"/><summary type="html"><![CDATA[In this article, we are going to present and demonstrate a new feature delivered in Debezium 2.4 - the integration with the TimescaleDB database. TimescaleDB is an open-source database designed to make SQL scalable for time-series data. It is implemented as an extension for the PostgreSQL database. This fact leads us to re-use the standard Debezium PostgreSQL connector and implement TimescaleDB support as a single message transform (SMT).]]></summary></entry><entry><title type="html">Debezium 2.5.0.Final Released</title><link href="https://debezium.io/blog/2023/12/21/debezium-2-5-final-released/" rel="alternate" type="text/html" title="Debezium 2.5.0.Final Released"/><published>2023-12-21T00:00:00+00:00</published><updated>2023-12-21T00:00:00+00:00</updated><id>https://debezium.io/blog/2023/12/21/debezium-2-5-final-released</id><content type="html" xml:base="https://debezium.io/blog/2023/12/21/debezium-2-5-final-released/"><![CDATA[<div class="paragraph"> <p>As the winter chill settles in, and we transition to the festive holiday season, our dedicated team has been busy preparing a special gift for the Debezium community. I am excited to share the immediate release of Debezium 2.5.0.Final, just in time for the holiday celebrations. Get ready to unwrap this latest minor version, filled with holiday cheer and exciting new features!</p> </div> <div class="paragraph"> <p>Let&#8217;s take a moment and review all the new features, changes, and improvements that are included in Debezium 2.5, which includes <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(2.5.0.Alpha1%2C%202.5.0.Alpha2%2C%202.5.0.Beta1%2C%202.5.0.Beta2%2C%202.5.0.CR1%2C%202.5.0.Final)">181 issues</a> resolved by 37 unique contributors.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking_changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>While we try to avoid any potential breaking changes between minor releases, such changes are sometimes inevitable. The upgrade to Debezium 2.5 includes a total of 10 unique breaking changes:</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">MySQL</dt> <dd> <div class="ulist"> <ul> <li> <p>The MySQL community announced that MySQL 5.7 would enter its End of Life cycle at the end of October 2023 In accordance with this upstream community news, Debezium too is making adjustments, like other vendors, around this recent news. To that end, starting with Debezium 2.5, we will no longer be testing nor supporting MySQL 5.7 if full capacity, thus MySQL 5.7 enters what we call "best-effort" support. (<a href="https://issues.redhat.com/browse/DBZ-6874">DBZ-6874</a>)</p> </li> <li> <p>MySQL <code>BIT</code> datatype did not have an implicit length if any was not set. This is incorrect as the default length if none is provided is <code>1</code> (<a href="https://issues.redhat.com/browse/DBZ-7230">DBZ-7230</a>).</p> </li> </ul> </div> </dd> <dt class="hdlist1">MongoDB</dt> <dd> <div class="ulist"> <ul> <li> <p>In earlier versions of Debezium, a user could use the MongoDB connector and perform a snapshot of a collection on a specific shard when using a MongoDB sharded deployment. Unfortunately, while we understand that users may have taken advantage of this behavior, it was unintended and not supported. Debezium 2.5 removes this ability entirely, and it&#8217;s a step in the forward goal to deprecate and remove the replica-set streaming mode in MongoDB completely (<a href="https://issues.redhat.com/browse/DBZ-7139">DBZ-7139</a>).</p> </li> <li> <p>Default connection mode is changed from <code>replica_set</code> to <code>sharded</code> as a preparation step for its complete removal. The change will lead to invalidation of existing offsets and a silent re-execution of the initial snapshot. To prevent this a check was added that will fail the connector upon start if this would happen. The user can either set <code>replica_set</code> connection mode explicitly or can remove the existing offsets (<a href="https://issues.redhat.com/browse/DBZ-7272">DBZ-7272</a>).</p> </li> </ul> </div> </dd> <dt class="hdlist1">JDBC</dt> <dd> <div class="ulist"> <ul> <li> <p>There was a corner case reported where the JDBC sink connector was mistakenly writing fields that had <code>null</code> values to the target database with the default value instead of a value of <code>NULL</code>. This has been fixed in Debezium 2.5 (<a href="https://issues.redhat.com/browse/DBZ-7191">DBZ-7191</a>).</p> </li> </ul> </div> </dd> <dt class="hdlist1">Core</dt> <dd> <div class="ulist"> <ul> <li> <p>If you are presently using the CloudEvents converter to emit events that conform to the CloudEvents format, it&#8217;s important to note that the configuration option <code>metadata.location</code> was renamed to <code>metadata.source</code>. You will need to be sure to update your connector configurations to reflect this change with Debezium 2.5 and onward. (<a href="https://issues.redhat.com/browse/DBZ-7060">DBZ-7060</a>)</p> </li> <li> <p>Part of the team&#8217;s focus in Debezium 2.5 was to improve the Debezium Embedded Engine&#8217;s experience. With that goal in mind, we took this preview release as an opportunity to clean-up the embedded engine&#8217;s API.</p> </li> <li> <p>If your usage of the Debezium Embedded Engine utilized any of the previously deprecated APIs on <code>EmbeddedEngine</code>, you will find those methods have since been removed. (<a href="https://issues.redhat.com/browse/DBZ-7110">DBZ-7100</a>) The recommended path forward is to make sure that you&#8217;re using the <code>DebeziumEngine</code> interface provided by the <code>debezium-api</code> artifact.</p> </li> <li> <p>The <code>ComputePartition</code> was an SMT that enabled users to compute the desired partition for which an event would be written in a Kafka topic. This single message transformation (SMT) was deprecated some time ago in favor of the new <code>PartitionRouting</code> single message transformation. Debezium 2.5 removes the old, deprecated <code>ComputePartition</code>, and users who may still be relying on this SMT will need to migrate to the new <code>PartitionRouting</code> SMT if you have not already done so (<a href="https://issues.redhat.com/browse/DBZ-7141">DBZ-7141</a>).</p> </li> <li> <p>The schema name prefix and letter casing for Cloud Event headers was not consistent with payload name. The schema name was aligned so both headers and payload share th same namespace and follow the same rules for letter casing (<a href="https://issues.redhat.com/browse/DBZ-7216">DBZ-7216</a>).</p> </li> </ul> </div> </dd> </dl> </div> </div> </div> <div class="sect1"> <h2 id="improvements_and_changes">Improvements and changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>In this section, we&#8217;re going to take a tour of all the new features and improvements in Debezium 2.5.</p> </div> <div class="sect2"> <h3 id="core">Core</h3> <div class="sect3"> <h4 id="redis_schema_history_retries_now_limited">Redis Schema History Retries now Limited</h4> <div class="paragraph"> <p>Debezium 2.5 introduces a new configuration option, <code>schema.history.internal.redis.max.attempts</code> designed to limit the number of retry attempts while connecting to a Redis database when it becomes unavailable, previously it simply retried forever. This new option defaults to <code>10</code> but is user configurable. (<a href="https://issues.redhat.com/browse/DBZ-7120">DBZ-7120</a>)</p> </div> </div> <div class="sect3"> <h4 id="additional_notifications_for_initial_snapshots">Additional notifications for initial snapshots</h4> <div class="paragraph"> <p>Debezium&#8217;s notification subsystem provides a simple way to integrate external processes and applications with certain Debezium tasks, such as taking a snapshot. In prior versions, the notifications for initial snapshots were quite basic and provided details such as when the snapshot started, when each table started and concluded, and finally when the snapshot ended.</p> </div> <div class="paragraph"> <p>A recent contribution that was part of <a href="https://issues.redhat.com/browse/DBZ-6878">DBZ-6878</a> extends on this base functionality to provide enhanced details about the snapshot. For example, the <code>IN_PROGRESS</code> notification will provide additional details about what tables are being captured and which table is currently in-progress, shown below:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
   <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">6d82a3ec-ba86-4b36-9168-7423b0dd5c1d</span><span class="delimiter">&quot;</span></span>,
   <span class="key"><span class="delimiter">&quot;</span><span class="content">aggregate_type</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">Initial Snapshot</span><span class="delimiter">&quot;</span></span>,
   <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">IN_PROGRESS</span><span class="delimiter">&quot;</span></span>,
   <span class="key"><span class="delimiter">&quot;</span><span class="content">additional_data</span><span class="delimiter">&quot;</span></span>:{
      <span class="key"><span class="delimiter">&quot;</span><span class="content">connector_name</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">my-connector</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">data_collections</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">table1, table2</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">current_collection_in_progress</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">table1</span><span class="delimiter">&quot;</span></span>
   },
   <span class="key"><span class="delimiter">&quot;</span><span class="content">timestamp</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">1695817046353</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>Additionally, another initial snapshot notification called <code>TABLE_SCAN_COMPLETED</code> also provides similar details, as shown below:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
   <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">6d82a3ec-ba86-4b36-9168-7423b0dd5c1d</span><span class="delimiter">&quot;</span></span>,
   <span class="key"><span class="delimiter">&quot;</span><span class="content">aggregate_type</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">Initial Snapshot</span><span class="delimiter">&quot;</span></span>,
   <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">TABLE_SCAN_COMPLETED</span><span class="delimiter">&quot;</span></span>,
   <span class="key"><span class="delimiter">&quot;</span><span class="content">additional_data</span><span class="delimiter">&quot;</span></span>:{
      <span class="key"><span class="delimiter">&quot;</span><span class="content">connector_name</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">my-connector</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">data_collection</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">table1, table2</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">scanned_collection</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">table1</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">total_rows_scanned</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">100</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">status</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">SUCCEEDED</span><span class="delimiter">&quot;</span></span>
   },
   <span class="key"><span class="delimiter">&quot;</span><span class="content">timestamp</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">1695817046353</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> Several fields shown above such as <code>data_collection</code>, these are not currently available for MongoDB snapshots and are only available for SQL-based relational connectors. </td> </tr> </table> </div> <div class="paragraph"> <p>For more details, please see the <a href="https://debezium.io/documentation/reference/2.5/configuration/notification.html">Notification documentation</a>.</p> </div> </div> <div class="sect3"> <h4 id="re_select_columns">Re-select columns</h4> <div class="paragraph"> <p>In some cases, because of the way that certain source databases function, when a Debezium connector emits a change event, the event might exclude values for specific column types. For example, values for <code>TOAST</code> columns in PostgreSQL, <code>LOB</code> columns in Oracle, or <code>Extended String</code> columns in Oracle Exadata, might all be excluded.</p> </div> <div class="paragraph"> <p>Debezium 2.5 introduces the <code>ReselectColumnsPostProcessor</code> providing a way to re-select one or more columns from a database table and fetch the current state. You can configure the post processor to re-select the following column types:</p> </div> <div class="ulist"> <ul> <li> <p>null columns.</p> </li> <li> <p>columns that contain the <code>unavailable.value.placeholder</code> sentinel value.</p> </li> </ul> </div> <div class="paragraph"> <p>Configuring a PostProcessor is similar to configuring a CustomConverter or Transformation, except that it works on the mutable payload&#8217;s Struct rather than the SourceRecord.</p> </div> </div> <div class="sect3"> <h4 id="insertdelete_semantics_for_incremental_snapshot_watermarking">INSERT/DELETE semantics for incremental snapshot watermarking</h4> <div class="paragraph"> <p>The property <code>incremental.snapshot.watermarking.strategy</code> has been introduced to let users choose the watermarking strategy to use during an incremental snapshot.</p> </div> <div class="paragraph"> <p>The <code>insert_insert</code> (old behavior) approach lets Debezium creating two entries in the signaling data collection for each chunk during the snapshot to signal the opening of the snapshot window and another to mark its closure.</p> </div> <div class="paragraph"> <p>On the other hand, with the <code>insert_delete</code> option, a single entry is written in the signaling data collection for each chunk at the beginning of the window. After completion, this entry is removed, and no corresponding entry is added to signify the closure of the snapshot window. This method aids in more efficient management of the signaling data collection.</p> </div> <div class="paragraph"> <p>For more details, please see the <code>Connector properties</code> section of the connector of your interest.</p> </div> </div> </div> <div class="sect2"> <h3 id="mongodb">MongoDB</h3> <div class="sect3"> <h4 id="seamless_large_document_handling">Seamless large document handling</h4> <div class="paragraph"> <p>Debezium has introduced several changes around large document processing in recent releases; however, those changes primarily focused on handling that use case with MongoDB 4 and 5. While these improvements certainly help for those older versions, the MongoDB community has introduced a way in MongoDB 6 to seamlessly deal with this at the database pipeline level.</p> </div> <div class="paragraph"> <p>Debezium 2.5&#8217;s MongoDB connector now uses the <code>$changeStreamSplitLargeEvent</code> aggregation feature, introduced as part of MongoDB 6.0.9. This avoids the <code>BSONObjectTooLarge</code> exception when working with documents that would exceed the 16MB document size limit of MongoDB. This new feature is controlled by the <code>oversize.handling.mode</code> option, which defaults to <code>fail</code>. Please adjust this configuration if you would like to take advantage of this new, opt-in feature. (<a href="https://issues.redhat.com/browse/DBZ-6726">DBZ-6726</a>)</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>Debezium is simply utilizing an underlying feature of the MongoDB database. As such, the database still has some limitations discussed in the <a href="https://www.mongodb.com/docs/v6.0/reference/operator/aggregation/changeStreamSplitLargeEvent/#behavior">MongoDB documentation</a> that could still lead to exceptions with large documents that don&#8217;t adhere to MongoDB&#8217;s split rules.</p> </div> </td> </tr> </table> </div> </div> </div> <div class="sect2"> <h3 id="mysql">MySQL</h3> <div class="sect3"> <h4 id="8_2_support">8.2 support</h4> <div class="paragraph"> <p>The MySQL community recently released a new innovation release, MySQL 8.2.0 at the end of October 2023. This new release has been tested with Debezium, and we&#8217;re happy to announce that we officially support this new innovation release. (<a href="https://issues.redhat.com/browse/DBZ-6873">DBZ-6873</a>)</p> </div> </div> <div class="sect3"> <h4 id="high_precision_source_timestamps">High-precision source timestamps</h4> <div class="paragraph"> <p>Several new high-precision timestamp fields have been included in several MySQL replication events. For example, in MySQL 8.0.1, there are to microsecond-resolution timestamps added to GTID events that specify the timestamp when the transaction was committed on the immediate primary and when committed on the original primary.</p> </div> <div class="paragraph"> <p>Debezium 2.5 now takes advantage of these values and will use these for the <code>ts_ms</code> fields if they&#8217;re available, falling back to the second-based precision if they are not or if you&#8217;re using a version of MySQL prior to 8.0.1 (<a href="https://issues.redhat.com/browse/DBZ-7183">DBZ-7183</a>).</p> </div> </div> </div> <div class="sect2"> <h3 id="postgresql">PostgreSQL</h3> <div class="sect3"> <h4 id="streaming_from_postgresql_16_stand_bys">Streaming from PostgreSQL 16 stand-bys</h4> <div class="paragraph"> <p>In PostgreSQL 16, you can now define replication slots on a stand-by instance. This enables a plethora of new options, including the ability to perform change data capture from a replica rather than your production system for load distribution, particularly in a very active database.</p> </div> <div class="paragraph"> <p>Debezium 2.5 now supports connecting to a stand-by PostgreSQL 16 server and streaming changes (<a href="https://issues.redhat.com/browse/DBZ-7181">DBZ-7181</a>).</p> </div> </div> </div> <div class="sect2"> <h3 id="oracle">Oracle</h3> <div class="sect3"> <h4 id="streaming_metrics_changes">Streaming Metrics Changes</h4> <div class="paragraph"> <p>In previous builds of Debezium, there was a single Oracle streaming metrics bean that exposed all metrics options that spanned across all three streaming adapters. This often lead to some confusion about what metrics are applicable to which streaming adapter so we wanted to define a clear distinction in this case.</p> </div> <div class="paragraph"> <p>With Debezium 2.5, the Oracle streaming metrics beans have been split into three different implementations, one for each adapter type. For observability stacks, this change should be completely transparent unless you were previously gathering a metric for one adapter type while using another. In this case you&#8217;ll find that metric is no longer available.</p> </div> <div class="paragraph"> <p>Specifically for LogMiner users, several metrics have been renamed and the old metrics have been deprecated. While you will still be able to use the old metric names in Debezium 2.5, these are scheduled for removal in a future 2.7+ build. The metrics that were deprecated and renamed are as follows:</p> </div> <table class="tableblock frame-all grid-all stretch table table-bordered table-striped"> <colgroup> <col style="width: 50%;"> <col style="width: 50%;"> </colgroup> <thead> <tr> <th class="tableblock halign-left valign-top">Old/Deprecated Metric</th> <th class="tableblock halign-left valign-top">New Metric</th> </tr> </thead> <tbody> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>CurrentRedoLogFileName</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>CurrentLogFileNames</p> </div></div></td> </tr> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>RedoLogStatus</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>RedoLogStatuses</p> </div></div></td> </tr> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>SwitchCounter</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>LogSwitchCounter</p> </div></div></td> </tr> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>FetchingQueryCount</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>FetchQueryCount</p> </div></div></td> </tr> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>HoursToKeepTransactionInBuffer</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>MillisecondsToKeepTransactionsInBuffer</p> </div></div></td> </tr> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>TotalProcessingTimeInMilliseconds</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>TotalBatchProcessingTimeInMilliseconds</p> </div></div></td> </tr> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>RegisteredDmlCount</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>TotalChangesCount</p> </div></div></td> </tr> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>MillisecondsToSleepBetweenMiningQuery</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>SleepTimeInMilliseconds</p> </div></div></td> </tr> </tbody> <tfoot> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>NetworkConnectionProblemsCounter</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p><em>No replacement</em></p> </div></div></td> </tr> </tfoot> </table> </div> <div class="sect3"> <h4 id="lob_behavior">LOB behavior</h4> <div class="paragraph"> <p>Debezium 2.5 aligns LOB behavior in snapshot and streaming. When <code>lob.enabled</code> is set to <code>false</code>, the unavailable value placeholder will be explicitly included during snapshot to match the behavior of streaming.</p> </div> </div> </div> <div class="sect2"> <h3 id="sql_server">SQL Server</h3> <div class="sect3"> <h4 id="notification_improvements">Notification Improvements</h4> <div class="paragraph"> <p>Debezium for SQL Server works by reading the changes captured by the database in what are called capture instances. These instances can come and go based on a user&#8217;s needs, and it can be difficult to know if Debezium has concluded its own capture process for a given capture instance.</p> </div> <div class="paragraph"> <p>Debezium 2.5 remedies this problem by emitting a new notification aggregate called <code>Capture Instance</code>, allowing any observer to realize when a capture instance is no longer in use by Debezium. This new notification includes a variety of connector details including the connector&#8217;s name along with the start, stop, and commit LSN values. (<a href="https://issues.redhat.com/browse/DBZ-7043">DBZ-7043</a>)</p> </div> </div> <div class="sect3"> <h4 id="driver_updates">Driver Updates</h4> <div class="paragraph"> <p>SQL Serer 2019 introduced the ability to specify column-specific sensitivity classifications to provide better visibility and protections for sensitive data. Unfortunately, the current driver shipped with Debezium 2.4 and earlier does not support this feature. Debezium 2.5 introduces the latest 12.4.2 SQL Server driver so that users can now take advantage of this feature out of the box. (<a href="https://issues.redhat.com/browse/DBZ-7109">DBZ-7109</a>)</p> </div> </div> </div> <div class="sect2"> <h3 id="jdbc_sink">JDBC sink</h3> <div class="sect3"> <h4 id="batch_support">Batch Support</h4> <div class="paragraph"> <p>Debezium first introduced the JDBC sink connector in March 2023 as a part of Debezium 2.2. Over the last several months, this connector has seen numerous iterations to improve its stability, feature set, and capabilities. Debezium 2.5 builds atop of those efforts, introducing batch-writes. (<a href="https://issues.redhat.com/browse/DBZ-6317">DBZ-6317</a>)</p> </div> <div class="paragraph"> <p>In previous versions, the connector worked on each topic event separately; however, the new batch-write support mode will collect the events into buckets and write those changes to the target system using the fewest possible transaction boundaries as possible. This change increases the connector&#8217;s throughput capabilities and makes the interactions with the target database far more efficient.</p> </div> </div> <div class="sect3"> <h4 id="field_inclusionexclusion">Field inclusion/exclusion</h4> <div class="paragraph"> <p>Debezium 2.5 introduces a new JBDC sink feature where users can now specify which fields from the event payload are to be included or excluded from the target database write operation. This feature works just like any other include/exclude combination in the Debezium framework where these two properties are mutually exclusive.</p> </div> <div class="paragraph"> <p>As an example, if we have a simple event payload with the following fields in topic <code>customers</code>:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="integer">12345</span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Acme</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">address</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">123 Main Street</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>If we want to avoid writing the <code>address</code> field to the target database and only write the <code>id</code> and <code>name</code> fields to the target table, we can use this new feature to accomplish this. This can be done adding either a <code>field.include.list</code> or <code>field.exclude.list</code> property.</p> </div> <div class="listingblock"> <div class="title">Example that prevents writing the address field to target</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">field.exclude.list</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">customers:address</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>The format of the include/exclude for fields is <code>[&lt;topic-name&gt;:]&lt;field-name&gt;</code>, where the topic-name is optionally and can be omitted if you want to avoid writing the <code>address</code> field for all events. Please see the JDBC sink connector configuration documentation for more details.</p> </div> </div> </div> <div class="sect2"> <h3 id="debezium_server">Debezium Server</h3> <div class="sect3"> <h4 id="operator">Operator</h4> <div class="paragraph"> <p>The Debezium Server Operator for Kubernetes has been actively improved in this preview release of Debezium 2.5. Several improvements include:</p> </div> <div class="ulist"> <ul> <li> <p>Ability to set image pull secrets in the CRDs <a href="https://issues.redhat.com/browse/DBZ-6962">DBZ-6962</a></p> </li> <li> <p>Ability to set resource limits in the CRDs <a href="https://issues.redhat.com/browse/DBZ-7052">DBZ-7052</a></p> </li> <li> <p>Published OLM bundle scripts to Maven Central <a href="https://issues.redhat.com/browse/DBZ-6995">DBZ-6995</a></p> </li> <li> <p>Support OKD/OpenShift catalog in OperatorHub release script <a href="https://issues.redhat.com/browse/DBZ-7010">DBZ-7010</a></p> </li> <li> <p>Display name and descriptions metadata available in OLM bundle <a href="https://issues.redhat.com/browse/DBZ-7011">DBZ-7011</a></p> </li> <li> <p>New metrics endpoint for gathering metrics <a href="https://issues.redhat.com/browse/DBZ-7053">DBZ-7053</a></p> </li> </ul> </div> <div class="paragraph"> <p>As we continue to improve the Debezium Server Operator for Kubernetes, we&#8217;d love to get your feedback.</p> </div> </div> <div class="sect3"> <h4 id="service_account_for_crds">Service Account for CRDs</h4> <div class="paragraph"> <p>In previous versions of Debezium, it was not possible to use a service account named differently than the predefined one. This made the process a tad bit cumbersome for users because while you could grant roles and authorization to this predefined account separately, it meant you needed to use this predefined service account rather than one that you may already wish to use.</p> </div> <div class="paragraph"> <p>Debezium 2.5 simplifies this process, allowing you to now use your own, custom service account (<a href="https://issues.redhat.com/browse/DBZ-7111">DBZ-7111</a>).</p> </div> </div> <div class="sect3"> <h4 id="kinesis_sink_improvements">Kinesis Sink Improvements</h4> <div class="paragraph"> <p>Debezium Server Kinesis users will be happy to note that there has been some reliability improvements with the sink adapter with Debezium 2.5. The Kinesis Sink will now automatically retry the delivery of a failed record up to a maximum of 5 attempts before the adapter triggers a failure. This should improve the sink adapter&#8217;s delivery reliability and help situations where a batch of changes may overload the sink&#8217;s endpoint. (<a href="https://issues.redhat.com/browse/DBZ-7032">DBZ-7032</a>)</p> </div> </div> <div class="sect3"> <h4 id="eventhubs_partitioning">EventHubs partitioning</h4> <div class="paragraph"> <p>In earlier versions of Debezium Server, users could specify a fixed partition-id to stream all changes to a single partition or provide a static partition-key that will be set on all batch operations, which ultimately lends itself to streaming all changes to the same target partition. There are situations where this may be helpful, but it more often leads to a performance concerns for downstream processing.</p> </div> <div class="paragraph"> <p>Debezium 2.5 adjusts this behavior in order to improve performance. By default, when neither a <code>partitionid</code> or <code>partitionkey</code> is defined, the EventHub sink will send events using a round-robin technique to all available partitions. Events can be forced into a single, fixed partition by specifying a <code>partitionid</code>. Alternatively, the <code>partitionkey</code> can be provided to supply a fixed partition key that will be used to route all events to a specific partition.</p> </div> <div class="paragraph"> <p>If additional partition routing requirements are necessary, you can now combine the <code>PartitionRouting</code> SMT accomplish such tasks. For more details, please see the <a href="https://debezium.io/documentation/reference/nightly/operations/debezium-server.html#_using_partitions_in_eventhubs">Event Hubs documentation</a>.</p> </div> </div> <div class="sect3"> <h4 id="rabbitmq_streams_sink">RabbitMQ Streams sink</h4> <div class="paragraph"> <p>RabbitMQ introduced <a href="https://www.rabbitmq.com/streams.html">Streams</a> in version 3.9, which utilizes a fast and efficient protocol that can be combined with AMQP 0.9.1 to support large fan-outs, replay and time travel, and large data sets with extremely high throughput. Debezium 2.5 takes advantage of this new Streams implementation by introducing a new native Streams implementation (<a href="https://issues.redhat.com/browse/DBZ-6703">DBZ-6703</a>). In order to get started with this new implementation, configure the Debezium Server sink as follows:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="properties">debezium.sink.type=rabbitmqstream
debezium.sink.rabbitmqstream.connection.host=&lt;hostname of RabbitMQ&gt;
debezium.sink.rabbitmqstream.connection.port=&lt;port of RabbitMQ&gt;</code></pre> </div> </div> <div class="paragraph"> <p>Additionally, if you need to pass any other connection parameters to the RabbitMQ connection, you can do so by adding those to the configuration with the prefix <code>debezium.sink.rabbitmqstream.connection.</code> to pass through any config properties.</p> </div> <div class="paragraph"> <p>Please see the <a href="https://debezium.io/documentation/reference/nightly/operations/debezium-server.html#_rabbitmq_native_stream">Debezium Server RabbitMQ documentation</a> for more details.</p> </div> </div> <div class="sect3"> <h4 id="streamnamemapper_for_apache_kafka_sink">StreamNameMapper for Apache Kafka sink</h4> <div class="paragraph"> <p>The Kafka sink behaviour can now be modified by a custom logic providing alternative implementations for specific functionalities. When the alternative implementations are not available then the default ones are used.</p> </div> <div class="paragraph"> <p>For more details, please see the <a href="https://debezium.io/documentation/reference/2.5/operations/debezium-server.html#_injection_points_9">Apache Kafka Injection points</a>.</p> </div> </div> <div class="sect3"> <h4 id="aws_sqs_sink">AWS SQS sink</h4> <div class="paragraph"> <p>Amazon Simple Queue Service (Amazon SQS) is a distributed message queuing service. It supports programmatic sending of messages via web service applications as a way to communicate over the Internet. SQS is intended to provide a highly scalable hosted message queue that resolves issues arising from the common producer–consumer problem or connectivity between producer and consumer.</p> </div> <div class="paragraph"> <p>Debezium 2.5 offers the possibility to send events to Amazon SQS.</p> </div> </div> </div> <div class="sect2"> <h3 id="spanner">Spanner</h3> <div class="ulist"> <ul> <li> <p>Support for Cloud Spanner emulator with the Spanner connector <a href="https://issues.redhat.com/browse/DBZ-6845">DBZ-6845</a></p> </li> <li> <p>Resumable snapshot support for the Vitess connector <a href="https://issues.redhat.com/browse/DBZ-7050">DBZ-7050</a></p> </li> </ul> </div> </div> <div class="sect2"> <h3 id="informix">Informix</h3> <div class="sect3"> <h4 id="ibm_informix_connector">IBM Informix Connector</h4> <div class="paragraph"> <p>Thanks to the contribution from <a href="https://github.com/nrkljo">Lars Johansson</a>, Debezium 2.5 introduces a new connector to its portfolio to gather changes from IBM Informix. IBM Informix is an embeddable, high-performance database for integrating SQL, NoSQL, JSON, time-series, and spatial data in one place. It&#8217;s designed for analytics at the edge, in the cloud, or on premise.</p> </div> <div class="paragraph"> <p>The IBM Informix connector is bundled just like any of our community lead connectors, it is available on Maven Central or you can download the plug-in archive from our <a href="/releases/2.5">Debezium 2.5</a> releases page.</p> </div> <div class="paragraph"> <p>The maven artifact coordinates are:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;dependency&gt;</span>
    <span class="tag">&lt;groupId&gt;</span>io.debezium<span class="tag">&lt;/groupId&gt;</span>
    <span class="tag">&lt;artifactId&gt;</span>debezium-connector-informix<span class="tag">&lt;/artifactId&gt;</span>
    <span class="tag">&lt;version&gt;</span>2.5.0.Final<span class="tag">&lt;/version&gt;</span>
<span class="tag">&lt;/dependency&gt;</span></code></pre> </div> </div> <div class="paragraph"> <p>If you would like contribute to the Informix connector, we have added a new repository under the Debezium organization, <a href="https://github.com/debezium/debezium-connector-informix">debezium-connector-informix</a>.</p> </div> <div class="paragraph"> <p>I&#8217;d like to thank Lars Johansson for this contribution and his collaboration with the team, kudos!</p> </div> </div> </div> <div class="sect2"> <h3 id="mariadb">MariaDB</h3> <div class="sect3"> <h4 id="preview_support">Preview support</h4> <div class="paragraph"> <p>The community has leveraged the MySQL connector as an alternative to capture changes from MariaDB for quite some time now; however that compatibility was primarily best-case effort.</p> </div> <div class="paragraph"> <p>The Debezium 2.5 release stream aims to bring MariaDB to the forefront as a first-class connector by taking a very clear and methodological approach to incrementally check, validate, and eventually support MariaDB at the same capacity that we do MySQL. Our goal and hope is that we can do this within the scope of the MySQL connector proper; however, there is still quite a bit of ongoing investigation around GTID support that may influence the path forward.</p> </div> <div class="paragraph"> <p>This first preview build of Debezium 2.5 has taken the first step, we&#8217;ve verified that the code works against a single MariaDB database deployment, the test suite passes and we&#8217;ve addressed any changes needed with the Binlog client to support that deployment. Our next steps is to look into GTID support, which MariaDB supports but using an approach that isn&#8217;t compatible with MySQL.</p> </div> <div class="paragraph"> <p>Stay tuned for future builds as we continue to expand on this and we certainly welcome any early feedback.</p> </div> </div> <div class="sect3"> <h4 id="gtid_support">GTID support</h4> <div class="paragraph"> <p>Both MySQL and MariaDB support what is called Global Transaction Identifiers or GTIDs. These are used in replication to uniquely identify transaction(s) uniquely across a cluster. The implementation details between MySQL and MariaDB differ significantly and in earlier versions of Debezium, we only supported GTID with MySQL.</p> </div> <div class="paragraph"> <p>With Debezium 2.5, we are taking another step forward by introducing GTID support for MariaDB as part of the MySQL connector offering. In order to take advantage of this behavior, you will need to use the MariaDB driver rather than the MySQL driver by using a JDBC connection prefixed as <code>jdbc:mariadb</code> rather than <code>jdbc:mysql</code>. By doing this, you can now take full advantage of working with MariaDB and GTID just like MySQL (<a href="https://issues.redhat.com/browse/DBZ-1482">DBZ-1482</a>).</p> </div> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_changes">Other changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.5.0.Final%20ORDER%20BY%20component%20ASC">7 issues</a> were fixed in this release and a total of <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(2.5.0.Alpha1%2C%202.5.0.Alpha2%2C%202.5.0.Beta1%2C%202.5.0.Beta2%2C%202.5.0.CR1%2C%202.5.0.Final)">169 issues</a> across all the Debezium 2.5 releases.</p> </div> <div class="ulist"> <ul> <li> <p>Adding Debezium Server example using MySQL and GCP PubSub <a href="https://issues.redhat.com/browse/DBZ-4471">DBZ-4471</a></p> </li> <li> <p>Refactor ElapsedTimeStrategy <a href="https://issues.redhat.com/browse/DBZ-6778">DBZ-6778</a></p> </li> <li> <p>Multiple debezium:offsets Redis clients <a href="https://issues.redhat.com/browse/DBZ-6952">DBZ-6952</a></p> </li> <li> <p>Wrong case-behavior for non-avro column name in sink connector <a href="https://issues.redhat.com/browse/DBZ-6958">DBZ-6958</a></p> </li> <li> <p>Handle properly bytea field for jdbc sink to postgresql <a href="https://issues.redhat.com/browse/DBZ-6967">DBZ-6967</a></p> </li> <li> <p>Debezium jdbc sink process truncate event failure <a href="https://issues.redhat.com/browse/DBZ-6970">DBZ-6970</a></p> </li> <li> <p>Single quote replication includes escaped quotes for N(CHAR/VARCHAR) columns <a href="https://issues.redhat.com/browse/DBZ-6975">DBZ-6975</a></p> </li> <li> <p>Provide configuration option to exclude extension attributes from a CloudEvent <a href="https://issues.redhat.com/browse/DBZ-6982">DBZ-6982</a></p> </li> <li> <p>Debezium jdbc sink should throw not supporting schema change topic exception <a href="https://issues.redhat.com/browse/DBZ-6990">DBZ-6990</a></p> </li> <li> <p>Debezium doesn&#8217;t compile with JDK 21 <a href="https://issues.redhat.com/browse/DBZ-6992">DBZ-6992</a></p> </li> <li> <p>OLM bundle version for GA releases is invalid <a href="https://issues.redhat.com/browse/DBZ-6994">DBZ-6994</a></p> </li> <li> <p>Further refactoring to correct downstream rendering of incremental snapshots topics <a href="https://issues.redhat.com/browse/DBZ-6997">DBZ-6997</a></p> </li> <li> <p>ALTER TABLE fails when adding multiple columns to JDBC sink target <a href="https://issues.redhat.com/browse/DBZ-6999">DBZ-6999</a></p> </li> <li> <p>Invalid Link to zulip chat in CSV metadata <a href="https://issues.redhat.com/browse/DBZ-7000">DBZ-7000</a></p> </li> <li> <p>Make sure to terminate the task once connectivity is lost to either the rebalance or sync topic <a href="https://issues.redhat.com/browse/DBZ-7001">DBZ-7001</a></p> </li> <li> <p>Missing .metadata.annotations.repository field in CSV metadata <a href="https://issues.redhat.com/browse/DBZ-7003">DBZ-7003</a></p> </li> <li> <p>Single quote replication and loss of data <a href="https://issues.redhat.com/browse/DBZ-7006">DBZ-7006</a></p> </li> <li> <p>Remove deprecated embedded engine code <a href="https://issues.redhat.com/browse/DBZ-7013">DBZ-7013</a></p> </li> <li> <p>Enable replication slot advance check <a href="https://issues.redhat.com/browse/DBZ-7015">DBZ-7015</a></p> </li> <li> <p>Add configuration option to CloudEventsConverter to retrieve id and type from headers <a href="https://issues.redhat.com/browse/DBZ-7016">DBZ-7016</a></p> </li> <li> <p>Oracle connector: Payload size over 76020 bytes are getting truncated <a href="https://issues.redhat.com/browse/DBZ-7018">DBZ-7018</a></p> </li> <li> <p>Use optional schema for Timezone Converter tests <a href="https://issues.redhat.com/browse/DBZ-7020">DBZ-7020</a></p> </li> <li> <p>DDL statement couldn&#8217;t be parsed <a href="https://issues.redhat.com/browse/DBZ-7030">DBZ-7030</a></p> </li> <li> <p>Blocking ad-hoc snapshot is not really blocking for MySQL <a href="https://issues.redhat.com/browse/DBZ-7035">DBZ-7035</a></p> </li> <li> <p>Fake ROTATE event on connection restart cleans metadata <a href="https://issues.redhat.com/browse/DBZ-7037">DBZ-7037</a></p> </li> <li> <p>Consolidate resource labels and annotations <a href="https://issues.redhat.com/browse/DBZ-7064">DBZ-7064</a></p> </li> <li> <p>Oracle RAC throws ORA-00310: archive log sequence required <a href="https://issues.redhat.com/browse/DBZ-5350">DBZ-5350</a></p> </li> <li> <p>oracle missing CDC data <a href="https://issues.redhat.com/browse/DBZ-5656">DBZ-5656</a></p> </li> <li> <p>Missing oracle cdc records <a href="https://issues.redhat.com/browse/DBZ-5750">DBZ-5750</a></p> </li> <li> <p>Add (integration) tests for Oracle connector-specific Debezium Connect REST extension <a href="https://issues.redhat.com/browse/DBZ-6763">DBZ-6763</a></p> </li> <li> <p>Intermittent failure of MongoDbReplicaSetAuthTest <a href="https://issues.redhat.com/browse/DBZ-6875">DBZ-6875</a></p> </li> <li> <p>Connector frequently misses commit operations <a href="https://issues.redhat.com/browse/DBZ-6942">DBZ-6942</a></p> </li> <li> <p>Missing events from Oracle 19c <a href="https://issues.redhat.com/browse/DBZ-6963">DBZ-6963</a></p> </li> <li> <p>Mongodb tests in RHEL system testsuite are failing with DBZ 2.3.4 <a href="https://issues.redhat.com/browse/DBZ-6996">DBZ-6996</a></p> </li> <li> <p>Use DebeziumEngine instead of EmbeddedEngine in the testsuite <a href="https://issues.redhat.com/browse/DBZ-7007">DBZ-7007</a></p> </li> <li> <p>Debezium Embedded Infinispan Performs Slowly <a href="https://issues.redhat.com/browse/DBZ-7047">DBZ-7047</a></p> </li> <li> <p>Field exclusion does not work with events of removed fields <a href="https://issues.redhat.com/browse/DBZ-7058">DBZ-7058</a></p> </li> <li> <p>Update transformation property "delete.tombstone.handling.mode" to debezium doc <a href="https://issues.redhat.com/browse/DBZ-7062">DBZ-7062</a></p> </li> <li> <p>JDBC sink connector not working with CloudEvent <a href="https://issues.redhat.com/browse/DBZ-7065">DBZ-7065</a></p> </li> <li> <p>JDBC connection leak when error occurs during processing <a href="https://issues.redhat.com/browse/DBZ-7069">DBZ-7069</a></p> </li> <li> <p>Some server tests fail due to @com.google.inject.Inject annotation <a href="https://issues.redhat.com/browse/DBZ-7077">DBZ-7077</a></p> </li> <li> <p>Add MariaDB driver for testing and distribution <a href="https://issues.redhat.com/browse/DBZ-7085">DBZ-7085</a></p> </li> <li> <p>Allow DS JMX to use username-password authentication on k8 <a href="https://issues.redhat.com/browse/DBZ-7087">DBZ-7087</a></p> </li> <li> <p>HttpIT fails with "Unrecognized field subEvents" <a href="https://issues.redhat.com/browse/DBZ-7092">DBZ-7092</a></p> </li> <li> <p>MySQL parser does not conform to arithmetical operation priorities <a href="https://issues.redhat.com/browse/DBZ-7095">DBZ-7095</a></p> </li> <li> <p>VitessConnectorIT.shouldTaskFailIfColumnNameInvalid fails <a href="https://issues.redhat.com/browse/DBZ-7104">DBZ-7104</a></p> </li> <li> <p>When RelationalBaseSourceConnector#validateConnection is called with invalid config [inside Connector#validate()] can lead to exceptions <a href="https://issues.redhat.com/browse/DBZ-7105">DBZ-7105</a></p> </li> <li> <p>Debezium crashes on parsing MySQL DDL statement (specific INSERT) <a href="https://issues.redhat.com/browse/DBZ-7119">DBZ-7119</a></p> </li> <li> <p>Generate sundrio fluent builders for operator model <a href="https://issues.redhat.com/browse/DBZ-6550">DBZ-6550</a></p> </li> <li> <p>Convert operator source into multi module project <a href="https://issues.redhat.com/browse/DBZ-6551">DBZ-6551</a></p> </li> <li> <p>Implement "validate filters" endpoint in connector-specific Connect REST extensions <a href="https://issues.redhat.com/browse/DBZ-6762">DBZ-6762</a></p> </li> <li> <p>Test Avro adjustment for MongoDb connector and ExtractNewDocumentState SMT <a href="https://issues.redhat.com/browse/DBZ-6809">DBZ-6809</a></p> </li> <li> <p>Implement IT tests against Cloud Spanner emulator in main repo. <a href="https://issues.redhat.com/browse/DBZ-6906">DBZ-6906</a></p> </li> <li> <p>The DefaultDeleteHandlingStrategy couldn&#8217;t add the rewrite "__deleted" field to a non-struct value <a href="https://issues.redhat.com/browse/DBZ-7066">DBZ-7066</a></p> </li> <li> <p>Implement strategy pattern for MariaDB and MySQL differences <a href="https://issues.redhat.com/browse/DBZ-7083">DBZ-7083</a></p> </li> <li> <p>Debezium server has no default for offset.flush.interval.ms <a href="https://issues.redhat.com/browse/DBZ-7099">DBZ-7099</a></p> </li> <li> <p>Failed to authenticate to the MySQL database after snapshot <a href="https://issues.redhat.com/browse/DBZ-7132">DBZ-7132</a></p> </li> <li> <p>Run MySQL CI builds in parallel <a href="https://issues.redhat.com/browse/DBZ-7135">DBZ-7135</a></p> </li> <li> <p>Failure reading CURRENT_TIMESTAMP on Informix 12.10 <a href="https://issues.redhat.com/browse/DBZ-7137">DBZ-7137</a></p> </li> <li> <p>Debezium-ddl-parser crashes on parsing MySQL DDL statement (specific UNION) <a href="https://issues.redhat.com/browse/DBZ-7140">DBZ-7140</a></p> </li> <li> <p>outbox.EventRouter SMT throws NullPointerException when there is a whitespace in fields.additional.placement value <a href="https://issues.redhat.com/browse/DBZ-7142">DBZ-7142</a></p> </li> <li> <p>Debezium-ddl-parser crashes on parsing MySQL DDL statement (specific UPDATE) <a href="https://issues.redhat.com/browse/DBZ-7152">DBZ-7152</a></p> </li> <li> <p>Add matrix strategy to workflows <a href="https://issues.redhat.com/browse/DBZ-7154">DBZ-7154</a></p> </li> <li> <p>Add Unit Tests for ServiceAccountDependent Class in Debezium Operator Repository <a href="https://issues.redhat.com/browse/DBZ-7155">DBZ-7155</a></p> </li> <li> <p>JsonSerialisation is unable to process changes from sharded collections with composite sharding key <a href="https://issues.redhat.com/browse/DBZ-7157">DBZ-7157</a></p> </li> <li> <p>Log sequence check should treat each redo thread independently <a href="https://issues.redhat.com/browse/DBZ-7158">DBZ-7158</a></p> </li> <li> <p>Fail fast during deserialization if a value is not a CloudEvent <a href="https://issues.redhat.com/browse/DBZ-7159">DBZ-7159</a></p> </li> <li> <p>Correctly calculate Max LSN <a href="https://issues.redhat.com/browse/DBZ-7175">DBZ-7175</a></p> </li> <li> <p>Upgrade to Infinispan 14.0.20 <a href="https://issues.redhat.com/browse/DBZ-7187">DBZ-7187</a></p> </li> <li> <p>Upgrade Outbox Extension to Quarkus 3.5.3 <a href="https://issues.redhat.com/browse/DBZ-7188">DBZ-7188</a></p> </li> <li> <p>Fix DebeziumMySqlConnectorResource not using the new MySQL adatper structure to support different MySQL flavors <a href="https://issues.redhat.com/browse/DBZ-7179">DBZ-7179</a></p> </li> <li> <p>Parsing MySQL indexes for JSON field fails, when casting is used with types double and float <a href="https://issues.redhat.com/browse/DBZ-7189">DBZ-7189</a></p> </li> <li> <p>Unchanged toasted array columns are substituted with unavailable.value.placeholder, even when REPLICA IDENTITY FULL is configured. <a href="https://issues.redhat.com/browse/DBZ-7193">DBZ-7193</a></p> </li> <li> <p>Enable ability to stream changes against Oracle 23c for LogMiner <a href="https://issues.redhat.com/browse/DBZ-7194">DBZ-7194</a></p> </li> <li> <p>Add modify range_partitions to modify_table_partition rule in parsing PL/SQL <a href="https://issues.redhat.com/browse/DBZ-7196">DBZ-7196</a></p> </li> <li> <p>MongoDB streaming pauses for Blocking Snapshot only when there is no event <a href="https://issues.redhat.com/browse/DBZ-7206">DBZ-7206</a></p> </li> <li> <p>Handle Drop Tablespace in PL/SQL <a href="https://issues.redhat.com/browse/DBZ-7208">DBZ-7208</a></p> </li> <li> <p>Upgrade logback to 1.2.12 <a href="https://issues.redhat.com/browse/DBZ-7209">DBZ-7209</a></p> </li> <li> <p>NPE on AbstractInfinispanLogMinerEventProcessor.logCacheStats <a href="https://issues.redhat.com/browse/DBZ-7211">DBZ-7211</a></p> </li> <li> <p>Oracle abandoned transaction implementation bug causes OoM <a href="https://issues.redhat.com/browse/DBZ-7236">DBZ-7236</a></p> </li> <li> <p>Add Grammar Oracle Truncate Cluster <a href="https://issues.redhat.com/browse/DBZ-7242">DBZ-7242</a></p> </li> <li> <p>Length value is not removed when changing a column&#8217;s type <a href="https://issues.redhat.com/browse/DBZ-7251">DBZ-7251</a></p> </li> <li> <p>MongoDB table/collection snapshot notification contain incorrect offsets <a href="https://issues.redhat.com/browse/DBZ-7252">DBZ-7252</a></p> </li> <li> <p>Broken support for multi-namespace watching <a href="https://issues.redhat.com/browse/DBZ-7254">DBZ-7254</a></p> </li> <li> <p>Add tracing logs to track execution time for Debezium JDBC connector <a href="https://issues.redhat.com/browse/DBZ-7217">DBZ-7217</a></p> </li> <li> <p>Validate &amp; clarify multiple archive log destination requirements for Oracle <a href="https://issues.redhat.com/browse/DBZ-7218">DBZ-7218</a></p> </li> <li> <p>Upgrade logback to 1.2.13 <a href="https://issues.redhat.com/browse/DBZ-7232">DBZ-7232</a></p> </li> <li> <p>Add configuration option to CloudEventsConverter to customize schema type name <a href="https://issues.redhat.com/browse/DBZ-7235">DBZ-7235</a></p> </li> <li> <p>Support persistent history for snapshot requests for the kafka signal topic. <a href="https://issues.redhat.com/browse/DBZ-7164">DBZ-7164</a></p> </li> <li> <p>Change metrics endpoint of Connect REST Extensions to use the MBeanServerv directly instead of HTTP calls to the Jolokia endpoint <a href="https://issues.redhat.com/browse/DBZ-7177">DBZ-7177</a></p> </li> <li> <p>Metrics endpoint must handle connectors with multiple tasks (SQL Server) <a href="https://issues.redhat.com/browse/DBZ-7178">DBZ-7178</a></p> </li> <li> <p>DDL GRANT statement couldn&#8217;t be parsed <a href="https://issues.redhat.com/browse/DBZ-7213">DBZ-7213</a></p> </li> <li> <p>Debezium Oracle plugin 2.5.0 Beta does not support Oracle 11g <a href="https://issues.redhat.com/browse/DBZ-7257">DBZ-7257</a></p> </li> <li> <p>Error during snapshot with multiple snapshot threads will not properly abort snasphostting <a href="https://issues.redhat.com/browse/DBZ-7264">DBZ-7264</a></p> </li> <li> <p>MySQL RDS UPDATE queries not ignored <a href="https://issues.redhat.com/browse/DBZ-7271">DBZ-7271</a></p> </li> <li> <p>Leaking JDBC connections <a href="https://issues.redhat.com/browse/DBZ-7275">DBZ-7275</a></p> </li> <li> <p>IncrementalSnapshotCaseSensitiveIT#insertDeleteWatermarkingStrategy fails <a href="https://issues.redhat.com/browse/DBZ-7276">DBZ-7276</a></p> </li> <li> <p>Debezium MySQL could not parse certain grant privileges. <a href="https://issues.redhat.com/browse/DBZ-7277">DBZ-7277</a></p> </li> <li> <p>Add PL/SQL Parser for Create Table Memoptimize <a href="https://issues.redhat.com/browse/DBZ-7279">DBZ-7279</a></p> </li> <li> <p>Support for Creating EDITIONABLE or NONEDITIONABLE Packages <a href="https://issues.redhat.com/browse/DBZ-7283">DBZ-7283</a></p> </li> <li> <p>Add PL/SQL Parser for Alter Table Memoptimize <a href="https://issues.redhat.com/browse/DBZ-7268">DBZ-7268</a></p> </li> <li> <p>Move metrics endpoint from UI backend to the Debezium Connect REST extension/s <a href="https://issues.redhat.com/browse/DBZ-6764">DBZ-6764</a></p> </li> <li> <p>website-builder image fails with newer bundler <a href="https://issues.redhat.com/browse/DBZ-7269">DBZ-7269</a></p> </li> <li> <p>Vitess connector build fails due to invalid GPG key <a href="https://issues.redhat.com/browse/DBZ-7280">DBZ-7280</a></p> </li> </ul> </div> <div class="paragraph"> <p>A big thank you to all the contributors from the community who worked on Debezium 2.5: <a href="https://github.com/ahmedrachid">Ahmed Rachid Hazourli</a>, <a href="https://github.com/AnatolyPopov">Anatolii Popov</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/roldanbob">Bob Roldan</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/gunnarmorling">Gunnar Morling</a>, <a href="https://github.com/harveyyue">Harvey Yue</a>, <a href="https://github.com/ilyasahsan123">Ilyas Ahsan</a>, <a href="https://github.com/nicholas-fwang">Inki Hwang</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/Jiabao-Sun">Jiabao Sun</a>, <a href="https://github.com/sherpa003">Jiri Kulhanek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/JordanP">Jordan Pittier</a>, <a href="https://github.com/koszta5">Kosta Kostelnik</a>, <a href="https://github.com/nrkljo">Lars M. Johansson</a>, <a href="https://github.com/methodmissing">Lourens Naudé</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/yinzara">Matt Vance</a>, <a href="https://github.com/nilshartmann">Nils Hartmann</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/RafaelJCamara">Rafael Câmara</a>, <a href="https://github.com/rk3rn3r">René Kerner</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, <a href="https://github.com/slknijnenburg">Sebastiaan Knijnenburg</a>, <a href="https://github.com/PlugaruT">Tudor Plugaru</a>, <a href="https://github.com/koneru9999">V K</a>, <a href="https://github.com/ramanenka">Vadzim Ramanenka</a>, <a href="https://github.com/vsantona">Vincenzo Santonastaso</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, <a href="https://github.com/GOODBOY008">Zhongqiang Gong</a>, <a href="https://github.com/baabgai">baabgai</a>, <a href="https://github.com/rgibaiev">ruslan</a>, and <a href="https://github.com/caicancai">蔡灿材</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="outlook_whats_next">Outlook &amp; What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.5 was a feature packed milestone for the team, so after a few drinks and celebration, the plan is to turn our focus toward what is ahead for the 2.6 release. We already had our second Debezium Community meeting, discussed our <a href="/docs/roadmap">road map</a>, and we&#8217;re more than eager to get started.</p> </div> <div class="paragraph"> <p>If you have any ideas or suggestions for what you&#8217;d like to see included in Debezium 2.6, please provide that feedback on our <a href="https://groups.google.com/forum/#!forum/debezium">mailing list</a> or in our <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a>.</p> </div> <div class="paragraph"> <p>Merry Christmas and Happy New Year 2024!</p> </div> <div class="paragraph"> <p>Onwards and Upwards!</p> </div> </div> </div>]]></content><author><name>Fiore Mario Vitale</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="jdbc"/><summary type="html"><![CDATA[As the winter chill settles in, and we transition to the festive holiday season, our dedicated team has been busy preparing a special gift for the Debezium community. I am excited to share the immediate release of Debezium 2.5.0.Final, just in time for the holiday celebrations. Get ready to unwrap this latest minor version, filled with holiday cheer and exciting new features! Let&#8217;s take a moment and review all the new features, changes, and improvements that are included in Debezium 2.5, which includes 181 issues resolved by 37 unique contributors.]]></summary></entry><entry><title type="html">Streamlined Performance: Debezium JDBC connector batch support</title><link href="https://debezium.io/blog/2023/12/20/JDBC-sink-connector-batch-support/" rel="alternate" type="text/html" title="Streamlined Performance: Debezium JDBC connector batch support"/><published>2023-12-20T10:11:11+00:00</published><updated>2023-12-20T10:11:11+00:00</updated><id>https://debezium.io/blog/2023/12/20/JDBC-sink-connector-batch-support</id><content type="html" xml:base="https://debezium.io/blog/2023/12/20/JDBC-sink-connector-batch-support/"><![CDATA[<div class="paragraph"> <p>In the realm of data streaming optimization, even subtle improvements can make a significant impact. This article focuses on one such refinement: the introduction of batch support in Debezium&#8217;s JDBC connector. We&#8217;ll guide you through the process of enabling batches and share the practical outcomes of our performance testing.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="configuring_batches">Configuring batches</h2> <div class="sectionbody"> <div class="paragraph"> <p>Since our previous releases were primarily focused on core functionalities, our latest release is dedicated to addressing the main pain point associated with the connector: performance.</p> </div> <div class="paragraph"> <p>The goal was to improve throughput in terms of events processed per second (EPS). To achieve this, we revisited the connector to enable the processing of batches of events.</p> </div> <div class="paragraph"> <p>You can now fine-tune the size of the batch using a new property: <code>batch.size</code>.</p> </div> <div class="paragraph"> <p>The <code>batch.size</code> property defines the number of records to be <strong>attempted</strong> for batching into the destination table. However, it&#8217;s crucial to note that the actual size of processed records is contingent upon the <code>consumer.max.poll.records</code> property of the Kafka Connect worker.</p> </div> <div class="paragraph"> <p>It&#8217;s important to be aware that if you set <code>consumer.max.poll.records</code> in the Connect worker properties to a value lower than <code>batch.size</code>, batch processing will be constrained by <code>consumer.max.poll.records</code>, and the intended <code>batch.size</code> may not be achieved.</p> </div> <div class="sect2"> <h3 id="configure_consumer_max_poll_records">Configure consumer max poll records</h3> <div class="paragraph"> <p>If you prefer not to configure the <code>consumer.max.poll.records</code> property globally on the Connect worker, you have the option to set the underlying consumer&#8217;s <code>max.poll.records</code> for a specific connector using <code>consumer.override.max.poll.records</code> in the connector configuration.</p> </div> <div class="paragraph"> <p>To enable per-connector configuration properties and override the default worker properties, add the following parameter to the worker properties file: <code>connector.client.config.override.policy</code> <a href="https://docs.confluent.io/platform/current/connect/references/allconfigs.html#override-the-worker-configuration">(see override-the-worker-configuration)</a>.</p> </div> <div class="paragraph"> <p>This property defines which configurations can be overridden by the connector. The default implementation is <code>All</code>, but other possible policies include <code>None</code> and <code>Principal</code>.</p> </div> <div class="paragraph"> <p>When <code>connector.client.config.override.policy=All</code>, each connector belonging to the worker is permitted to override the worker configuration. You can now utilize the following override prefixes for sink connector configurations: <code>consumer.override.&lt;sink-configuration-property&gt;</code>.</p> </div> <div class="paragraph"> <p>It&#8217;s worth noting that even if you set <code>max.poll.records</code> (with the default value of 500), you may receive fewer records. This is due to other properties that can impact record fetching from the topic/partitions.</p> </div> <div class="paragraph"> <p><strong>Name</strong>: <a href="https://kafka.apache.org/documentation/#consumerconfigs_fetch.max.bytes">fetch.max.bytes</a><br> <strong>Default</strong>: 52428800 (52MB)<br></p> </div> <div class="paragraph"> <p><strong>Name</strong>: <a href="https://kafka.apache.org/documentation/#consumerconfigs_max.partition.fetch.bytes">max.partition.fetch.bytes</a><br> <strong>Default</strong>: 1048576 (1MB)<br></p> </div> <div class="paragraph"> <p><strong>Name</strong>: <a href="https://kafka.apache.org/documentation/#brokerconfigs_message.max.bytes">message.max.bytes</a><br> <strong>Default</strong>: 1048588 (1MB)<br></p> </div> <div class="paragraph"> <p><strong>Name</strong>: <a href="https://kafka.apache.org/documentation/#topicconfigs_max.message.bytes">max.message.bytes</a><br> <strong>Default</strong>: 1048588 (1MB)<br></p> </div> <div class="paragraph"> <p>So adjust these based on your expected payload size to reach the desired number of poll records.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="results_from_performance_testing">Results from performance testing</h2> <div class="sectionbody"> <div class="paragraph"> <p>The objective of the performance tests was to provide a sense of how batch support improved the EPS. Therefore, these numbers do not reflect any real scenario but rather showcase relative improvements compared to the old JDBC version.</p> </div> <div class="sect2"> <h3 id="configuration_used_for_the_tests">Configuration used for the tests</h3> <div class="paragraph"> <p>All tests executed on a <strong>ThinkPad T14s Gen 2i</strong></p> </div> <div class="paragraph"> <p><strong>CPU</strong>: Intel&#174; Core&#8482; i7-1185G7 @ 3.00GHz (8 cores)<br> <strong>RAM</strong>: 32GB<br> <strong>Disk</strong>: 512GB NVMe<br></p> </div> <div class="paragraph"> <p>All required components (Kafka, Connect, Zookeeper, etc.) inside docker containers.</p> </div> <div class="paragraph"> <p>The table used for the test has the following structure:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="sql"><span class="class">CREATE</span> <span class="type">TABLE</span> <span class="string"><span class="delimiter">`</span><span class="content">aviation</span><span class="delimiter">`</span></span> (
  <span class="string"><span class="delimiter">`</span><span class="content">id</span><span class="delimiter">`</span></span> <span class="predefined-type">int</span> <span class="keyword">NOT</span> <span class="predefined-constant">NULL</span>,
  <span class="string"><span class="delimiter">`</span><span class="content">aircraft</span><span class="delimiter">`</span></span> <span class="predefined-type">longtext</span>,
  <span class="string"><span class="delimiter">`</span><span class="content">airline</span><span class="delimiter">`</span></span> <span class="predefined-type">longtext</span>,
  <span class="string"><span class="delimiter">`</span><span class="content">passengers</span><span class="delimiter">`</span></span> <span class="predefined-type">int</span> <span class="directive">DEFAULT</span> <span class="predefined-constant">NULL</span>,
  <span class="string"><span class="delimiter">`</span><span class="content">airport</span><span class="delimiter">`</span></span> <span class="predefined-type">longtext</span>,
  <span class="string"><span class="delimiter">`</span><span class="content">flight</span><span class="delimiter">`</span></span> <span class="predefined-type">longtext</span>,
  <span class="string"><span class="delimiter">`</span><span class="content">metar</span><span class="delimiter">`</span></span> <span class="predefined-type">longtext</span>,
  <span class="string"><span class="delimiter">`</span><span class="content">flight_distance</span><span class="delimiter">`</span></span> <span class="predefined-type">double</span> <span class="directive">DEFAULT</span> <span class="predefined-constant">NULL</span>
)</code></pre> </div> </div> </div> <div class="sect2"> <h3 id="test_plan">Test plan</h3> <div class="paragraph"> <p>We planned to execute these tests:</p> </div> <div class="ulist"> <ul> <li> <p>100K events from single table</p> <div class="ulist"> <ul> <li> <p>MySQL batch vs without batch</p> </li> </ul> </div> </li> <li> <p>100K events from three different table</p> <div class="ulist"> <ul> <li> <p>MySQL batch vs without batch</p> </li> </ul> </div> </li> <li> <p>1M events from single table</p> <div class="ulist"> <ul> <li> <p>MySQL batch with batch size: 500, 1000, 5000, 10000 vs without batch</p> </li> <li> <p>MySQL batch with batch size: 500, 1000, 5000, 10000 with JSONConverter</p> </li> <li> <p>MySQL batch with batch size: 500, 1000, 5000, 10000 with Avro</p> </li> <li> <p>MySQL batch with batch size: 500, 1000, 5000, 10000 with Avro and no index on destination table</p> </li> </ul> </div> </li> </ul> </div> <div class="imageblock centered-image"> <div class="content"> <img src="/assets/images/2023-12-06-JDBC-sink-connector-batch-support/100k-batch-no-batch.png" alt="100k batch no batch"> </div> <div class="title">Figure 1. &#160;</div> </div> <div class="paragraph"> <p><em>Figure 1</em> illustrates the total execution time required to process 100,000 events from a single table, comparing MySQL connector with and without the batch support.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>Despite the default values being set to <code>500</code> for both <code>batch.size</code> and <code>consumer.max.poll.records</code>, the observed actual size was reduced to <code>337</code> records due to payload size considerations.</p> </div> </td> </tr> </table> </div> <div class="paragraph"> <p>We can observe, as expected, that the Debezium JDBC connector with batch support is faster.</p> </div> <div class="imageblock centered-image"> <div class="content"> <img src="/assets/images/2023-12-06-JDBC-sink-connector-batch-support/100k-3-tables.png" alt="100k 3 tables"> </div> <div class="title">Figure 2. &#160;</div> </div> <div class="paragraph"> <p>In <em>Figure 2</em>, we observe that splitting 100,000 events into three tables does not impact the results. The Debezium JDBC connector with batch support remains faster compared to the non-batch version.</p> </div> <div class="imageblock centered-image"> <div class="content"> <img src="/assets/images/2023-12-06-JDBC-sink-connector-batch-support/1M-batch-no-batch.png" alt="1M batch no batch"> </div> <div class="title">Figure 3. &#160;</div> </div> <div class="paragraph"> <p>In <em>Figure 3</em>, it is evident that the performance gain becomes more pronounced with 1,000,000 events. The Debezium JDBC connector with batch support took approximately 7 minutes to insert all events, with an average throughput of 2300 eps, while the process without batch support took 570 minutes (9.5 hours). Therefore, the Debezium JDBC connector with batch support is 79 times faster than the version without batch support.</p> </div> <div class="imageblock centered-image"> <div class="content"> <img src="/assets/images/2023-12-06-JDBC-sink-connector-batch-support/1M-different-batch-size-json.png" alt="1M different batch size json"> </div> <div class="title">Figure 4. &#160;</div> </div> <div class="paragraph"> <p>In <em>Figure 4</em>, we observe the behavior of the Debezium JDBC connector using the <code>org.apache.kafka.connect.json.JsonConverter</code> converter and writing to MySQL with different <code>batch.size</code> settings. While the initial differences are noticeable, it becomes apparent that the throughput continues to slow down. On average, all the <code>batch.size</code> configurations take about 7 minutes to process all events.</p> </div> <div class="paragraph"> <p>This raised a concern for us. After conducting a thorough analysis (profiling), we identified another issue: event deserialization. With high probability, this was the cause of the non-scalability of <code>batch.size</code> settings.</p> </div> <div class="paragraph"> <p>Although serialization improved scalability, we still lack an answer regarding the slowdown of EPS during the test run. One hypothesis could involve a certain type of buffer somewhere.</p> </div> <div class="imageblock centered-image"> <div class="content"> <img src="/assets/images/2023-12-06-JDBC-sink-connector-batch-support/1M-different-batch-size-avro.png" alt="1M different batch size avro"> </div> <div class="title">Figure 5. &#160;</div> </div> <div class="paragraph"> <p>We then conducted experiments with Avro, and as depicted in <em>Figure 5</em>, the results show a significant improvement. As expected, processing 1,000,000 events with <code>batch.size=500</code> is slower than with <code>batch.size=10000</code>. Notably, in our test configuration, the optimal value for <code>batch.size</code> is 1000, resulting in the fastest processing time.</p> </div> <div class="paragraph"> <p>Although the results are better compared to JSON, there is still some performance degradation.</p> </div> <div class="paragraph"> <p>To identify potential bottlenecks in the code, we added some metrics and found that the majority of time was spent executing batch statements on the database.</p> </div> <div class="paragraph"> <p>Further investigation revealed that our table had an index defined on the primary key, which was slowing down the inserts.</p> </div> <div class="imageblock centered-image"> <div class="content"> <img src="/assets/images/2023-12-06-JDBC-sink-connector-batch-support/1M-different-batch-size-avro-no-index.png" alt="1M different batch size avro no index"> </div> <div class="title">Figure 6. &#160;</div> </div> <div class="paragraph"> <p>in <em>Figure 6</em> you can see the improved performance with Avro and without primary key index. It is also evident the performance boost with a high value of <code>batch.size</code>.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="conclusion">Conclusion</h2> <div class="sectionbody"> <div class="paragraph"> <p>We&#8217;ve explored how adjusting the <code>batch.size</code> can enhance the performance of the Debezium JDBC connector and discussed the proper configuration for maximizing its benefits. Equally crucial is adhering to performance tips and general guidelines for efficient inserts tailored to your specific database.</p> </div> <div class="paragraph"> <p>Here are a few examples:</p> </div> <div class="ulist"> <ul> <li> <p><a href="https://dev.mysql.com/doc/refman/8.0/en/insert-optimization.html">MySQL - Optimizing INSERT Statements</a></p> </li> <li> <p><a href="https://dev.mysql.com/doc/connectors/en/connector-j-connp-props-performance-extensions.html">MySQL - Performance extensions</a></p> </li> <li> <p><a href="https://www.postgresql.org/docs/current/populate.html">PostgreSQL - Populating a Database</a></p> </li> </ul> </div> <div class="paragraph"> <p>While some settings may be specific to certain databases, several general principles apply across the majority of them.</p> </div> </div> </div>]]></content><author><name>Fiore Mario Vitale</name></author><category term="debezium"/><category term="features"/><category term="jdbc"/><category term="batch"/><category term="performance"/><summary type="html"><![CDATA[In the realm of data streaming optimization, even subtle improvements can make a significant impact. This article focuses on one such refinement: the introduction of batch support in Debezium&#8217;s JDBC connector. We&#8217;ll guide you through the process of enabling batches and share the practical outcomes of our performance testing.]]></summary></entry><entry><title type="html">Debezium 2.5.0.CR1 Released</title><link href="https://debezium.io/blog/2023/12/14/debezium-2-5-cr1-released/" rel="alternate" type="text/html" title="Debezium 2.5.0.CR1 Released"/><published>2023-12-14T00:00:00+00:00</published><updated>2023-12-14T00:00:00+00:00</updated><id>https://debezium.io/blog/2023/12/14/debezium-2-5-cr1-released</id><content type="html" xml:base="https://debezium.io/blog/2023/12/14/debezium-2-5-cr1-released/"><![CDATA[<div class="paragraph"> <p>As we are just one step away from the Debezium 2.5 final release, I am pleased to announce that Debezium <strong>2.5.0.CR1</strong> is now available. This release includes a number of improvements like AWS SQS sink for Debezium Server, INSERT/DELETE semantics for incremental snapshot watermarking, ReselectColumnsPostProcessor, uniform Oracle LOB behavior.</p> </div> <div class="paragraph"> <p>Additionally, this release includes a variety of bug fixes and several breaking changes.</p> </div> <div class="paragraph"> <p>Let&#8217;s take a closer look at all these changes and improvements included in Debezium 2.5.0.CR1; as always, you can find the complete list of changes for this release in the <a href="/releases/2.5/release-notes">release notes</a>. Please remember to take special note to any breaking changes that could affect your upgrade path.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking_changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>While we strive to avoid breaking changes, sometimes those changes are inevitable to evolve the right direction. This release includes several breaking changes.</p> </div> <div class="sect2"> <h3 id="schema_name_for_cloud_event_headers">Schema name for Cloud Event headers</h3> <div class="paragraph"> <p>The schema name prefix and letter casing for Cloud Event headers was not consistent with payload name. The schema name was aligned so both headers and payload share th same namespace and follow the same rules for letter casing (<a href="https://issues.redhat.com/browse/DBZ-7216">DBZ-7216</a>).</p> </div> </div> <div class="sect2"> <h3 id="mysql_bit_default_length">MySQL <code>BIT</code> default length</h3> <div class="paragraph"> <p>MySQL <code>BIT</code> datatype did not have an implicit length if any was not set. This is incorrect as the default length if none is provided is <code>1</code> (<a href="https://issues.redhat.com/browse/DBZ-7230">DBZ-7230</a>).</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="new_features_and_improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.5 also introduces more improvements and features, lets take a look at each individually.</p> </div> <div class="sect2"> <h3 id="re_select_columns">Re-select columns</h3> <div class="paragraph"> <p>In some cases, because of the way that certain source databases function, when a Debezium connector emits a change event, the event might exclude values for specific column types. For example, values for <code>TOAST</code> columns in PostgreSQL, <code>LOB</code> columns in Oracle, or <code>Extended String</code> columns in Oracle Exadata, might all be excluded.</p> </div> <div class="paragraph"> <p>Debezium 2.5 introduces the <code>ReselectColumnsPostProcessor</code> providing a way to re-select one or more columns from a database table and fetch the current state. You can configure the post processor to re-select the following column types:</p> </div> <div class="ulist"> <ul> <li> <p>null columns.</p> </li> <li> <p>columns that contain the <code>unavailable.value.placeholder</code> sentinel value.</p> </li> </ul> </div> <div class="paragraph"> <p>Configuring a PostProcessor is similar to configuring a CustomConverter or Transformation, except that it works on the mutable payload&#8217;s Struct rather than the SourceRecord.</p> </div> </div> <div class="sect2"> <h3 id="debezium_server_streamnamemapper_for_apache_kafka_sink">Debezium Server - StreamNameMapper for Apache Kafka sink</h3> <div class="paragraph"> <p>The Kafka sink behaviour can now be modified by a custom logic providing alternative implementations for specific functionalities. When the alternative implementations are not available then the default ones are used.</p> </div> <div class="paragraph"> <p>For more details, please see the <a href="https://debezium.io/documentation/reference/2.5/operations/debezium-server.html#_injection_points_9">Apache Kafka Injection points</a>.</p> </div> </div> <div class="sect2"> <h3 id="insertdelete_semantics_for_incremental_snapshot_watermarking">INSERT/DELETE semantics for incremental snapshot watermarking</h3> <div class="paragraph"> <p>The property <code>incremental.snapshot.watermarking.strategy</code> has been introduced to let users choose the watermarking strategy to use during an incremental snapshot.</p> </div> <div class="paragraph"> <p>The <code>insert_insert</code> (old behavior) approach lets Debezium creating two entries in the signaling data collection for each chunk during the snapshot to signal the opening of the snapshot window and another to mark its closure.</p> </div> <div class="paragraph"> <p>On the other hand, with the <code>insert_delete</code> option, a single entry is written in the signaling data collection for each chunk at the beginning of the window. After completion, this entry is removed, and no corresponding entry is added to signify the closure of the snapshot window. This method aids in more efficient management of the signaling data collection.</p> </div> <div class="paragraph"> <p>For more details, please see the <code>Connector properties</code> section of the connector of your interest.</p> </div> </div> <div class="sect2"> <h3 id="debezium_server_aws_sqs_sink">Debezium Server - AWS SQS sink</h3> <div class="paragraph"> <p>Amazon Simple Queue Service (Amazon SQS) is a distributed message queuing service. It supports programmatic sending of messages via web service applications as a way to communicate over the Internet. SQS is intended to provide a highly scalable hosted message queue that resolves issues arising from the common producer–consumer problem or connectivity between producer and consumer.</p> </div> <div class="paragraph"> <p>Debezium 2.5 offers the possibility to send events to Amazon SQS.</p> </div> </div> <div class="sect2"> <h3 id="oracle_lob_behavior">Oracle LOB behavior</h3> <div class="paragraph"> <p>Debezium 2.5 aligns LOB behavior in snapshot and streaming. When <code>lob.enabled</code> is set to <code>false</code>, the unavailable value placeholder will be explicitly included during snapshot to match the behavior of streaming.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_fixes">Other fixes</h2> <div class="sectionbody"> <div class="paragraph"> <p>In addition, there were quite a number of stability and bug fixes that made it into this release. These include the following:</p> </div> <div class="ulist"> <ul> <li> <p>Oracle abandoned transaction implementation bug causes OoM <a href="https://issues.redhat.com/browse/DBZ-7236">DBZ-7236</a></p> </li> <li> <p>Add Grammar Oracle Truncate Cluster <a href="https://issues.redhat.com/browse/DBZ-7242">DBZ-7242</a></p> </li> <li> <p>Length value is not removed when changing a column&#8217;s type <a href="https://issues.redhat.com/browse/DBZ-7251">DBZ-7251</a></p> </li> <li> <p>MongoDB table/collection snapshot notification contain incorrect offsets <a href="https://issues.redhat.com/browse/DBZ-7252">DBZ-7252</a></p> </li> <li> <p>Broken support for multi-namespace watching <a href="https://issues.redhat.com/browse/DBZ-7254">DBZ-7254</a></p> </li> <li> <p>Add tracing logs to track execution time for Debezium JDBC connector <a href="https://issues.redhat.com/browse/DBZ-7217">DBZ-7217</a></p> </li> <li> <p>Validate &amp; clarify multiple archive log destination requirements for Oracle <a href="https://issues.redhat.com/browse/DBZ-7218">DBZ-7218</a></p> </li> <li> <p>Upgrade logback to 1.2.13 <a href="https://issues.redhat.com/browse/DBZ-7232">DBZ-7232</a></p> </li> </ul> </div> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.5.0.CR1%20ORDER%20BY%20component%20ASC">16 issues</a> were fixed for this release. A big thank you to all the contributors from the community who worked on this release: <a href="https://github.com/roldanbob">Bob Roldan</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/gunnarmorling">Gunnar Morling</a>, <a href="https://github.com/harveyyue">Harvey Yue</a>, <a href="https://github.com/ilyasahsan123">Ilyas Ahsan</a>, <a href="https://github.com/indraraj">Indra Shukla</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/Jiabao-Sun">Jiabao Sun</a>, <a href="https://github.com/sherpa003">Jiri Kulhanek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/JordanP">Jordan Pittier</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/nilshartmann">Nils Hartmann</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, <a href="https://github.com/slknijnenburg">Sebastiaan Knijnenburg</a>, <a href="https://github.com/PlugaruT">Tudor Plugaru</a>, <a href="https://github.com/koneru9999">V K</a>, and <a href="https://github.com/GOODBOY008">Zhongqiang Gong</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="whats_next">What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>We have just over a week before the team takes a break for the holidays, and so we are preparing for Debezium 2.5 final release. We intend to release it the week before the holiday break.</p> </div> <div class="paragraph"> <p>The team has also finalized the roadmap for 2024, here&#8217;s a sneak peek at some highlights (and remember, this is just the tip of the iceberg!):</p> </div> <div class="ulist"> <ul> <li> <p>Asynchronous-based processing in Debezium Engine</p> </li> <li> <p>Official MariaDB connector</p> </li> <li> <p>User-friendly offset manipulation (i.e, start at a specific position in the transaction logs)</p> </li> <li> <p>Sink connector for MongoDB</p> </li> </ul> </div> <div class="paragraph"> <p>For more details, please check out our <a href="https://debezium.io/roadmap">road map</a> for all upcoming details around Debezium 2.6 and beyond.</p> </div> <div class="paragraph"> <p>As always, please be sure to get in touch with us on the <a href="https://groups.google.com/g/debezium">mailing list</a> or <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a> if you have questions or feedback. Until next time, stay warm out there!</p> </div> </div> </div>]]></content><author><name>Fiore Mario Vitale</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="informix"/><summary type="html"><![CDATA[As we are just one step away from the Debezium 2.5 final release, I am pleased to announce that Debezium 2.5.0.CR1 is now available. This release includes a number of improvements like AWS SQS sink for Debezium Server, INSERT/DELETE semantics for incremental snapshot watermarking, ReselectColumnsPostProcessor, uniform Oracle LOB behavior. Additionally, this release includes a variety of bug fixes and several breaking changes. Let&#8217;s take a closer look at all these changes and improvements included in Debezium 2.5.0.CR1; as always, you can find the complete list of changes for this release in the release notes. Please remember to take special note to any breaking changes that could affect your upgrade path.]]></summary></entry><entry><title type="html">Debezium 2.5.0.Beta1 Released</title><link href="https://debezium.io/blog/2023/12/04/debezium-2-5-beta1-released/" rel="alternate" type="text/html" title="Debezium 2.5.0.Beta1 Released"/><published>2023-12-04T00:00:00+00:00</published><updated>2023-12-04T00:00:00+00:00</updated><id>https://debezium.io/blog/2023/12/04/debezium-2-5-beta1-released</id><content type="html" xml:base="https://debezium.io/blog/2023/12/04/debezium-2-5-beta1-released/"><![CDATA[<div class="paragraph"> <p>As we begin to approach the final stretch for Debezium 2.5, I am pleased to announce that Debezium <strong>2.5.0.Beta1</strong> is now available. This release includes a number of improvements like support for MariaDB GTID, partitioning for Debezium Server EventHub&#8217;s sink, native RabbitMQ streams Debezium Server sink, streaming from PostgreSQL 16 stand-by databases, MySQL high-precision source timestamps, field inclusion/exclusion with JDBC sink, some additional notifications for initial snapshots, and service account support for Debezium Operator CRDs. Additionally, this release includes a variety of bug fixes and several breaking changes.</p> </div> <div class="paragraph"> <p>Let&#8217;s take a closer look at all these changes and improvements included in Debezium 2.5.0.Beta1; as always, you can find the complete list of changes for this release in the <a href="/releases/2.5/release-notes">release notes</a>. Please remember to take special note to any breaking changes that could affect your upgrade path.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking_changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>While we strive to avoid breaking changes, sometimes those changes are inevitable to evolve the right direction. This release includes several breaking changes.</p> </div> <div class="sect2"> <h3 id="mongodb_snapshots_in_sharded_deployments">MongoDB snapshots in sharded deployments</h3> <div class="paragraph"> <p>In earlier versions of Debezium, a user could use the MongoDB connector and perform a snapshot of a collection on a specific shard when using a MongoDB sharded deployment. Unfortunately, while we understand that users may have taken advantage of this behavior, it was unintended and not supported.</p> </div> <div class="paragraph"> <p>Debezium 2.5 removes this ability entirely, and it&#8217;s a step in the forward goal to deprecate and remove the replica-set streaming mode in MongoDB completely (<a href="https://issues.redhat.com/browse/DBZ-7139">DBZ-7139</a>).</p> </div> </div> <div class="sect2"> <h3 id="computepartition_smt_removed">ComputePartition SMT removed</h3> <div class="paragraph"> <p>The <code>ComputePartition</code> was an SMT that enabled users to compute the desired partition for which an event would be written in a Kafka topic. This single message transformation (SMT) was deprecated some time ago in favor of the new <code>PartitionRouting</code> single message transformation.</p> </div> <div class="paragraph"> <p>Debezium 2.5 removes the old, deprecated <code>ComputePartition</code>, and users who may still be relying on this SMT will need to migrate to the new <code>PartitionRouting</code> SMT if you have not already done so (<a href="https://issues.redhat.com/browse/DBZ-7141">DBZ-7141</a>).</p> </div> </div> <div class="sect2"> <h3 id="jdbc_sink_value_serialization_changes">JDBC sink value serialization changes</h3> <div class="paragraph"> <p>There was a corner case reported where the JDBC sink connector was mistakenly writing fields that had <code>null</code> values to the target database with the default value instead of a value of <code>NULL</code>. This has been fixed in Debezium 2.5 (<a href="https://issues.redhat.com/browse/DBZ-7191">DBZ-7191</a>).</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="new_features_and_improvements">New features and improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.5 also introduces more improvements and features, lets take a look at each individually.</p> </div> <div class="sect2"> <h3 id="additional_notifications_for_initial_snapshots">Additional notifications for initial snapshots</h3> <div class="paragraph"> <p>Debezium&#8217;s notification subsystem provides a simple way to integrate external processes and applications with certain Debezium tasks, such as taking a snapshot. In prior versions, the notifications for initial snapshots were quite basic and provided details such as when the snapshot started, when each table started and concluded, and finally when the snapshot ended.</p> </div> <div class="paragraph"> <p>A recent contribution that was part of <a href="https://issues.redhat.com/browse/DBZ-6878">DBZ-6878</a> extends on this base functionality to provide enhanced details about the snapshot. For example, the <code>IN_PROGRESS</code> notification will provide additional details about what tables are being captured and which table is currently in-progress, shown below:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
   <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">6d82a3ec-ba86-4b36-9168-7423b0dd5c1d</span><span class="delimiter">&quot;</span></span>,
   <span class="key"><span class="delimiter">&quot;</span><span class="content">aggregate_type</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">Initial Snapshot</span><span class="delimiter">&quot;</span></span>,
   <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">IN_PROGRESS</span><span class="delimiter">&quot;</span></span>,
   <span class="key"><span class="delimiter">&quot;</span><span class="content">additional_data</span><span class="delimiter">&quot;</span></span>:{
      <span class="key"><span class="delimiter">&quot;</span><span class="content">connector_name</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">my-connector</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">data_collections</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">table1, table2</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">current_collection_in_progress</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">table1</span><span class="delimiter">&quot;</span></span>
   },
   <span class="key"><span class="delimiter">&quot;</span><span class="content">timestamp</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">1695817046353</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>Additionally, another initial snapshot notification called <code>TABLE_SCAN_COMPLETED</code> also provides similar details, as shown below:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
   <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">6d82a3ec-ba86-4b36-9168-7423b0dd5c1d</span><span class="delimiter">&quot;</span></span>,
   <span class="key"><span class="delimiter">&quot;</span><span class="content">aggregate_type</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">Initial Snapshot</span><span class="delimiter">&quot;</span></span>,
   <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">TABLE_SCAN_COMPLETED</span><span class="delimiter">&quot;</span></span>,
   <span class="key"><span class="delimiter">&quot;</span><span class="content">additional_data</span><span class="delimiter">&quot;</span></span>:{
      <span class="key"><span class="delimiter">&quot;</span><span class="content">connector_name</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">my-connector</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">data_collection</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">table1, table2</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">scanned_collection</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">table1</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">total_rows_scanned</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">100</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">status</span><span class="delimiter">&quot;</span></span>:<span class="string"><span class="delimiter">&quot;</span><span class="content">SUCCEEDED</span><span class="delimiter">&quot;</span></span>
   },
   <span class="key"><span class="delimiter">&quot;</span><span class="content">timestamp</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">1695817046353</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> Several fields shown above such as <code>data_collection</code>, these are not currently available for MongoDB snapshots and are only available for SQL-based relational connectors. </td> </tr> </table> </div> <div class="paragraph"> <p>For more details, please see the <a href="https://debezium.io/documentation/reference/2.5/configuration/notification.html">Notification documentation</a>.</p> </div> </div> <div class="sect2"> <h3 id="mysql_high_precision_source_timestamps">MySQL high-precision source timestamps</h3> <div class="paragraph"> <p>Several new high-precision timestamp fields have been included in several MySQL replication events. For example, in MySQL 8.0.1, there are to microsecond-resolution timestamps added to GTID events that specify the timestamp when the transaction was committed on the immediate primary and when committed on the original primary.</p> </div> <div class="paragraph"> <p>Debezium 2.5 now takes advantage of these values and will use these for the <code>ts_ms</code> fields if they&#8217;re available, falling back to the second-based precision if they are not or if you&#8217;re using a version of MySQL prior to 8.0.1 (<a href="https://issues.redhat.com/browse/DBZ-7183">DBZ-7183</a>).</p> </div> </div> <div class="sect2"> <h3 id="mariadb_gtid_support">MariaDB GTID support</h3> <div class="paragraph"> <p>Both MySQL and MariaDB support what is called Global Transaction Identifiers or GTIDs. These are used in replication to uniquely identify transaction(s) uniquely across a cluster. The implementation details between MySQL and MariaDB differ significantly and in earlier versions of Debezium, we only supported GTID with MySQL.</p> </div> <div class="paragraph"> <p>With Debezium 2.5, we are taking another step forward by introducing GTID support for MariaDB as part of the MySQL connector offering. In order to take advantage of this behavior, you will need to use the MariaDB driver rather than the MySQL driver by using a JDBC connection prefixed as <code>jdbc:mariadb</code> rather than <code>jdbc:mysql</code>. By doing this, you can now take full advantage of working with MariaDB and GTID just like MySQL (<a href="https://issues.redhat.com/browse/DBZ-1482">DBZ-1482</a>).</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>It is planned to introduce a new, standalone connector in Debezium 2.6 for MariaDB. A lot of what we have done in 2.5 will carry over to this new connector in 2.6, so any feedback we can obtain earlier will only benefit that transition in early 2024!</p> </div> </td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="streaming_from_postgresql_16_stand_bys">Streaming from PostgreSQL 16 stand-bys</h3> <div class="paragraph"> <p>In PostgreSQL 16, you can now define replication slots on a stand-by instance. This enables a plethora of new options, including the ability to perform change data capture from a replica rather than your production system for load distribution, particularly in a very active database.</p> </div> <div class="paragraph"> <p>Debezium 2.5 now supports connecting to a stand-by PostgreSQL 16 server and streaming changes (<a href="https://issues.redhat.com/browse/DBZ-7181">DBZ-7181</a>).</p> </div> </div> <div class="sect2"> <h3 id="jdbc_sink_field_inclusionexclusion">JDBC sink field inclusion/exclusion</h3> <div class="paragraph"> <p>Debezium 2.5 introduces a new JBDC sink feature where users can now specify which fields from the event payload are to be included or excluded from the target database write operation. This feature works just like any other include/exclude combination in the Debezium framework where these two properties are mutually exclusive.</p> </div> <div class="paragraph"> <p>As an example, if we have a simple event payload with the following fields in topic <code>customers</code>:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="integer">12345</span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Acme</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">address</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">123 Main Street</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>If we want to avoid writing the <code>address</code> field to the target database and only write the <code>id</code> and <code>name</code> fields to the target table, we can use this new feature to accomplish this. This can be done adding either a <code>field.include.list</code> or <code>field.exclude.list</code> property.</p> </div> <div class="listingblock"> <div class="title">Example that prevents writing the address field to target</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">field.exclude.list</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">customers:address</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>The format of the include/exclude for fields is <code>[&lt;topic-name&gt;:]&lt;field-name&gt;</code>, where the topic-name is optionally and can be omitted if you want to avoid writing the <code>address</code> field for all events. Please see the JDBC sink connector configuration documentation for more details.</p> </div> </div> <div class="sect2"> <h3 id="debezium_server_eventhubs_partitioning">Debezium Server - EventHubs partitioning</h3> <div class="paragraph"> <p>In earlier versions of Debezium Server, users could specify a fixed partition-id to stream all changes to a single partition or provide a static partition-key that will be set on all batch operations, which ultimately lends itself to streaming all changes to the same target partition. There are situations where this may be helpful, but it more often leads to a performance concerns for downstream processing.</p> </div> <div class="paragraph"> <p>Debezium 2.5 adjusts this behavior in order to improve performance. By default, when neither a <code>partitionid</code> or <code>partitionkey</code> is defined, the EventHub sink will send events using a round-robin technique to all available partitions. Events can be forced into a single, fixed partition by specifying a <code>partitionid</code>. Alternatively, the <code>partitionkey</code> can be provided to supply a fixed partition key that will be used to route all events to a specific partition.</p> </div> <div class="paragraph"> <p>If additional partition routing requirements are necessary, you can now combine the <code>PartitionRouting</code> SMT accomplish such tasks. For more details, please see the <a href="https://debezium.io/documentation/reference/nightly/operations/debezium-server.html#_using_partitions_in_eventhubs">Event Hubs documentation</a>.</p> </div> </div> <div class="sect2"> <h3 id="debezium_server_rabbitmq_streams_sink">Debezium Server - RabbitMQ Streams sink</h3> <div class="paragraph"> <p>RabbitMQ introduced <a href="https://www.rabbitmq.com/streams.html">Streams</a> in version 3.9, which utilizes a fast and efficient protocol that can be combined with AMQP 0.9.1 to support large fan-outs, replay and time travel, and large data sets with extremely high throughput. Debezium 2.5 takes advantage of this new Streams implementation by introducing a new native Streams implementation (<a href="https://issues.redhat.com/browse/DBZ-6703">DBZ-6703</a>). In order to get started with this new implementation, configure the Debezium Server sink as follows:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="properties">debezium.sink.type=rabbitmqstream
debezium.sink.rabbitmqstream.connection.host=&lt;hostname of RabbitMQ&gt;
debezium.sink.rabbitmqstream.connection.port=&lt;port of RabbitMQ&gt;</code></pre> </div> </div> <div class="paragraph"> <p>Additionally, if you need to pass any other connection parameters to the RabbitMQ connection, you can do so by adding those to the configuration with the prefix <code>debezium.sink.rabbitmqstream.connection.</code> to pass through any config properties.</p> </div> <div class="paragraph"> <p>Please see the <a href="https://debezium.io/documentation/reference/nightly/operations/debezium-server.html#_rabbitmq_native_stream">Debezium Server RabbitMQ documentation</a> for more details.</p> </div> </div> <div class="sect2"> <h3 id="debezium_operator_service_account_for_crds">Debezium Operator - Service Account for CRDs</h3> <div class="paragraph"> <p>In previous versions of Debezium, it was not possible to use a service account named differently than the predefined one. This made the process a tad bit cumbersome for users because while you could grant roles and authorization to this predefined account separately, it meant you needed to use this predefined service account rather than one that you may already wish to use.</p> </div> <div class="paragraph"> <p>Debezium 2.5 simplifies this process, allowing you to now use your own, custom service account (<a href="https://issues.redhat.com/browse/DBZ-7111">DBZ-7111</a>).</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_fixes">Other fixes</h2> <div class="sectionbody"> <div class="paragraph"> <p>In addition, there were quite a number of stability and bug fixes that made it into this release. These include the following:</p> </div> <div class="ulist"> <ul> <li> <p>Generate sundrio fluent builders for operator model <a href="https://issues.redhat.com/browse/DBZ-6550">DBZ-6550</a></p> </li> <li> <p>Convert operator source into multi module project <a href="https://issues.redhat.com/browse/DBZ-6551">DBZ-6551</a></p> </li> <li> <p>Implement "validate filters" endpoint in connector-specific Connect REST extensions <a href="https://issues.redhat.com/browse/DBZ-6762">DBZ-6762</a></p> </li> <li> <p>Test Avro adjustment for MongoDb connector and ExtractNewDocumentState SMT <a href="https://issues.redhat.com/browse/DBZ-6809">DBZ-6809</a></p> </li> <li> <p>Implement IT tests against Cloud Spanner emulator in main repo. <a href="https://issues.redhat.com/browse/DBZ-6906">DBZ-6906</a></p> </li> <li> <p>The DefaultDeleteHandlingStrategy couldn&#8217;t add the rewrite "__deleted" field to a non-struct value <a href="https://issues.redhat.com/browse/DBZ-7066">DBZ-7066</a></p> </li> <li> <p>Implement strategy pattern for MariaDB and MySQL differences <a href="https://issues.redhat.com/browse/DBZ-7083">DBZ-7083</a></p> </li> <li> <p>Debezium server has no default for offset.flush.interval.ms <a href="https://issues.redhat.com/browse/DBZ-7099">DBZ-7099</a></p> </li> <li> <p>Failed to authenticate to the MySQL database after snapshot <a href="https://issues.redhat.com/browse/DBZ-7132">DBZ-7132</a></p> </li> <li> <p>Run MySQL CI builds in parallel <a href="https://issues.redhat.com/browse/DBZ-7135">DBZ-7135</a></p> </li> <li> <p>Failure reading CURRENT_TIMESTAMP on Informix 12.10 <a href="https://issues.redhat.com/browse/DBZ-7137">DBZ-7137</a></p> </li> <li> <p>Debezium-ddl-parser crashes on parsing MySQL DDL statement (specific UNION) <a href="https://issues.redhat.com/browse/DBZ-7140">DBZ-7140</a></p> </li> <li> <p>outbox.EventRouter SMT throws NullPointerException when there is a whitespace in fields.additional.placement value <a href="https://issues.redhat.com/browse/DBZ-7142">DBZ-7142</a></p> </li> <li> <p>Debezium-ddl-parser crashes on parsing MySQL DDL statement (specific UPDATE) <a href="https://issues.redhat.com/browse/DBZ-7152">DBZ-7152</a></p> </li> <li> <p>Add matrix strategy to workflows <a href="https://issues.redhat.com/browse/DBZ-7154">DBZ-7154</a></p> </li> <li> <p>Add Unit Tests for ServiceAccountDependent Class in Debezium Operator Repository <a href="https://issues.redhat.com/browse/DBZ-7155">DBZ-7155</a></p> </li> <li> <p>JsonSerialisation is unable to process changes from sharded collections with composite sharding key <a href="https://issues.redhat.com/browse/DBZ-7157">DBZ-7157</a></p> </li> <li> <p>Log sequence check should treat each redo thread independently <a href="https://issues.redhat.com/browse/DBZ-7158">DBZ-7158</a></p> </li> <li> <p>Fail fast during deserialization if a value is not a CloudEvent <a href="https://issues.redhat.com/browse/DBZ-7159">DBZ-7159</a></p> </li> <li> <p>Correctly calculate Max LSN <a href="https://issues.redhat.com/browse/DBZ-7175">DBZ-7175</a></p> </li> <li> <p>Upgrade to Infinispan 14.0.20 <a href="https://issues.redhat.com/browse/DBZ-7187">DBZ-7187</a></p> </li> <li> <p>Upgrade Outbox Extension to Quarkus 3.5.3 <a href="https://issues.redhat.com/browse/DBZ-7188">DBZ-7188</a></p> </li> <li> <p>Fix DebeziumMySqlConnectorResource not using the new MySQL adatper structure to support different MySQL flavors <a href="https://issues.redhat.com/browse/DBZ-7179">DBZ-7179</a></p> </li> <li> <p>Parsing MySQL indexes for JSON field fails, when casting is used with types double and float <a href="https://issues.redhat.com/browse/DBZ-7189">DBZ-7189</a></p> </li> <li> <p>Unchanged toasted array columns are substituted with unavailable.value.placeholder, even when REPLICA IDENTITY FULL is configured. <a href="https://issues.redhat.com/browse/DBZ-7193">DBZ-7193</a></p> </li> <li> <p>Enable ability to stream changes against Oracle 23c for LogMiner <a href="https://issues.redhat.com/browse/DBZ-7194">DBZ-7194</a></p> </li> <li> <p>Add modify range_partitions to modify_table_partition rule in parsing PL/SQL <a href="https://issues.redhat.com/browse/DBZ-7196">DBZ-7196</a></p> </li> <li> <p>MongoDB streaming pauses for Blocking Snapshot only when there is no event <a href="https://issues.redhat.com/browse/DBZ-7206">DBZ-7206</a></p> </li> <li> <p>Handle Drop Tablespace in PL/SQL <a href="https://issues.redhat.com/browse/DBZ-7208">DBZ-7208</a></p> </li> <li> <p>Upgrade logback to 1.2.12 <a href="https://issues.redhat.com/browse/DBZ-7209">DBZ-7209</a></p> </li> <li> <p>NPE on AbstractInfinispanLogMinerEventProcessor.logCacheStats <a href="https://issues.redhat.com/browse/DBZ-7211">DBZ-7211</a></p> </li> </ul> </div> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.5.0.Beta1%20ORDER%20BY%20component%20ASC">54 issues</a> were fixed for this release. A big thank you to all the contributors from the community who worked on this release: Pavithrananda Prabhu, <a href="https://github.com/vsantona">Vincenzo Santonastaso</a>, <a href="https://github.com/ahmedrachid">Ahmed Rachid Hazourli</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/gunnarmorling">Gunnar Morling</a>, <a href="https://github.com/harveyyue">Harvey Yue</a>, <a href="https://github.com/ilyasahsan123">Ilyas Ahsan</a>, <a href="https://github.com/nicholas-fwang">Inki Hwang</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/sherpa003">Jiri Kulhanek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/koszta5">Kosta Kostelnik</a>, <a href="https://github.com/nrkljo">Lars M. Johansson</a>, <a href="https://github.com/methodmissing">Lourens Naudé</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/yinzara">Matt Vance</a>, <a href="https://github.com/rk3rn3r">René Kerner</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, <a href="https://github.com/slknijnenburg">Sebastiaan Knijnenburg</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, <a href="https://github.com/baabgai">baabgai</a>, and <a href="https://github.com/rgibaiev">ruslan</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="whats_next">What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>We have about three weeks before the team takes a break for the holidays, and so this will be our one and only beta release for Debezium 2.5. We intend to release our release candidate in the middle of next week and with the final due out the week before the holiday break.</p> </div> <div class="paragraph"> <p>The team is also working on a maintenance release of Debezium 2.4, due out later this week. This update to Debezium 2.4 will bring a host of bug fixes and stability improvements already in Debezium 2.5 to the 2.4 release stream.</p> </div> <div class="paragraph"> <p>The team is also finalizing our roadmap for 2024. I will have details later in the week posted on our website as well as a complete overview of Debezium 2.5 and our 2024 roadmap in detail as part of our Debezium Community Event, Tuesday December 12th at 10am ET. All are welcomed to attend on <a href="https://meet.google.com/uab-pwwx-ptg">Google Meet</a>.</p> </div> <div class="paragraph"> <p>As always, please be sure to get in touch with us on the <a href="https://groups.google.com/g/debezium">mailing list</a> or <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a> if you have questions or feedback. Until next time, stay warm out there!</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="informix"/><summary type="html"><![CDATA[As we begin to approach the final stretch for Debezium 2.5, I am pleased to announce that Debezium 2.5.0.Beta1 is now available. This release includes a number of improvements like support for MariaDB GTID, partitioning for Debezium Server EventHub&#8217;s sink, native RabbitMQ streams Debezium Server sink, streaming from PostgreSQL 16 stand-by databases, MySQL high-precision source timestamps, field inclusion/exclusion with JDBC sink, some additional notifications for initial snapshots, and service account support for Debezium Operator CRDs. Additionally, this release includes a variety of bug fixes and several breaking changes. Let&#8217;s take a closer look at all these changes and improvements included in Debezium 2.5.0.Beta1; as always, you can find the complete list of changes for this release in the release notes. Please remember to take special note to any breaking changes that could affect your upgrade path.]]></summary></entry><entry><title type="html">Debezium 2.4.1.Final Released</title><link href="https://debezium.io/blog/2023/11/16/debezium-2-4-1-final-released/" rel="alternate" type="text/html" title="Debezium 2.4.1.Final Released"/><published>2023-11-16T00:00:00+00:00</published><updated>2023-11-16T00:00:00+00:00</updated><id>https://debezium.io/blog/2023/11/16/debezium-2-4-1-final-released</id><content type="html" xml:base="https://debezium.io/blog/2023/11/16/debezium-2-4-1-final-released/"><![CDATA[<div class="paragraph"> <p>As the year starts to come to a close, I am happy to announce the first maintenance release for the Debezium 2.4 release series, Debezium <strong>2.4.1.Final</strong>.</p> </div> <div class="paragraph"> <p>While our maintenance releases focus primarily on bug fixes and stability improvements, there are a few new features we back ported from our most recent Debezium 2.5 development series. All these new features focus on the Debezium Operator for Kubernetes, so lets take a quick deep dive into those details. As always, you can find the complete list of changes for this release in the <a href="/releases/2.4/release-notes">release notes</a>.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="debezium_operator_specify_image_pull_secrets">Debezium Operator - Specify image pull secrets</h2> <div class="sectionbody"> <div class="paragraph"> <p>There may be situations where the Debezium Server image may not contain all the necessary components for your chosen deployment, such as proprietary drivers that aren&#8217;t included the image. In such cases, it&#8217;s common practice for users to construct their own image from the base image to include such files. It&#8217;s then common to place that newly created image onto an image container registry where you may require credentials to fetch that image for your deployment. Debezium 2.4.1.Final introduces the ability to specify those credentials directly as a part of your CRD. (<a href="https://issues.redhat.com/browse/DBZ-6962">DBZ-6962</a>)</p> </div> <div class="listingblock"> <div class="title">An example CRD that now includes the new <code>imagePullSecrets</code> configuration:</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="yaml"><span class="key">runtime</span>:
  <span class="key">templates</span>:
    <span class="key">pod</span>:
      <span class="key">imagePullSecrets</span>:
      - <span class="string"><span class="content">name: debezium-server-secret</span></span></code></pre> </div> </div> </div> </div> <div class="sect1"> <h2 id="debezium_operator_specify_container_resources">Debezium Operator - Specify container resources</h2> <div class="sectionbody"> <div class="paragraph"> <p>With Debezium Server on Kubernetes, you may want to limit the resources that your pod consumes, particularly if you are streaming large volumes of data regularly. Debezium 2.4.1.Final introduces the ability to specify these constraints as part of the Pod template as well. (<a href="https://issues.redhat.com/browse/DBZ-7052">DBZ-7052</a>)</p> </div> <div class="listingblock"> <div class="title">An example CRD specifying Pod resource constraints</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="yaml"><span class="key">runtime</span>:
  <span class="key">templates</span>:
    <span class="key">container</span>:
      <span class="key">resources</span>:
        <span class="key">limits</span>:
          <span class="key">memory</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">64Mi</span><span class="delimiter">&quot;</span></span>
          <span class="key">cpu</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">250m</span><span class="delimiter">&quot;</span></span>
        <span class="key">requests</span>:
          <span class="key">memory</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">128Mi</span><span class="delimiter">&quot;</span></span>
          <span class="key">cpu</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">500m</span><span class="delimiter">&quot;</span></span></code></pre> </div> </div> <div class="paragraph"> <p>Please see the <a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/">Kubernetes documentation</a> for more details on the supported properties.</p> </div> </div> </div> <div class="sect1"> <h2 id="debezium_operator_metrics_endpoint_improvements">Debezium Operator metrics endpoint improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.4.1.Final introduces a new JMX metrics endpoint for better metrics gathering and exposure with the Debezium Operator and Debezium Server. (<a href="https://issues.redhat.com/browse/DBZ-7053">DBZ-7053</a>) This feature can be enabled in the custom resource definition by simply adding the following lines:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="yaml"><span class="key">spec</span>:
  <span class="key">runtime</span>:
    <span class="key">jmx</span>:
      <span class="key">enabled</span>: <span class="string"><span class="content">true</span></span>
      <span class="key">port</span>: <span class="string"><span class="content">1099</span></span></code></pre> </div> </div> <div class="paragraph"> <p>The endpoint currently does not support authentication nor SSL but those are on the road-map and will be added as a supplemental change to this feature in a future release.</p> </div> </div> </div> <div class="sect1"> <h2 id="other-changes">Other fixes</h2> <div class="sectionbody"> <div class="paragraph"> <p>In addition, there were quite a number of stability and bug fixes that made it into this release. These include the following:</p> </div> <div class="ulist"> <ul> <li> <p>Oracle RAC throws ORA-00310: archive log sequence required <a href="https://issues.redhat.com/browse/DBZ-5350">DBZ-5350</a></p> </li> <li> <p>oracle missing CDC data <a href="https://issues.redhat.com/browse/DBZ-5656">DBZ-5656</a></p> </li> <li> <p>Missing oracle cdc records <a href="https://issues.redhat.com/browse/DBZ-5750">DBZ-5750</a></p> </li> <li> <p>Multiple debezium:offsets Redis clients <a href="https://issues.redhat.com/browse/DBZ-6952">DBZ-6952</a></p> </li> <li> <p>Wrong case-behavior for non-avro column name in sink connector <a href="https://issues.redhat.com/browse/DBZ-6958">DBZ-6958</a></p> </li> <li> <p>Missing events from Oracle 19c <a href="https://issues.redhat.com/browse/DBZ-6963">DBZ-6963</a></p> </li> <li> <p>Handle properly bytea field for jdbc sink to postgresql <a href="https://issues.redhat.com/browse/DBZ-6967">DBZ-6967</a></p> </li> <li> <p>Debezium jdbc sink process truncate event failure <a href="https://issues.redhat.com/browse/DBZ-6970">DBZ-6970</a></p> </li> <li> <p>Debezium jdbc sink should throw not supporting schema change topic exception <a href="https://issues.redhat.com/browse/DBZ-6990">DBZ-6990</a></p> </li> <li> <p>OLM bundle version for GA releases is invalid <a href="https://issues.redhat.com/browse/DBZ-6994">DBZ-6994</a></p> </li> <li> <p>Further refactoring to correct downstream rendering of incremental snapshots topics <a href="https://issues.redhat.com/browse/DBZ-6997">DBZ-6997</a></p> </li> <li> <p>ALTER TABLE fails when adding multiple columns to JDBC sink target <a href="https://issues.redhat.com/browse/DBZ-6999">DBZ-6999</a></p> </li> <li> <p>Invalid Link to zulip chat in CSV metadata <a href="https://issues.redhat.com/browse/DBZ-7000">DBZ-7000</a></p> </li> <li> <p>Make sure to terminate the task once connectivity is lost to either the rebalance or sync topic <a href="https://issues.redhat.com/browse/DBZ-7001">DBZ-7001</a></p> </li> <li> <p>Missing .metadata.annotations.repository field in CSV metadata <a href="https://issues.redhat.com/browse/DBZ-7003">DBZ-7003</a></p> </li> <li> <p>Single quote replication and loss of data <a href="https://issues.redhat.com/browse/DBZ-7006">DBZ-7006</a></p> </li> <li> <p>Oracle connector: Payload size over 76020 bytes are getting truncated <a href="https://issues.redhat.com/browse/DBZ-7018">DBZ-7018</a></p> </li> <li> <p>Use optional schema for Timezone Converter tests <a href="https://issues.redhat.com/browse/DBZ-7020">DBZ-7020</a></p> </li> <li> <p>DDL statement couldn&#8217;t be parsed <a href="https://issues.redhat.com/browse/DBZ-7030">DBZ-7030</a></p> </li> <li> <p>Debezium Embedded Infinispan Performs Slowly <a href="https://issues.redhat.com/browse/DBZ-7047">DBZ-7047</a></p> </li> <li> <p>Update operator dependencies and add qosdk platform bom <a href="https://issues.redhat.com/browse/DBZ-7048">DBZ-7048</a></p> </li> <li> <p>Field exclusion does not work with events of removed fields <a href="https://issues.redhat.com/browse/DBZ-7058">DBZ-7058</a></p> </li> <li> <p>Consolidate resource labels and annotations <a href="https://issues.redhat.com/browse/DBZ-7064">DBZ-7064</a></p> </li> <li> <p>Allow DS JMX to use username-password authentication on k8 <a href="https://issues.redhat.com/browse/DBZ-7087">DBZ-7087</a></p> </li> <li> <p>Debezium crashes on parsing MySQL DDL statement (specific INSERT) <a href="https://issues.redhat.com/browse/DBZ-7119">DBZ-7119</a></p> </li> <li> <p>Debezium-ddl-parser crashes on parsing MySQL DDL statement (specific UNION) <a href="https://issues.redhat.com/browse/DBZ-7140">DBZ-7140</a></p> </li> </ul> </div> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.4.1.Final%20ORDER%20BY%20component%20ASC">30 issues</a> were fixed for this release. A big thank you to all the contributors from the community who worked on this release: <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/bpaquet">Bertrand Paquet</a>, <a href="https://github.com/roldanbob">Bob Roldan</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/vidourem">David Remy</a>, <a href="https://github.com/dtseiler">Don Seiler</a>, <a href="https://github.com/harveyyue">Harvey Yue</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/nancyxu123">Nancy Xu</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/eizners">Sergey Eizner</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, and <a href="https://github.com/adityajain311995">adityajain311995</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="whats-next">What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>As mentioned in our last release announcement, the cadence for Debezium 2.5 is condensed due to the upcoming holiday season. The next preview release for Debezium 2.5 will be our first and most likely only Beta release, later this month. We plan to conclude the Debezium 2.5 release series with a release candidate most likely the first week of December and a final release mid-way through December, just before the holiday break.</p> </div> <div class="paragraph"> <p>We are also moving forward on our review and process for MariaDB support. There will likely be some news on this in the coming weeks as we begin to find a path forward around this particular advancement. The team is also continuing the work on the Debezium Engine improvements, and much more. You can find all the details for our continued plans for Debezium 2.5 on our <a href="/roadmap">roadmap</a>.</p> </div> <div class="paragraph"> <p>As always, please be sure to get in touch with us on the <a href="https://groups.google.com/g/debezium">mailing list</a> or <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a> if you have questions or feedback. Until next time, stay warm out there!</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><summary type="html"><![CDATA[As the year starts to come to a close, I am happy to announce the first maintenance release for the Debezium 2.4 release series, Debezium 2.4.1.Final. While our maintenance releases focus primarily on bug fixes and stability improvements, there are a few new features we back ported from our most recent Debezium 2.5 development series. All these new features focus on the Debezium Operator for Kubernetes, so lets take a quick deep dive into those details. As always, you can find the complete list of changes for this release in the release notes.]]></summary></entry><entry><title type="html">Debezium 2.5.0.Alpha2 Released</title><link href="https://debezium.io/blog/2023/11/10/debezium-2-5-alpha2-released/" rel="alternate" type="text/html" title="Debezium 2.5.0.Alpha2 Released"/><published>2023-11-10T00:00:00+00:00</published><updated>2023-11-10T00:00:00+00:00</updated><id>https://debezium.io/blog/2023/11/10/debezium-2-5-alpha2-released</id><content type="html" xml:base="https://debezium.io/blog/2023/11/10/debezium-2-5-alpha2-released/"><![CDATA[<div class="paragraph"> <p>While it has only been two short weeks since our first preview release for the Debezium 2.5 release stream, I am happy to announce the immediate availability of the next preview release, Debezium <strong>2.5.0.Alpha2</strong>.</p> </div> <div class="paragraph"> <p>This release includes a variety of improvements, batch support for the JDBC Sink connector, seamless support for MongoDB documents that exceed the 16MB barrier, MySQL 8.2 compatibility, and signal improvements for SQL Server. Additionally, this release includes a variety of bug fixes and several breaking changes.</p> </div> <div class="paragraph"> <p>Let&#8217;s take a closer look at these changes and improvements that are included in Debezium 2.5.0.Alpha2; as always, you can find the complete list of changes for this release in the <a href="/releases/2.5/release-notes">release notes</a>. Please remember to take special note to any breaking changes that could affect your upgrade path.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect2"> <h3 id="breaking_changes">Breaking changes</h3> <div class="paragraph"> <p>While we strive to avoid breaking changes, sometimes those changes are inevitable to evolve in the right direction. This release includes a variety of breaking changes.</p> </div> <div class="sect3"> <h4 id="mongodb_default_connection_mode_changed">MongoDB default connection mode changed</h4> <div class="paragraph"> <p>The upgrade to Debezium 2.5 brings a change to MongoDB&#8217;s default implementation. In previous builds, the default connection mode was <code>replica_set</code>; however with Debezium 2.5 this is now <code>sharded</code>. If you were connecting to a sharded cluster and not explicitly setting a connection mode; ergo, relying on the default behavior, you must review your connector configuration and make adjustments. (<a href="https://issues.redhat.com/browse/DBZ-7108)">DBZ-7108</a>)</p> </div> <div class="paragraph"> <p>Overall, this change is part of larger effort to remove the <code>replica_set</code> mode entirely. Please be sure to review your connector configurations for all MongoDB connectors when upgrading.</p> </div> <div class="admonitionblock important"> <table> <tr> <td class="icon"> <i class="fa icon-important" title="Important"></i> </td> <td class="content"> <div class="paragraph"> <p>This breaking change invalidates existing connector offsets and a new snapshot will be triggered by default when upgrading. If a snapshot is not needed or wanted, you will need to adjust your connector configuration&#8217;s <code>snapshot.mode</code> accordingly.</p> </div> </td> </tr> </table> </div> </div> <div class="sect3"> <h4 id="debezium_embedded_engine_deprecated_apis_removed">Debezium Embedded Engine Deprecated APIs removed</h4> <div class="paragraph"> <p>Part of the team&#8217;s focus in Debezium 2.5 was to improve the Debezium Embedded Engine&#8217;s experience. With that goal in mind, we took this preview release as an opportunity to clean-up the embedded engine&#8217;s API.</p> </div> <div class="paragraph"> <p>If your usage of the Debezium Embedded Engine utilized any of the previously deprecated APIs on <code>EmbeddedEngine</code>, you will find those methods have since been removed. (<a href="https://issues.redhat.com/browse/DBZ-7110">DBZ-7100</a>) The recommended path forward is to make sure that you&#8217;re using the <code>DebeziumEngine</code> interface provided by the <code>debezium-api</code> artifact.</p> </div> </div> <div class="sect3"> <h4 id="mysql_5_7_support_now_best_effort">MySQL 5.7 support now best-effort</h4> <div class="paragraph"> <p>The MySQL community announced that MySQL 5.7 would enter its End of Life cycle at the end of October 2023, or just last month. This means that the MySQL community has no plans to continue offering security or bug fix patches for that edition of MySQL.</p> </div> <div class="paragraph"> <p>In accordance with this upstream community news, Debezium too is making adjustments, like other vendors, around this recent news. To that end, starting with Debezium 2.5, we will no longer be testing nor supporting MySQL 5.7 if full capacity, thus MySQL 5.7 enters what we call "best-effort" support. (<a href="https://issues.redhat.com/browse/DBZ-6874">DBZ-6874</a>)</p> </div> </div> <div class="sect3"> <h4 id="cloudevents_configuration_option_renamed">CloudEvents - configuration option renamed</h4> <div class="paragraph"> <p>If you are presently using the CloudEvents converter to emit events that conform to the CloudEvents format, it&#8217;s important to note that the configuration option <code>metadata.location</code> was renamed to <code>metadata.source</code>. You will need to be sure to update your connector configurations to reflect this change with Debezium 2.5 and onward. (<a href="https://issues.redhat.com/browse/DBZ-7060">DBZ-7060</a>)</p> </div> </div> </div> <div class="sect2"> <h3 id="new_features_and_improvements">New features and improvements</h3> <div class="paragraph"> <p>Debezium 2.5 also introduces quite a number of improvements, lets take a look at each of these individually.</p> </div> <div class="sect3"> <h4 id="jdbc_sink_batch_support">JDBC Sink Batch Support</h4> <div class="paragraph"> <p>Debezium first introduced the JDBC sink connector in March 2023 as a part of Debezium 2.2. Over the last several months, this connector has seen numerous iterations to improve its stability, feature set, and capabilities. Debezium 2.5 builds atop of those efforts, introducing batch-writes. (<a href="https://issues.redhat.com/browse/DBZ-6317">DBZ-6317</a>)</p> </div> <div class="paragraph"> <p>In previous versions, the connector worked on each topic event separately; however, the new batch-write support mode will collect the events into buckets and write those changes to the target system using the fewest possible transaction boundaries as possible. This change increases the connector&#8217;s throughput capabilities and makes the interactions with the target database far more efficient.</p> </div> </div> <div class="sect3"> <h4 id="seamless_mongodb_large_document_handling">Seamless MongoDB large document handling</h4> <div class="paragraph"> <p>Debezium has introduced several changes around large document processing in recent releases; however, those changes primarily focused on handling that use case with MongoDB 4 and 5. While these improvements certainly help for those older versions, the MongoDB community has introduced a way in MongoDB 6 to seamlessly deal with this at the database pipeline level.</p> </div> <div class="paragraph"> <p>Debezium 2.5&#8217;s MongoDB connector now uses the <code>$changeStreamSplitLargeEvent</code> aggregation feature, introduced as part of MongoDB 6.0.9. This avoids the <code>BSONObjectTooLarge</code> exception when working with documents that would exceed the 16MB document size limit of MongoDB. This new feature is controlled by the <code>oversize.handling.mode</code> option, which defaults to <code>fail</code>. Please adjust this configuration if you would like to take advantage of this new, opt-in feature. (<a href="https://issues.redhat.com/browse/DBZ-6726">DBZ-6726</a>)</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>Debezium is simply utilizing an underlying feature of the MongoDB database. As such, the database still has some limitations discussed in the <a href="https://www.mongodb.com/docs/v6.0/reference/operator/aggregation/changeStreamSplitLargeEvent/#behavior">MongoDB documentation</a> that could still lead to exceptions with large documents that don&#8217;t adhere to MongoDB&#8217;s split rules.</p> </div> </td> </tr> </table> </div> </div> <div class="sect3"> <h4 id="mysql_8_2_support">MySQL 8.2 support</h4> <div class="paragraph"> <p>The MySQL community recently released a new innovation release, MySQL 8.2.0 at the end of October 2023. This new release has been tested with Debezium and we&#8217;re happy to announce that we officially support this new innovation release. (<a href="https://issues.redhat.com/browse/DBZ-6873">DBZ-6873</a>)</p> </div> </div> <div class="sect3"> <h4 id="sql_server_notification_improvements">SQL Server Notification Improvements</h4> <div class="paragraph"> <p>Debezium for SQL Server works by reading the changes captured by the database in what are called capture instances. These instances can come and go based on a user&#8217;s needs, and it can be difficult to know if Debezium has concluded its own capture process for a given capture instance.</p> </div> <div class="paragraph"> <p>Debezium 2.5 remedies this problem by emitting a new notification aggregate called <code>Capture Instance</code>, allowing any observer to realize when a capture instance is no longer in use by Debezium. This new notification includes a variety of connector details including the connector&#8217;s name along with the start, stop, and commit LSN values. (<a href="https://issues.redhat.com/browse/DBZ-7043">DBZ-7043</a>)</p> </div> </div> <div class="sect3"> <h4 id="redis_schema_history_retries_now_limited">Redis Schema History Retries now Limited</h4> <div class="paragraph"> <p>Debezium 2.5 introduces a new configuration option, <code>schema.history.internal.redis.max.attempts</code> designed to limit the number of retry attempts while connecting to a Redis database when it becomes unavailable, previously it simply retried forever. This new option defaults to <code>10</code> but is user configurable. (<a href="https://issues.redhat.com/browse/DBZ-7120">DBZ-7120</a>)</p> </div> </div> <div class="sect3"> <h4 id="sql_server_driver_updates">SQL Server Driver Updates</h4> <div class="paragraph"> <p>SQL Serer 2019 introduced the ability to specify column-specific sensitivity classifications to provide better visibility and protections for sensitive data. Unfortunately, the current driver shipped with Debezium 2.4 and earlier does not support this feature. Debezium 2.5 introduces the latest 12.4.2 SQL Server driver so that users can now take advantage of this feature out of the box. (<a href="https://issues.redhat.com/browse/DBZ-7109">DBZ-7109</a>)</p> </div> </div> <div class="sect3"> <h4 id="debezium_server_kinesis_sink_improvements">Debezium Server Kinesis Sink Improvements</h4> <div class="paragraph"> <p>Debezium Server Kinesis users will be happy to note that there has been some reliability improvements with the sink adapter with Debezium 2.5. The Kinesis Sink will now automatically retry the delivery of a failed record up to a maximum of 5 attempts before the adapter triggers a failure. This should improve the sink adapter&#8217;s delivery reliability and help situations where a batch of changes may overload the sink&#8217;s endpoint. (<a href="https://issues.redhat.com/browse/DBZ-7032">DBZ-7032</a>)</p> </div> </div> </div> <div class="sect1"> <h2 id="other-changes">Other fixes</h2> <div class="sectionbody"> <div class="paragraph"> <p>In addition, there were quite a number of stability and bug fixes that made it into this release. These include the following:</p> </div> <div class="ulist"> <ul> <li> <p>Oracle RAC throws ORA-00310: archive log sequence required <a href="https://issues.redhat.com/browse/DBZ-5350">DBZ-5350</a></p> </li> <li> <p>oracle missing CDC data <a href="https://issues.redhat.com/browse/DBZ-5656">DBZ-5656</a></p> </li> <li> <p>Missing oracle cdc records <a href="https://issues.redhat.com/browse/DBZ-5750">DBZ-5750</a></p> </li> <li> <p>Add (integration) tests for Oracle connector-specific Debezium Connect REST extension <a href="https://issues.redhat.com/browse/DBZ-6763">DBZ-6763</a></p> </li> <li> <p>Intermittent failure of MongoDbReplicaSetAuthTest <a href="https://issues.redhat.com/browse/DBZ-6875">DBZ-6875</a></p> </li> <li> <p>Connector frequently misses commit operations <a href="https://issues.redhat.com/browse/DBZ-6942">DBZ-6942</a></p> </li> <li> <p>Missing events from Oracle 19c <a href="https://issues.redhat.com/browse/DBZ-6963">DBZ-6963</a></p> </li> <li> <p>Mongodb tests in RHEL system testsuite are failing with DBZ 2.3.4 <a href="https://issues.redhat.com/browse/DBZ-6996">DBZ-6996</a></p> </li> <li> <p>Use DebeziumEngine instead of EmbeddedEngine in the testsuite <a href="https://issues.redhat.com/browse/DBZ-7007">DBZ-7007</a></p> </li> <li> <p>Debezium Embedded Infinispan Performs Slowly <a href="https://issues.redhat.com/browse/DBZ-7047">DBZ-7047</a></p> </li> <li> <p>Field exclusion does not work with events of removed fields <a href="https://issues.redhat.com/browse/DBZ-7058">DBZ-7058</a></p> </li> <li> <p>Update transformation property "delete.tombstone.handling.mode" to debezium doc <a href="https://issues.redhat.com/browse/DBZ-7062">DBZ-7062</a></p> </li> <li> <p>JDBC sink connector not working with CloudEvent <a href="https://issues.redhat.com/browse/DBZ-7065">DBZ-7065</a></p> </li> <li> <p>JDBC connection leak when error occurs during processing <a href="https://issues.redhat.com/browse/DBZ-7069">DBZ-7069</a></p> </li> <li> <p>Some server tests fail due to @com.google.inject.Inject annotation <a href="https://issues.redhat.com/browse/DBZ-7077">DBZ-7077</a></p> </li> <li> <p>Add MariaDB driver for testing and distribution <a href="https://issues.redhat.com/browse/DBZ-7085">DBZ-7085</a></p> </li> <li> <p>Allow DS JMX to use username-password authentication on k8 <a href="https://issues.redhat.com/browse/DBZ-7087">DBZ-7087</a></p> </li> <li> <p>HttpIT fails with "Unrecognized field subEvents" <a href="https://issues.redhat.com/browse/DBZ-7092">DBZ-7092</a></p> </li> <li> <p>MySQL parser does not conform to arithmetical operation priorities <a href="https://issues.redhat.com/browse/DBZ-7095">DBZ-7095</a></p> </li> <li> <p>VitessConnectorIT.shouldTaskFailIfColumnNameInvalid fails <a href="https://issues.redhat.com/browse/DBZ-7104">DBZ-7104</a></p> </li> <li> <p>When RelationalBaseSourceConnector#validateConnection is called with invalid config [inside Connector#validate()] can lead to exceptions <a href="https://issues.redhat.com/browse/DBZ-7105">DBZ-7105</a></p> </li> <li> <p>Debezium crashes on parsing MySQL DDL statement (specific INSERT) <a href="https://issues.redhat.com/browse/DBZ-7119">DBZ-7119</a></p> </li> </ul> </div> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.5.0.Alpha2%20ORDER%20BY%20component%20ASC">33 issues</a> were fixed for this release. A big thank you to all the contributors from the community who worked on this release: <a href="https://github.com/AnatolyPopov">Anatolii Popov</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/roldanbob">Bob Roldan</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/harveyyue">Harvey Yue</a>, <a href="https://github.com/ilyasahsan123">Ilyas Ahsan</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/RafaelJCamara">Rafael Câmara</a>, <a href="https://github.com/rk3rn3r">René Kerner</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, <a href="https://github.com/ramanenka">Vadzim Ramanenka</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, and <a href="https://github.com/caicancai">蔡灿材</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="whats-next">What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>As mentioned in our last release announcement, the cadence for Debezium 2.5 is condensed due to the upcoming holiday season. The next preview release for Debezium 2.5 will be our first and most likely only Beta release, later this month. We plan to conclude the Debezium 2.5 release series with a release candidate most likely the first week of December and a final release mid-way through December, just before the holiday break.</p> </div> <div class="paragraph"> <p>The team is also working on a maintenance release of Debezium 2.4, due out late this week. This update to Debezium 2.4 will bring a host of bug fixes and stability improvements already in Debezium 2.5 to the 2.4 release stream.</p> </div> <div class="paragraph"> <p>We are also moving forward on our review and process for MariaDB support. There will likely be some news on this in the coming weeks as we begin to find a path forward around this particular advancement. The team is also continuing the work on the Debezium Engine improvements, and much more. You can find all the details for our continued plans for Debezium 2.5 on our <a href="/roadmap">roadmap</a>.</p> </div> <div class="paragraph"> <p>Lastly, there will be news later this week about the next Debezium community event. Please be on the look-out for this as we&#8217;d love to see as many of our community members drop by our virtual event in early December. it&#8217;s a great way to meet the engineers who work on Debezium, the community contributors, and ask questions and gain insights into what is all part of Debezium 2.5 and the path forward to 2.6 and 2.7 for next year.</p> </div> <div class="paragraph"> <p>As always, please be sure to get in touch with us on the <a href="https://groups.google.com/g/debezium">mailing list</a> or <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a> if you have questions or feedback. Until next time, stay warm out there!</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="informix"/><summary type="html"><![CDATA[While it has only been two short weeks since our first preview release for the Debezium 2.5 release stream, I am happy to announce the immediate availability of the next preview release, Debezium 2.5.0.Alpha2. This release includes a variety of improvements, batch support for the JDBC Sink connector, seamless support for MongoDB documents that exceed the 16MB barrier, MySQL 8.2 compatibility, and signal improvements for SQL Server. Additionally, this release includes a variety of bug fixes and several breaking changes. Let&#8217;s take a closer look at these changes and improvements that are included in Debezium 2.5.0.Alpha2; as always, you can find the complete list of changes for this release in the release notes. Please remember to take special note to any breaking changes that could affect your upgrade path.]]></summary></entry><entry><title type="html">Debezium 2.5.0.Alpha1 Released</title><link href="https://debezium.io/blog/2023/10/26/debezium-2-5-alpha1-released/" rel="alternate" type="text/html" title="Debezium 2.5.0.Alpha1 Released"/><published>2023-10-26T00:00:00+00:00</published><updated>2023-10-26T00:00:00+00:00</updated><id>https://debezium.io/blog/2023/10/26/debezium-2-5-alpha1-released</id><content type="html" xml:base="https://debezium.io/blog/2023/10/26/debezium-2-5-alpha1-released/"><![CDATA[<div class="paragraph"> <p>It&#8217;s been about three weeks since we released Debezium 2.4, and in that time the team has been diligently working on what comes next in the evolution of Debezium. I am pleased to announce that today we have released Debezium <strong>2.5.0.Alpha1</strong>, the first preview release of Debezium&#8217;s 2.5 release stream.</p> </div> <div class="paragraph"> <p>This release includes many new exciting features as well as bug fixes, e.g. a brand-new IBM Informix connector, a preview support for MariaDB with the MySQL connector, improvements to the Debezium Server operator, Kafka 3.6.0 support, and much more.</p> </div> <div class="paragraph"> <p>Let&#8217;s take a closer look at these changes and features that are included in Debezium 2.5.0.Alpha1; as always, you can find the complete list of changes for this release in the <a href="/releases/2.5/release-notes">release notes</a>. Please take special note of any breaking changes that could affect your upgrade path.</p> </div> <div class="sect1"> <h2 id="ibm_informix_connector">IBM Informix Connector</h2> <div class="sectionbody"> <div class="paragraph"> <p>Thanks to the contribution from <a href="https://github.com/nrkljo">Lars Johansson</a>, Debezium 2.5 introduces a new connector to its portfolio to gather changes from IBM Informix. IBM Informix is an embeddable, high-performance database for integrating SQL, NoSQL, JSON, time-series, and spatial data in one place. It&#8217;s designed for analytics at the edge, in the cloud, or on premise.</p> </div> <div class="paragraph"> <p>The IBM Informix connector is bundled just like any of our community lead connectors, it is available on Maven Central or you can download the plug-in archive from our <a href="/releases/2.5">Debezium 2.5</a> releases page.</p> </div> <div class="paragraph"> <p>The maven artifact coordinates are:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;dependency&gt;</span>
    <span class="tag">&lt;groupId&gt;</span>io.debezium<span class="tag">&lt;/groupId&gt;</span>
    <span class="tag">&lt;artifactId&gt;</span>debezium-connector-informix<span class="tag">&lt;/artifactId&gt;</span>
    <span class="tag">&lt;version&gt;</span>2.5.0.Alpha1<span class="tag">&lt;/version&gt;</span>
<span class="tag">&lt;/dependency&gt;</span></code></pre> </div> </div> <div class="paragraph"> <p>If you would like contribute to the Informix connector, we have added a new repository under the Debezium organization, <a href="https://github.com/debezium/debezium-connector-informix">debezium-connector-informix</a>.</p> </div> <div class="paragraph"> <p>I&#8217;d like to thank Lars Johansson for this contribution and his collaboration with the team, kudos!</p> </div> </div> </div> <div class="sect1"> <h2 id="mariadb_preview_support">MariaDB preview support</h2> <div class="sectionbody"> <div class="paragraph"> <p>The community has leveraged the MySQL connector as an alternative to capture changes from MariaDB for quite some time now; however that compatibility was primarily best-case effort.</p> </div> <div class="paragraph"> <p>The Debezium 2.5 release stream aims to bring MariaDB to the forefront as a first-class connector by taking a very clear and methodological approach to incrementally check, validate, and eventually support MariaDB at the same capacity that we do MySQL. Our goal and hope is that we can do this within the scope of the MySQL connector proper; however, there is still quite a bit of ongoing investigation around GTID support that may influence the path forward.</p> </div> <div class="paragraph"> <p>This first preview build of Debezium 2.5 has taken the first step, we&#8217;ve verified that the code works against a single MariaDB database deployment, the test suite passes and we&#8217;ve addressed any changes needed with the Binlog client to support that deployment. Our next steps is to look into GTID support, which MariaDB supports but using an approach that isn&#8217;t compatible with MySQL.</p> </div> <div class="paragraph"> <p>Stay tuned for future builds as we continue to expand on this and we certainly welcome any early feedback.</p> </div> </div> </div> <div class="sect1"> <h2 id="oracle_streaming_metrics_changes">Oracle Streaming Metrics Changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>In previous builds of Debezium, there was a single Oracle streaming metrics bean that exposed all metrics options that spanned across all three streaming adapters. This often lead to some confusion about what metrics are applicable to which streaming adapter so we wanted to define a clear distinction in this case.</p> </div> <div class="paragraph"> <p>With Debezium 2.5, the Oracle streaming metrics beans have been split into three different implementations, one for each adapter type. For observability stacks, this change should be completely transparent unless you were previously gathering a metric for one adapter type while using another. In this case you&#8217;ll find that metric is no longer available.</p> </div> <div class="paragraph"> <p>Specifically for LogMiner users, several metrics have been renamed and the old metrics have been deprecated. While you will still be able to use the old metric names in Debezium 2.5, these are scheduled for removal in a future 2.7+ build. The metrics that were deprecated and renamed are as follows:</p> </div> <table class="tableblock frame-all grid-all stretch table table-bordered table-striped"> <colgroup> <col style="width: 50%;"> <col style="width: 50%;"> </colgroup> <thead> <tr> <th class="tableblock halign-left valign-top">Old/Deprecated Metric</th> <th class="tableblock halign-left valign-top">New Metric</th> </tr> </thead> <tbody> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>CurrentRedoLogFileName</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>CurrentLogFileNames</p> </div></div></td> </tr> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>RedoLogStatus</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>RedoLogStatuses</p> </div></div></td> </tr> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>SwitchCounter</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>LogSwitchCounter</p> </div></div></td> </tr> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>FetchingQueryCount</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>FetchQueryCount</p> </div></div></td> </tr> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>HoursToKeepTransactionInBuffer</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>MillisecondsToKeepTransactionsInBuffer</p> </div></div></td> </tr> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>TotalProcessingTimeInMilliseconds</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>TotalBatchProcessingTimeInMilliseconds</p> </div></div></td> </tr> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>RegisteredDmlCount</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>TotalChangesCount</p> </div></div></td> </tr> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>MillisecondsToSleepBetweenMiningQuery</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>SleepTimeInMilliseconds</p> </div></div></td> </tr> </tbody> <tfoot> <tr> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p>NetworkConnectionProblemsCounter</p> </div></div></td> <td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph"> <p><em>No replacement</em></p> </div></div></td> </tr> </tfoot> </table> </div> </div> <div class="sect1"> <h2 id="debezium_server_operator">Debezium Server Operator</h2> <div class="sectionbody"> <div class="paragraph"> <p>The Debezium Server Operator for Kubernetes has been actively improved in this preview release of Debezium 2.5. Several improvements include:</p> </div> <div class="ulist"> <ul> <li> <p>Ability to set image pull secrets in the CRDs <a href="https://issues.redhat.com/browse/DBZ-6962">DBZ-6962</a></p> </li> <li> <p>Ability to set resource limits in the CRDs <a href="https://issues.redhat.com/browse/DBZ-7052">DBZ-7052</a></p> </li> <li> <p>Published OLM bundle scripts to Maven Central <a href="https://issues.redhat.com/browse/DBZ-6995">DBZ-6995</a></p> </li> <li> <p>Support OKD/OpenShift catalog in OperatorHub release script <a href="https://issues.redhat.com/browse/DBZ-7010">DBZ-7010</a></p> </li> <li> <p>Display name and descriptions metadata available in OLM bundle <a href="https://issues.redhat.com/browse/DBZ-7011">DBZ-7011</a></p> </li> <li> <p>New metrics endpoint for gathering metrics <a href="https://issues.redhat.com/browse/DBZ-7053">DBZ-7053</a></p> </li> </ul> </div> <div class="paragraph"> <p>As we continue to improve the Debezium Server Operator for Kubernetes, we&#8217;d love to get your feedback.</p> </div> </div> </div> <div class="sect1"> <h2 id="community_connectors">Community connectors</h2> <div class="sectionbody"> <div class="paragraph"> <p>Additionally, there were several enhancements to our community led connectors for Google Spanner and Vitess, which include the following changes:</p> </div> <div class="ulist"> <ul> <li> <p>Support for Cloud Spanner emulator with the Spanner connector <a href="https://issues.redhat.com/browse/DBZ-6845">DBZ-6845</a></p> </li> <li> <p>Resumable snapshot support for the Vitess connector <a href="https://issues.redhat.com/browse/DBZ-7050">DBZ-7050</a></p> </li> </ul> </div> </div> </div> <div class="sect1"> <h2 id="other-changes">Other fixes</h2> <div class="sectionbody"> <div class="paragraph"> <p>In addition, there were quite a number of stability and bug fixes that made it into this release. These include the following:</p> </div> <div class="ulist"> <ul> <li> <p>Adding Debezium Server example using MySQL and GCP PubSub <a href="https://issues.redhat.com/browse/DBZ-4471">DBZ-4471</a></p> </li> <li> <p>Refactor ElapsedTimeStrategy <a href="https://issues.redhat.com/browse/DBZ-6778">DBZ-6778</a></p> </li> <li> <p>Multiple debezium:offsets Redis clients <a href="https://issues.redhat.com/browse/DBZ-6952">DBZ-6952</a></p> </li> <li> <p>Wrong case-behavior for non-avro column name in sink connector <a href="https://issues.redhat.com/browse/DBZ-6958">DBZ-6958</a></p> </li> <li> <p>Handle properly bytea field for jdbc sink to postgresql <a href="https://issues.redhat.com/browse/DBZ-6967">DBZ-6967</a></p> </li> <li> <p>Debezium jdbc sink process truncate event failure <a href="https://issues.redhat.com/browse/DBZ-6970">DBZ-6970</a></p> </li> <li> <p>Single quote replication includes escaped quotes for N(CHAR/VARCHAR) columns <a href="https://issues.redhat.com/browse/DBZ-6975">DBZ-6975</a></p> </li> <li> <p>Provide configuration option to exclude extension attributes from a CloudEvent <a href="https://issues.redhat.com/browse/DBZ-6982">DBZ-6982</a></p> </li> <li> <p>Debezium jdbc sink should throw not supporting schema change topic exception <a href="https://issues.redhat.com/browse/DBZ-6990">DBZ-6990</a></p> </li> <li> <p>Debezium doesn&#8217;t compile with JDK 21 <a href="https://issues.redhat.com/browse/DBZ-6992">DBZ-6992</a></p> </li> <li> <p>OLM bundle version for GA releases is invalid <a href="https://issues.redhat.com/browse/DBZ-6994">DBZ-6994</a></p> </li> <li> <p>Further refactoring to correct downstream rendering of incremental snapshots topics <a href="https://issues.redhat.com/browse/DBZ-6997">DBZ-6997</a></p> </li> <li> <p>ALTER TABLE fails when adding multiple columns to JDBC sink target <a href="https://issues.redhat.com/browse/DBZ-6999">DBZ-6999</a></p> </li> <li> <p>Invalid Link to zulip chat in CSV metadata <a href="https://issues.redhat.com/browse/DBZ-7000">DBZ-7000</a></p> </li> <li> <p>Make sure to terminate the task once connectivity is lost to either the rebalance or sync topic <a href="https://issues.redhat.com/browse/DBZ-7001">DBZ-7001</a></p> </li> <li> <p>Missing .metadata.annotations.repository field in CSV metadata <a href="https://issues.redhat.com/browse/DBZ-7003">DBZ-7003</a></p> </li> <li> <p>Single quote replication and loss of data <a href="https://issues.redhat.com/browse/DBZ-7006">DBZ-7006</a></p> </li> <li> <p>Remove deprecated embedded engine code <a href="https://issues.redhat.com/browse/DBZ-7013">DBZ-7013</a></p> </li> <li> <p>Enable replication slot advance check <a href="https://issues.redhat.com/browse/DBZ-7015">DBZ-7015</a></p> </li> <li> <p>Add configuration option to CloudEventsConverter to retrieve id and type from headers <a href="https://issues.redhat.com/browse/DBZ-7016">DBZ-7016</a></p> </li> <li> <p>Oracle connector: Payload size over 76020 bytes are getting truncated <a href="https://issues.redhat.com/browse/DBZ-7018">DBZ-7018</a></p> </li> <li> <p>Use optional schema for Timezone Converter tests <a href="https://issues.redhat.com/browse/DBZ-7020">DBZ-7020</a></p> </li> <li> <p>DDL statement couldn&#8217;t be parsed <a href="https://issues.redhat.com/browse/DBZ-7030">DBZ-7030</a></p> </li> <li> <p>Blocking ad-hoc snapshot is not really blocking for MySQL <a href="https://issues.redhat.com/browse/DBZ-7035">DBZ-7035</a></p> </li> <li> <p>Fake ROTATE event on connection restart cleans metadata <a href="https://issues.redhat.com/browse/DBZ-7037">DBZ-7037</a></p> </li> <li> <p>Consolidate resource labels and annotations <a href="https://issues.redhat.com/browse/DBZ-7064">DBZ-7064</a></p> </li> </ul> </div> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.5.0.Alpha1%20ORDER%20BY%20component%20ASC">XX issues</a> were fixed for this release. A big thank you to all the contributors from the community who worked on this release: <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/bpaquet">Bertrand Paquet</a>, <a href="https://github.com/roldanbob">Bob Roldan</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/vidourem">David Remy</a>, <a href="https://github.com/dtseiler">Don Seiler</a>, <a href="https://github.com/gunnarmorling">Gunnar Morling</a>, <a href="https://github.com/harveyyue">Harvey Yue</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/novotnyJiri">Jiri Novotny</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/MarkDucommun">Mark Ducommun</a>, <a href="https://github.com/nancyxu123">Nancy Xu</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/prburgu">Praveen Burgu</a>, <a href="https://github.com/rajdangwal">Rajendra Dangwal</a>, <a href="https://github.com/rk3rn3r">René Kerner</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, <a href="https://github.com/eizners">Sergey Eizner</a>, <a href="https://github.com/ShuranZhang">Shuran Zhang</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, and <a href="https://github.com/sean-k1">sean</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="whats-next">What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>With the holiday season quickly approaching for many of us, you can expect that the release cadence for Debezium 2.5 to be shorter than usual. We intend to release often like always, but expect that we will likely only do one more alpha build before we began to transition into beta and release candidate builds. Our goal is to deliver Debezium 2.5.0.Final by mid-December, just in time for the holiday break.</p> </div> <div class="paragraph"> <p>While this condensed timeline doesn&#8217;t give us lots of room, we have a lot still planned to include for Debezium 2.5. There is still lots of work to do on the MariaDB preview front, supporting GTID and multiple topology deployments. We&#8217;re also working on improving the parallelization experience with Debezium Engine, batch support for the JDBC sink connector, MongoDB improvements around large BSON documents, and much more. You can find all the details for our continued plans for Debezium 2.5 on our <a href="/roadmap">roadmap</a>.</p> </div> <div class="paragraph"> <p>Lastly, I&#8217;d like to remind everyone about the Debezium community meeting. I will be distributing details about the next meeting in the coming weeks, and I would urge folks to be on the look-out and try and stop by our virtual event in early December. It&#8217;s a great way to meet the engineers working on Debezium, ask questions in an AMA style format, and to get insights not only into what all is part of Debezium 2.5, but also what lies ahead with Debezium 2.6 and 2.7 for early next year!</p> </div> <div class="paragraph"> <p>As always, please be sure to get in touch with us on the <a href="https://groups.google.com/g/debezium">mailing list</a> or <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a> if you have questions or feedback. Until next time, stay warm out there!</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="mariadb"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><category term="informix"/><summary type="html"><![CDATA[It&#8217;s been about three weeks since we released Debezium 2.4, and in that time the team has been diligently working on what comes next in the evolution of Debezium. I am pleased to announce that today we have released Debezium 2.5.0.Alpha1, the first preview release of Debezium&#8217;s 2.5 release stream. This release includes many new exciting features as well as bug fixes, e.g. a brand-new IBM Informix connector, a preview support for MariaDB with the MySQL connector, improvements to the Debezium Server operator, Kafka 3.6.0 support, and much more. Let&#8217;s take a closer look at these changes and features that are included in Debezium 2.5.0.Alpha1; as always, you can find the complete list of changes for this release in the release notes. Please take special note of any breaking changes that could affect your upgrade path. IBM Informix Connector Thanks to the contribution from Lars Johansson, Debezium 2.5 introduces a new connector to its portfolio to gather changes from IBM Informix. IBM Informix is an embeddable, high-performance database for integrating SQL, NoSQL, JSON, time-series, and spatial data in one place. It&#8217;s designed for analytics at the edge, in the cloud, or on premise. The IBM Informix connector is bundled just like any of our community lead connectors, it is available on Maven Central or you can download the plug-in archive from our Debezium 2.5 releases page. The maven artifact coordinates are: &lt;dependency&gt; &lt;groupId&gt;io.debezium&lt;/groupId&gt; &lt;artifactId&gt;debezium-connector-informix&lt;/artifactId&gt; &lt;version&gt;2.5.0.Alpha1&lt;/version&gt; &lt;/dependency&gt; If you would like contribute to the Informix connector, we have added a new repository under the Debezium organization, debezium-connector-informix. I&#8217;d like to thank Lars Johansson for this contribution and his collaboration with the team, kudos! MariaDB preview support The community has leveraged the MySQL connector as an alternative to capture changes from MariaDB for quite some time now; however that compatibility was primarily best-case effort. The Debezium 2.5 release stream aims to bring MariaDB to the forefront as a first-class connector by taking a very clear and methodological approach to incrementally check, validate, and eventually support MariaDB at the same capacity that we do MySQL. Our goal and hope is that we can do this within the scope of the MySQL connector proper; however, there is still quite a bit of ongoing investigation around GTID support that may influence the path forward. This first preview build of Debezium 2.5 has taken the first step, we&#8217;ve verified that the code works against a single MariaDB database deployment, the test suite passes and we&#8217;ve addressed any changes needed with the Binlog client to support that deployment. Our next steps is to look into GTID support, which MariaDB supports but using an approach that isn&#8217;t compatible with MySQL. Stay tuned for future builds as we continue to expand on this and we certainly welcome any early feedback. Oracle Streaming Metrics Changes In previous builds of Debezium, there was a single Oracle streaming metrics bean that exposed all metrics options that spanned across all three streaming adapters. This often lead to some confusion about what metrics are applicable to which streaming adapter so we wanted to define a clear distinction in this case. With Debezium 2.5, the Oracle streaming metrics beans have been split into three different implementations, one for each adapter type. For observability stacks, this change should be completely transparent unless you were previously gathering a metric for one adapter type while using another. In this case you&#8217;ll find that metric is no longer available. Specifically for LogMiner users, several metrics have been renamed and the old metrics have been deprecated. While you will still be able to use the old metric names in Debezium 2.5, these are scheduled for removal in a future 2.7+ build. The metrics that were deprecated and renamed are as follows: Old/Deprecated Metric New Metric CurrentRedoLogFileName CurrentLogFileNames RedoLogStatus RedoLogStatuses SwitchCounter LogSwitchCounter FetchingQueryCount FetchQueryCount HoursToKeepTransactionInBuffer MillisecondsToKeepTransactionsInBuffer TotalProcessingTimeInMilliseconds TotalBatchProcessingTimeInMilliseconds RegisteredDmlCount TotalChangesCount MillisecondsToSleepBetweenMiningQuery SleepTimeInMilliseconds NetworkConnectionProblemsCounter No replacement Debezium Server Operator The Debezium Server Operator for Kubernetes has been actively improved in this preview release of Debezium 2.5. Several improvements include: Ability to set image pull secrets in the CRDs DBZ-6962 Ability to set resource limits in the CRDs DBZ-7052 Published OLM bundle scripts to Maven Central DBZ-6995 Support OKD/OpenShift catalog in OperatorHub release script DBZ-7010 Display name and descriptions metadata available in OLM bundle DBZ-7011 New metrics endpoint for gathering metrics DBZ-7053 As we continue to improve the Debezium Server Operator for Kubernetes, we&#8217;d love to get your feedback. Community connectors Additionally, there were several enhancements to our community led connectors for Google Spanner and Vitess, which include the following changes: Support for Cloud Spanner emulator with the Spanner connector DBZ-6845 Resumable snapshot support for the Vitess connector DBZ-7050 Other fixes In addition, there were quite a number of stability and bug fixes that made it into this release. These include the following: Adding Debezium Server example using MySQL and GCP PubSub DBZ-4471 Refactor ElapsedTimeStrategy DBZ-6778 Multiple debezium:offsets Redis clients DBZ-6952 Wrong case-behavior for non-avro column name in sink connector DBZ-6958 Handle properly bytea field for jdbc sink to postgresql DBZ-6967 Debezium jdbc sink process truncate event failure DBZ-6970 Single quote replication includes escaped quotes for N(CHAR/VARCHAR) columns DBZ-6975 Provide configuration option to exclude extension attributes from a CloudEvent DBZ-6982 Debezium jdbc sink should throw not supporting schema change topic exception DBZ-6990 Debezium doesn&#8217;t compile with JDK 21 DBZ-6992 OLM bundle version for GA releases is invalid DBZ-6994 Further refactoring to correct downstream rendering of incremental snapshots topics DBZ-6997 ALTER TABLE fails when adding multiple columns to JDBC sink target DBZ-6999 Invalid Link to zulip chat in CSV metadata DBZ-7000 Make sure to terminate the task once connectivity is lost to either the rebalance or sync topic DBZ-7001 Missing .metadata.annotations.repository field in CSV metadata DBZ-7003 Single quote replication and loss of data DBZ-7006 Remove deprecated embedded engine code DBZ-7013 Enable replication slot advance check DBZ-7015 Add configuration option to CloudEventsConverter to retrieve id and type from headers DBZ-7016 Oracle connector: Payload size over 76020 bytes are getting truncated DBZ-7018 Use optional schema for Timezone Converter tests DBZ-7020 DDL statement couldn&#8217;t be parsed DBZ-7030 Blocking ad-hoc snapshot is not really blocking for MySQL DBZ-7035 Fake ROTATE event on connection restart cleans metadata DBZ-7037 Consolidate resource labels and annotations DBZ-7064 Altogether, XX issues were fixed for this release. A big thank you to all the contributors from the community who worked on this release: Anisha Mohanty, Bertrand Paquet, Bob Roldan, Chris Cranford, David Remy, Don Seiler, Gunnar Morling, Harvey Yue, Jakub Cechacek, Jiri Novotny, Jiri Pechanec, Mario Fiore Vitale, Mark Ducommun, Nancy Xu, Ondrej Babec, Praveen Burgu, Rajendra Dangwal, René Kerner, Robert Roldan, Roman Kudryashov, Sergey Eizner, Shuran Zhang, Thomas Thornton, Vojtech Juranek, and sean! What&#8217;s next? With the holiday season quickly approaching for many of us, you can expect that the release cadence for Debezium 2.5 to be shorter than usual. We intend to release often like always, but expect that we will likely only do one more alpha build before we began to transition into beta and release candidate builds. Our goal is to deliver Debezium 2.5.0.Final by mid-December, just in time for the holiday break. While this condensed timeline doesn&#8217;t give us lots of room, we have a lot still planned to include for Debezium 2.5. There is still lots of work to do on the MariaDB preview front, supporting GTID and multiple topology deployments. We&#8217;re also working on improving the parallelization experience with Debezium Engine, batch support for the JDBC sink connector, MongoDB improvements around large BSON documents, and much more. You can find all the details for our continued plans for Debezium 2.5 on our roadmap. Lastly, I&#8217;d like to remind everyone about the Debezium community meeting. I will be distributing details about the next meeting in the coming weeks, and I would urge folks to be on the look-out and try and stop by our virtual event in early December. It&#8217;s a great way to meet the engineers working on Debezium, ask questions in an AMA style format, and to get insights not only into what all is part of Debezium 2.5, but also what lies ahead with Debezium 2.6 and 2.7 for early next year! As always, please be sure to get in touch with us on the mailing list or Zulip chat if you have questions or feedback. Until next time, stay warm out there!]]></summary></entry><entry><title type="html">Debezium Operator Takes off to the Clouds</title><link href="https://debezium.io/blog/2023/10/19/Debezium-Operator-Takes-off-to-the-Clouds/" rel="alternate" type="text/html" title="Debezium Operator Takes off to the Clouds"/><published>2023-10-19T00:00:00+00:00</published><updated>2023-10-19T00:00:00+00:00</updated><id>https://debezium.io/blog/2023/10/19/Debezium-Operator-Takes-off-to-the-Clouds</id><content type="html" xml:base="https://debezium.io/blog/2023/10/19/Debezium-Operator-Takes-off-to-the-Clouds/"><![CDATA[<div class="paragraph"> <p>With Debezium 2.3, we introduced a preview of a brand new Debezium Operator with the aim to provide seamless deployment of Debezium Server to Kubernetes (k8s) clusters. The Debezium 2.4.0.Final release brings the next step towards the full support of this component. With this release, we are happy to announce that Debezium Operator is now available in the OperatorHub <a href="https://operatorhub.io/operator/debezium-operator">catalog</a> for Kubernetes as well as in the community operator catalog embedded in the OpenShift and OKD distributions. The operator remains in the incubation phase; however, the full support of this component is approaching fast.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="the_goal">The Goal</h2> <div class="sectionbody"> <div class="paragraph"> <p>In this article, we will demonstrate how to stream changes from a PostgreSQL database into Apache Kafka using Debezium Server deployed in Kubernetes cluster. We will also show some of the capabilities of our new k8s integration. For convenience, all code snippets and Kubernetes manifests used in the tutorial are also available in our <a href="https://github.com/debezium/debezium-examples/tree/main/operator/tutorial-postgresql-kafka">GitHub repository for examples</a>.</p> </div> </div> </div> <div class="sect1"> <h2 id="preparing_the_environment">Preparing the Environment</h2> <div class="sectionbody"> <div class="paragraph"> <p>Before deploying the operator and, consequently, Debezium Server, we need an environment to deploy into. In this section we will showcase how to provision a local Kubernetes cluster running a PostgreSQL database and the Apache Kafka broker. Note that it is not required for the database and/or the Kafka broker to run inside Kubernetes, we just chose to do so for the purpose of this demonstration.</p> </div> <div class="sect2"> <h3 id="running_a_local_kubernetes_cluster">Running a Local Kubernetes Cluster</h3> <div class="paragraph"> <p>You can skip this part if you already have a running Kubernetes cluster available; however, make sure you possess cluster-admin permissions as these are required for the operator installation. If not, then read on.</p> </div> <div class="paragraph"> <p>There are multiple tools available to run a local k8s cluster, such as <a href="https://minikube.sigs.k8s.io/docs/">Minikube</a>, <a href="https://kind.sigs.k8s.io/">Kind</a>, or <a href="https://docs.docker.com/desktop/kubernetes/">Docker Desktop</a>. In this article we will be using Kind to create a local single node cluster.</p> </div> <div class="paragraph"> <p><strong>Prerequisites</strong></p> </div> <div class="olist arabic"> <ol class="arabic"> <li> <p><a href="https://kubernetes.io/docs/tasks/tools/#kubectl">Install</a> <code>kubectl</code> distribution for your platform.</p> </li> <li> <p><a href="https://kind.sigs.k8s.io/docs/user/quick-start/#installation">Install</a> <code>Kind</code> distribution for your platform.</p> </li> </ol> </div> <div class="paragraph"> <p>Once you have both <code>kubectl</code> and <code>kind</code> installed, create a local Kubernetes cluster by executing the following:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">kind create cluster --name debezium</code></pre> </div> </div> <div class="paragraph"> <p>We can now configure the cluster context for <code>kubectl</code> and check the status of our new k8s environment by running the following command:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">$ kubectl cluster-info --context kind-debezium

Kubernetes control plane is running at https://127.0.0.1:64815
CoreDNS is running at https://127.0.0.1:64815/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</code></pre> </div> </div> <div class="paragraph"> <p>As the last step of our cluster deployment, we will create a new namespace for the required infrastructure:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">kubectl create namespace debezium</code></pre> </div> </div> </div> <div class="sect2"> <h3 id="deploying_the_infrastructure">Deploying the Infrastructure</h3> <div class="paragraph"> <p>In this section we will prepare the required infrastructure&#8201;&#8212;&#8201;the PostgreSQL database as well as an instance of the Kafka broker.</p> </div> <div class="sect3"> <h4 id="postgresql_database">PostgreSQL Database</h4> <div class="paragraph"> <p>Let&#8217;s start with deploying the PostgreSQL database by executing the command below.</p> </div> <div class="admonitionblock caution"> <table> <tr> <td class="icon"> <i class="fa icon-caution" title="Caution"></i> </td> <td class="content"> For simplicity, we are using an ephemeral volume mounts which means that any modification done to our database instance will not persist when the pod is recreated. </td> </tr> </table> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">kubectl create -f https://raw.githubusercontent.com/debezium/debezium-examples/main/operator/tutorial-postgresql-kafka/infra/001_postgresql.yml -n debezium</code></pre> </div> </div> <div class="paragraph"> <p>The yaml file fed to <code>kubectl</code> contains several Kubernetes manifests:</p> </div> <div class="listingblock"> <div class="title">001_postgresql.yml</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="yaml"><span class="key">apiVersion</span>: <span class="string"><span class="content">v1 </span></span><i class="conum" data-value="1"></i><b>(1)</b>
<span class="key">kind</span>: <span class="string"><span class="content">Secret</span></span>
<span class="key">metadata</span>:
  <span class="key">name</span>: <span class="string"><span class="content">postgresql-credentials</span></span>
<span class="key">type</span>: <span class="string"><span class="content">opaque</span></span>
<span class="key">data</span>:
  <span class="key">POSTGRES_DB</span>: <span class="string"><span class="content">ZGViZXppdW0=</span></span>
  <span class="key">POSTGRES_USER</span>: <span class="string"><span class="content">ZGViZXppdW0=</span></span>
  <span class="key">POSTGRES_PASSWORD</span>: <span class="string"><span class="content">ZGViZXppdW0=</span></span>
<span class="head"><span class="head">---</span></span>
<span class="key">kind</span>: <span class="string"><span class="content">Deployment </span></span><i class="conum" data-value="2"></i><b>(2)</b>
<span class="key">apiVersion</span>: <span class="string"><span class="content">apps/v1</span></span>
<span class="key">metadata</span>:
  <span class="key">name</span>: <span class="string"><span class="content">postgresql</span></span>
  <span class="key">labels</span>:
    <span class="key">app</span>: <span class="string"><span class="content">postgresql</span></span>
<span class="key">spec</span>:
  <span class="key">replicas</span>: <span class="string"><span class="content">1</span></span>
  <span class="key">selector</span>:
    <span class="key">matchLabels</span>:
      <span class="key">app</span>: <span class="string"><span class="content">postgresql</span></span>
      <span class="key">deployment</span>: <span class="string"><span class="content">postgresql</span></span>
  <span class="key">template</span>:
    <span class="key">metadata</span>:
      <span class="key">labels</span>:
        <span class="key">app</span>: <span class="string"><span class="content">postgresql</span></span>
        <span class="key">deployment</span>: <span class="string"><span class="content">postgresql</span></span>
    <span class="key">spec</span>:
      <span class="key">containers</span>:
        - <span class="string"><span class="content">resources: {}</span></span>
          <span class="key">name</span>: <span class="string"><span class="content">postgresql</span></span>
          <span class="key">envFrom</span>:
            - <span class="string"><span class="content">secretRef:</span><span class="content">
                name: postgresql-credentials</span></span>
          <span class="key">ports</span>:
            - <span class="string"><span class="content">containerPort: 5432</span></span>
              <span class="key">protocol</span>: <span class="string"><span class="content">TCP</span></span>
          <span class="key">imagePullPolicy</span>: <span class="string"><span class="content">IfNotPresent</span></span>
          <span class="key">livenessProbe</span>:
            <span class="key">initialDelaySeconds</span>: <span class="string"><span class="content">30</span></span>
            <span class="key">tcpSocket</span>:
              <span class="key">port</span>: <span class="string"><span class="content">5432</span></span>
            <span class="key">timeoutSeconds</span>: <span class="string"><span class="content">1</span></span>
          <span class="key">readinessProbe</span>:
            <span class="key">exec</span>:
              <span class="key">command</span>:
                - <span class="string"><span class="delimiter">&quot;</span><span class="content">/bin/sh</span><span class="delimiter">&quot;</span></span>
                - <span class="string"><span class="delimiter">&quot;</span><span class="content">-i</span><span class="delimiter">&quot;</span></span>
                - <span class="string"><span class="delimiter">&quot;</span><span class="content">-c</span><span class="delimiter">&quot;</span></span>
                - <span class="string"><span class="delimiter">&quot;</span><span class="content">PGPASSWORD=${POSTGRES_PASSWORD} /usr/bin/psql -w -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c 'SELECT 1'</span><span class="delimiter">&quot;</span></span>
            <span class="key">initialDelaySeconds</span>: <span class="string"><span class="content">5</span></span>
            <span class="key">timeoutSeconds</span>: <span class="string"><span class="content">1</span></span>
          <span class="key">terminationMessagePolicy</span>: <span class="string"><span class="content">File</span></span>
          <span class="key">terminationMessagePath</span>: <span class="string"><span class="content">/dev/termination-log</span></span>
          <span class="key">image</span>: <span class="string"><span class="content">quay.io/debezium/example-postgres:latest</span></span>
      <span class="key">restartPolicy</span>: <span class="string"><span class="content">Always</span></span>
      <span class="key">terminationGracePeriodSeconds</span>: <span class="string"><span class="content">30</span></span>
      <span class="key">dnsPolicy</span>: <span class="string"><span class="content">ClusterFirst</span></span>
  <span class="key">strategy</span>:
    <span class="key">type</span>: <span class="string"><span class="content">Recreate</span></span>
<span class="head"><span class="head">---</span></span>
<span class="key">apiVersion</span>: <span class="string"><span class="content">v1 </span></span><i class="conum" data-value="3"></i><b>(3)</b>
<span class="key">kind</span>: <span class="string"><span class="content">Service</span></span>
<span class="key">metadata</span>:
  <span class="key">name</span>: <span class="string"><span class="content">postgresql</span></span>
<span class="key">spec</span>:
  <span class="key">selector</span>:
    <span class="key">app</span>: <span class="string"><span class="content">postgresql</span></span>
    <span class="key">deployment</span>: <span class="string"><span class="content">postgresql</span></span>
  <span class="key">ports</span>:
    - <span class="string"><span class="content">name: db</span></span>
      <span class="key">port</span>: <span class="string"><span class="content">5432</span></span>
      <span class="key">targetPort</span>: <span class="string"><span class="content">5432</span></span></code></pre> </div> </div> <div class="colist arabic"> <table> <tr> <td><i class="conum" data-value="1"></i><b>1</b></td> <td>Secret providing database credentials.</td> </tr> <tr> <td><i class="conum" data-value="2"></i><b>2</b></td> <td>Database Deployment.</td> </tr> <tr> <td><i class="conum" data-value="3"></i><b>3</b></td> <td>Database Service.</td> </tr> </table> </div> <div class="paragraph"> <p>The secret is not only attached as environment variables to the database pod, but it will be also used later to reference these credentials in the connector configuration.</p> </div> <div class="paragraph"> <p>You can check that your PostgreSQL database was deployed correctly by running:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">$ kubectl get deployments -n debezium

NAME                        READY   UP-TO-DATE   AVAILABLE
postgresql                  1/1     1            1</code></pre> </div> </div> </div> <div class="sect3"> <h4 id="kafka_broker">Kafka Broker</h4> <div class="paragraph"> <p>To deploy the Kafka broker instance we will take an advantage of the <a href="https://strimzi.io/">Strimzi Operator</a>.</p> </div> <div class="paragraph"> <p>First we will deploy the Strimzi operator itself by running the command below. Please note the <code>namespace</code> parameter in the URL&#8201;&#8212;&#8201;it&#8217;s important as it ensures that Kubernetes objects required by Strimzi are created in the correct namespace.</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">kubectl create -f https://strimzi.io/install/latest?namespace=debezium</code></pre> </div> </div> <div class="paragraph"> <p>After some time you can check that your Strimzi operator is running with:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">$ kubectl get deployments -n debezium

NAME                        READY   UP-TO-DATE   AVAILABLE
strimzi-cluster-operator    1/1     1            1</code></pre> </div> </div> <div class="paragraph"> <p>With the Strimzi operator installed we can deploy an instance of the Kafka broker.</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">kubectl create -f https://raw.githubusercontent.com/debezium/debezium-examples/main/operator/tutorial-postgresql-kafka/infra/002_kafka-ephemeral.yml -n debezium</code></pre> </div> </div> <div class="paragraph"> <p>This command deploys a minimal working configuration of the Kafka broker as described in the used yaml file.</p> </div> <div class="listingblock"> <div class="title">002_kafka-ephemeral.yml</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="yaml"><span class="key">apiVersion</span>: <span class="string"><span class="content">kafka.strimzi.io/v1beta2</span></span>
<span class="key">kind</span>: <span class="string"><span class="content">Kafka</span></span>
<span class="key">metadata</span>:
  <span class="key">name</span>: <span class="string"><span class="content">dbz-kafka</span></span>
<span class="key">spec</span>:
  <span class="key">kafka</span>:
    <span class="key">version</span>: <span class="string"><span class="content">3.4.0</span></span>
    <span class="key">replicas</span>: <span class="string"><span class="content">1</span></span>
    <span class="key">listeners</span>:
      - <span class="string"><span class="content">name: plain</span></span>
        <span class="key">port</span>: <span class="string"><span class="content">9092</span></span>
        <span class="key">type</span>: <span class="string"><span class="content">internal</span></span>
        <span class="key">tls</span>: <span class="string"><span class="content">false</span></span>
      - <span class="string"><span class="content">name: tls</span></span>
        <span class="key">port</span>: <span class="string"><span class="content">9093</span></span>
        <span class="key">type</span>: <span class="string"><span class="content">internal</span></span>
        <span class="key">tls</span>: <span class="string"><span class="content">true</span></span>
    <span class="key">config</span>:
      <span class="key">offsets.topic.replication.factor</span>: <span class="string"><span class="content">1</span></span>
      <span class="key">transaction.state.log.replication.factor</span>: <span class="string"><span class="content">1</span></span>
      <span class="key">transaction.state.log.min.isr</span>: <span class="string"><span class="content">1</span></span>
      <span class="key">default.replication.factor</span>: <span class="string"><span class="content">1</span></span>
      <span class="key">min.insync.replicas</span>: <span class="string"><span class="content">1</span></span>
      <span class="key">inter.broker.protocol.version</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">3.4</span><span class="delimiter">&quot;</span></span>
    <span class="key">storage</span>:
      <span class="key">type</span>: <span class="string"><span class="content">ephemeral</span></span>
  <span class="key">zookeeper</span>:
    <span class="key">replicas</span>: <span class="string"><span class="content">1</span></span>
    <span class="key">storage</span>:
      <span class="key">type</span>: <span class="string"><span class="content">ephemeral</span></span>
  <span class="key">entityOperator</span>:
    <span class="key">topicOperator</span>: <span class="string"><span class="content">{}</span></span>
    <span class="key">userOperator</span>: <span class="string"><span class="content">{}</span></span></code></pre> </div> </div> <div class="admonitionblock caution"> <table> <tr> <td class="icon"> <i class="fa icon-caution" title="Caution"></i> </td> <td class="content"> Once again this configuration uses an ephemeral storage and only a single replica of the Kafka broker&#8201;&#8212;&#8201;a configuration not suitable for production. </td> </tr> </table> </div> <div class="paragraph"> <p>To check your Kafka deployment execute the following:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">$ kubectl get pods -n debezium

NAME                                         READY   STATUS    RESTARTS
dbz-kafka-entity-operator-844ffdcd54-cdq92   3/3     Running   0
dbz-kafka-kafka-0                            1/1     Running   0
dbz-kafka-zookeeper-0                        1/1     Running   0</code></pre> </div> </div> </div> <div class="sect3"> <h4 id="deploying_debezium_operator">Deploying Debezium Operator</h4> <div class="paragraph"> <p>With the Kubernetes environment and the required infrastructure at our disposal we can now move onto the main star of the tutorial&#8201;&#8212;&#8201;brand new Debezium Operator. There are currently two ways to deploy the operator to your Kubernetes cluster. You can either apply a set of Kubernetes manifests to your cluster (similarly to what we did with the database and the Strimzi operator), or directly from the <a href="https://operatorhub.io/">OperatorHub</a> operator catalog.</p> </div> </div> </div> <div class="sect2"> <h3 id="deploying_debezium_operator_from_operator_catalog">Deploying Debezium Operator from Operator Catalog</h3> <div class="paragraph"> <p>In this section we will use the <a href="https://olm.operatorframework.io/">Operator Lifecycle Manager</a> to create a subscription to the operator available in the <a href="https://operatorhub.io/">OperatorHub catalog</a>. As we mentioned previously, Debezium is one of the <a href="https://operatorhub.io/operator/debezium-operator">available operators</a>.</p> </div> <div class="paragraph"> <p>Among other things, using OLM also allows you to configure the scope of namespaces watched by the operator from a single namespace to the entire cluster. However, <a href="https://olm.operatorframework.io/docs/advanced-tasks/operator-scoping-with-operatorgroups/">this configuration</a> is out of the scope (pun intended!) for this tutorial. The process below will install the operator into the <code>operators</code> namespace&#8201;&#8212;&#8201;which is by default intended for cluster-wide operators.</p> </div> <div class="paragraph"> <p>First we need to install OLM itself by running the following shell commands&#8201;&#8212;&#8201;skip this if OLM is already installed in your cluster.</p> </div> <div class="paragraph"> <p>This is a one-time process and any production k8s cluster which provides access to operator catalogs would already have OLM installed.</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">curl -L https://github.com/operator-framework/operator-lifecycle-manager/releases/download/v0.25.0/install.sh -o install.sh
chmod +x install.sh
./install.sh v0.25.0</code></pre> </div> </div> <div class="paragraph"> <p>Once OLM is up and running in your cluster you can subscribe to Debezium Operator.</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">kubectl create -f https://raw.githubusercontent.com/debezium/debezium-examples/main/operator/tutorial-postgresql-kafka/infra/010_debezium-subscription.yml</code></pre> </div> </div> <div class="paragraph"> <p>Once again, we will examine the contents of the <code>subscription.yml</code> file in order to get a better understanding of what we have just done.</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">apiVersion: operators.coreos.com/v1alpha1
kind: Subscription  <i class="conum" data-value="1"></i><b>(1)</b>
metadata:
  name: debezium-operator-subscription
  namespace: operators <i class="conum" data-value="2"></i><b>(2)</b>
spec:
  installPlanApproval: Automatic
  name: debezium-operator <i class="conum" data-value="3"></i><b>(3)</b>
  source: operatorhubio-catalog <i class="conum" data-value="4"></i><b>(4)</b>
  sourceNamespace: olm <i class="conum" data-value="5"></i><b>(5)</b>
  startingCSV: debezium-operator.v2.4.0</code></pre> </div> </div> <div class="colist arabic"> <table> <tr> <td><i class="conum" data-value="1"></i><b>1</b></td> <td>The <code>Subscription</code> object instructs OLM to install a operator from the operator catalog.</td> </tr> <tr> <td><i class="conum" data-value="2"></i><b>2</b></td> <td>The target namespace for the operator installation.</td> </tr> <tr> <td><i class="conum" data-value="3"></i><b>3</b></td> <td>The name of the installed operator.</td> </tr> <tr> <td><i class="conum" data-value="4"></i><b>4</b></td> <td>The name of the operator catalog.</td> </tr> <tr> <td><i class="conum" data-value="5"></i><b>5</b></td> <td>The namespace containing the operator catalog.</td> </tr> </table> </div> <div class="paragraph"> <p>You can learn more about installing operators through OLM subscription in the <a href="https://olm.operatorframework.io/docs/tasks/install-operator-with-olm/">OLM documentation</a>.</p> </div> <div class="paragraph"> <p>You should now have Debezium Operator ready to manage Debezium Server deployments across your entire Kubernetes cluster. You can check that the operator is indeed up and running with the following command:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">$ kubectl get deployments -n operators

NAME                        READY   UP-TO-DATE   AVAILABLE
debezium-operator           1/1     1            1</code></pre> </div> </div> <div class="admonitionblock tip"> <table> <tr> <td class="icon"> <i class="fa icon-tip" title="Tip"></i> </td> <td class="content"> In the previous section, we chose to deploy the Strimzi operator by directly applying a set of k8s manifests to our cluster. However, Strimzi is also one of the operators available in the OperatorHub catalog and as such could be also installed via OLM. </td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="using_raw_kubernetes_manifests_to_deploy_debezium_operator">Using Raw Kubernetes Manifests to Deploy Debezium Operator</h3> <div class="paragraph"> <p>This options allows deployment of Debezium Operator into any Kubernetes cluster without the need for OLM.</p> </div> <div class="admonitionblock important"> <table> <tr> <td class="icon"> <i class="fa icon-important" title="Important"></i> </td> <td class="content"> Debezium Operator deployed this way will be limited to managing the Debezium Server instances <strong>only in the same namespace as the operator</strong>. </td> </tr> </table> </div> <div class="paragraph"> <p>To deploy Debezium Operator we need to execute the following commands:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">kubectl create -f https://raw.githubusercontent.com/debezium/debezium-operator/2.4/k8/debeziumservers.debezium.io-v1.yml
kubectl create -f https://raw.githubusercontent.com/debezium/debezium-operator/2.4/k8/kubernetes.yml -n debezium</code></pre> </div> </div> <div class="paragraph"> <p>The first command installs the <a href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/#customresourcedefinitions">Custom Resource Definitions</a> for the resources required by Debezium Operator, while the second execution of <code>kubectl</code> deploys the operator itself.</p> </div> <div class="paragraph"> <p>With the operator deployed, you can now move to deploying the Debezium Server instance to start streaming changes from your database.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="deploying_debezium_server_to_the_k8s_cluster">Deploying Debezium Server to the K8s Cluster</h2> <div class="sectionbody"> <div class="paragraph"> <p>With Debezium Operator deployed one way or the other, we can now deploy Debezium Server itself!</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">kubectl create -f https://raw.githubusercontent.com/debezium/debezium-examples/main/operator/tutorial-postgresql-kafka/infra/011_debezium-server-ephemeral.yml -n debezium</code></pre> </div> </div> <div class="paragraph"> <p>Once again, let&#8217;s look closely at the Kubernetes manifest we just deployed.</p> </div> <div class="listingblock"> <div class="title">011_debezium-server-ephemeral.yml</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="yaml"><span class="key">apiVersion</span>: <span class="string"><span class="content">debezium.io/v1alpha1</span></span>
<span class="key">kind</span>: <span class="string"><span class="content">DebeziumServer </span></span><i class="conum" data-value="1"></i><b>(1)</b>
<span class="key">metadata</span>:
  <span class="key">name</span>: <span class="string"><span class="content">my-debezium </span></span><i class="conum" data-value="2"></i><b>(2)</b>
<span class="key">spec</span>:
  <span class="key">image</span>: <span class="string"><span class="content">quay.io/debezium/server:2.4.0.Final </span></span><i class="conum" data-value="3"></i><b>(3)</b>
  <span class="key">quarkus</span>: <i class="conum" data-value="4"></i><b>(4)</b>
    <span class="key">config</span>:
      <span class="key">log.console.json</span>: <span class="string"><span class="content">false</span></span>
      <span class="key">kubernetes-config.enabled</span>: <span class="string"><span class="content">true</span></span>
      <span class="key">kubernetes-config.secrets</span>: <span class="string"><span class="content">postgresql-credentials</span></span>
  <span class="key">sink</span>: <i class="conum" data-value="5"></i><b>(5)</b>
    <span class="key">type</span>: <span class="string"><span class="content">kafka</span></span>
    <span class="key">config</span>:
      <span class="key">producer.bootstrap.servers</span>: <span class="string"><span class="content">dbz-kafka-kafka-bootstrap:9092</span></span>
      <span class="key">producer.key.serializer</span>: <span class="string"><span class="content">org.apache.kafka.common.serialization.StringSerializer</span></span>
      <span class="key">producer.value.serializer</span>: <span class="string"><span class="content">org.apache.kafka.common.serialization.StringSerializer</span></span>
  <span class="key">source</span>: <i class="conum" data-value="6"></i><b>(6)</b>
    <span class="key">class</span>: <span class="string"><span class="content">io.debezium.connector.postgresql.PostgresConnector</span></span>
    <span class="key">config</span>:
      <span class="key">offset.storage.file.filename</span>: <span class="string"><span class="content">/debezium/data/offsets.dat</span></span>
      <span class="key">database.history</span>: <span class="string"><span class="content">io.debezium.relational.history.FileDatabaseHistory</span></span>
      <span class="key">database.hostname</span>: <span class="string"><span class="content">postgresql</span></span>
      <span class="key">database.port</span>: <span class="string"><span class="content">5432</span></span>
      <span class="key">database.user</span>: <span class="string"><span class="content">${POSTGRES_USER}</span></span>
      <span class="key">database.password</span>: <span class="string"><span class="content">${POSTGRES_PASSWORD}</span></span>
      <span class="key">database.dbname</span>: <span class="string"><span class="content">${POSTGRES_DB}</span></span>
      <span class="key">topic.prefix</span>: <span class="string"><span class="content">inventory</span></span>
      <span class="key">schema.include.list</span>: <span class="string"><span class="content">inventory</span></span></code></pre> </div> </div> <div class="colist arabic"> <table> <tr> <td><i class="conum" data-value="1"></i><b>1</b></td> <td>The resource type monitored by Debezium Operator.</td> </tr> <tr> <td><i class="conum" data-value="2"></i><b>2</b></td> <td>The name of the deployed Debezium Server instance.</td> </tr> <tr> <td><i class="conum" data-value="3"></i><b>3</b></td> <td>An optional property specifying the container image.</td> </tr> <tr> <td><i class="conum" data-value="4"></i><b>4</b></td> <td>The Quarkus configuration used by Debezium Server.</td> </tr> <tr> <td><i class="conum" data-value="5"></i><b>5</b></td> <td>The Kafka sink configuration.</td> </tr> <tr> <td><i class="conum" data-value="6"></i><b>6</b></td> <td>The PostgreSQL source connector configuration.</td> </tr> </table> </div> <div class="paragraph"> <p>The <code>spec</code> part of the manifest will likely look familiar to anybody with previous Debezium Server experience as it is a more structured variant of the Debezium Server property configuration. In our case the <code>image</code> property is particularly redundant as it uses the default image for the installed operator version.</p> </div> <div class="paragraph"> <p>The quarkus part of the <code>spec</code> provides Debezium Server with access to the previously deployed <code>postgresql-credentials</code> secret containing the credentials to our database. You can see the <code>POSTGRES_USER</code> and other variables referenced later on in the configuration.</p> </div> <div class="paragraph"> <p>A bit more detailed description of the <code>DebeziumServer</code> custom resource can be found at <a href="https://github.com/debezium/debezium-operator/tree/2.4#debeziumserverspec-reference">GitHub</a>.</p> </div> <div class="sect2"> <h3 id="under_the_hood">Under the Hood</h3> <div class="paragraph"> <p>Debezium Operator will take care of creating everything required to run Debezium Server inside Kubernetes.</p> </div> <div class="ulist"> <ul> <li> <p>A service account used to run Debezium Server.</p> </li> <li> <p>Roles and role bindings allowing the read of config maps and secrets in the namespace where Debezium Server is being deployed.</p> </li> <li> <p>A config map containing the raw configuration for Debezium Server.</p> </li> <li> <p>The deployment itself.</p> </li> </ul> </div> </div> <div class="sect2"> <h3 id="verifying_the_deployment">Verifying the Deployment</h3> <div class="paragraph"> <p>You can check that the deployed Debezium Server instance in running with the following command:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">$ kubectl get deployments -n debezium

NAME                        READY   UP-TO-DATE   AVAILABLE
my-debezium                 1/1     1            1</code></pre> </div> </div> <div class="paragraph"> <p>With Debezium Server running, we can verify that it consumed all initial data from the database with the following command.</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">kubectl exec dbz-kafka-kafka-0 -n debezium -- /opt/kafka/bin/kafka-console-consumer.sh \
    --bootstrap-server localhost:9092 \
    --from-beginning \
    --property print.key=true \
    --topic inventory.inventory.orders</code></pre> </div> </div> </div> </div> </div> <div class="sect1"> <h2 id="the_future_and_our_request">The Future and Our Request</h2> <div class="sectionbody"> <div class="paragraph"> <p>This is it for now. Before the operator gets full support, we intend to provide more detailed documentation and the ability to configure further the deployment with various things, such as custom pull secrets to support customized Debezium Server images stored in secured registries.</p> </div> <div class="paragraph"> <p>There are further plans to improve the structure of the <code>DebeziumServer</code> resources, provide the ability to assemble tailored distribution of Debezium Server declaratively, and maybe even improve our integration with Knative eventing. We are also planning improvements to the embedded engine and, consequently, the Debezium Server, which will one day allow us to take advantage of the horizontal scaling capabilities of Kubernetes.</p> </div> <div class="sect2"> <h3 id="you_can_help_us">You can Help us!</h3> <div class="paragraph"> <p>We want to ask our wonderful Debezium community to test the operator and let us know what you like and dislike and what features you miss. This way, we can shape this component according to your needs, and together, we will bring Debezium closer to providing cloud-native CDC capabilities.</p> </div> </div> </div> </div>]]></content><author><name>Čecháček Jakub</name></author><category term="debezium"/><category term="features"/><category term="kubernetes"/><category term="operator"/><category term="debezium-server"/><summary type="html"><![CDATA[With Debezium 2.3, we introduced a preview of a brand new Debezium Operator with the aim to provide seamless deployment of Debezium Server to Kubernetes (k8s) clusters. The Debezium 2.4.0.Final release brings the next step towards the full support of this component. With this release, we are happy to announce that Debezium Operator is now available in the OperatorHub catalog for Kubernetes as well as in the community operator catalog embedded in the OpenShift and OKD distributions. The operator remains in the incubation phase; however, the full support of this component is approaching fast.]]></summary></entry><entry><title type="html">Debezium signaling and notifications - Part 3: JMX channel</title><link href="https://debezium.io/blog/2023/10/05/Debezium-JMX-signaling-and-notifications/" rel="alternate" type="text/html" title="Debezium signaling and notifications - Part 3: JMX channel"/><published>2023-10-05T10:11:11+00:00</published><updated>2023-10-05T10:11:11+00:00</updated><id>https://debezium.io/blog/2023/10/05/Debezium-JMX-signaling-and-notifications</id><content type="html" xml:base="https://debezium.io/blog/2023/10/05/Debezium-JMX-signaling-and-notifications/"><![CDATA[<div class="paragraph"> <p>Welcome to the third installment of our series on Debezium Signaling and Notifications. In this article, we continue our exploration of Debezium signaling and notifications. In particular, we will delve into how to enable and manage these features using the JMX channel.</p> </div> <div class="paragraph"> <p>We will also explore how to send signals and get notifications through the REST API leveraging Jolokia.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="interact_with_debezium_via_jmx">Interact with Debezium via JMX</h2> <div class="sectionbody"> <div class="paragraph"> <p>JMX stands for Java Management Extensions, a Java technology for managing and monitoring Java applications. It provides a standardized way to monitor application performance, configure settings, and interact with running Java applications using various management tools and clients. JMX is particularly useful for managing and monitoring complex, distributed, and enterprise-level Java applications.</p> </div> <div class="sect2"> <h3 id="enable_signaling_via_jmx_channel">Enable signaling via JMX channel</h3> <div class="paragraph"> <p>Signaling in Debezium is about triggering actions to execute operations during normal execution. As discussed in previous articles, Debezium offers different out-of-the-box signal channels. In this article, we will focus on the JMX channel.</p> </div> <div class="paragraph"> <p>To start using the JMX signal channel, we need to:</p> </div> <div class="ulist"> <ul> <li> <p>Enable JMX server on Kafka Connect service</p> </li> <li> <p>Add <code>jmx</code> to <code>signal.enabled.channels</code> connector configuration property</p> </li> <li> <p>Use a JMX client to connect to JMX server to send signal.</p> </li> </ul> </div> <div class="paragraph"> <p>Debezium exposes the signal MBean named <code>debezium.&lt;connector-type&gt;:type=management,context=signals,server=&lt;server&gt;</code>. This bean exposes <code>signal</code> operations that accept three parameters:</p> </div> <div class="ulist"> <ul> <li> <p>p0: The id of the signal.</p> </li> <li> <p>p1: The type of the signal, for example, execute-snapshot.</p> </li> <li> <p>p2: A JSON data field that contains additional information about the specified signal type.</p> </li> </ul> </div> </div> <div class="sect2"> <h3 id="enable_notifications_via_jmx_channel">Enable notifications via JMX channel</h3> <div class="paragraph"> <p>Notifications are pivotal in informing you about what happens in Debezium. Accessing notifications via the JMX channel permits you to monitor Debezium easily, for example, the progress of an incremental snapshot.</p> </div> <div class="paragraph"> <p>To start using the JMX notification channel, we need to:</p> </div> <div class="ulist"> <ul> <li> <p>Enable JMX server on Kafka Connect service</p> </li> <li> <p>Add <code>jmx</code> to <code>notification.enabled.channels</code> connector configuration property</p> </li> <li> <p>Use a JMX client to connect to JMX server to access to notifications.</p> </li> </ul> </div> <div class="paragraph"> <p>Debezium exposes the notification MBean named <code>debezium.&lt;connector-type&gt;:type=management,context=notifications,server=&lt;server&gt;</code>. This bean provides a <code>Notification</code> bean that contains a list of JMX <code>CompositeData</code> types with the following attributes:</p> </div> <table class="tableblock frame-all grid-all stretch"> <colgroup> <col style="width: 50%;"> <col style="width: 50%;"> </colgroup> <thead> <tr> <th class="tableblock halign-left valign-top">Property</th> <th class="tableblock halign-left valign-top">Description</th> </tr> </thead> <tbody> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock">id</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">A unique identifier that is assigned to the notification. For incremental snapshot notifications, the <code>id</code> is the same sent with the <code>execute-snapshot</code> signal.</p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock">aggregate_type</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">The data type of the aggregate root to which a notification is related. In domain-driven design, exported events should always refer to an aggregate.</p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock">type</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">Provides status information about the event specified in the <code>aggregate_type</code> field.</p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock">additional_data</p></td> <td class="tableblock halign-left valign-top"><p class="tableblock">A Map&lt;String,String&gt; with detailed information about the notification.</p></td> </tr> </tbody> </table> <div class="paragraph"> <p>Let&#8217;s take a moment and see how to send an incremental snapshot and to receive notifications about its progress through the JMX channel.</p> </div> </div> <div class="sect2"> <h3 id="send_incremental_snapshot_signal_through_jmx_channel">Send incremental snapshot signal through JMX channel</h3> <div class="paragraph"> <p>We will use the Debezium docker images with a PostgreSQL database for this example.</p> </div> <div class="paragraph"> <p>We can start up all the required services using the following docker compose file</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="yaml"><span class="key">version</span>: <span class="string"><span class="content">'2'</span></span>
<span class="key">services</span>:
  <span class="key">zookeeper</span>:
    <span class="key">container_name</span>: <span class="string"><span class="content">zookeeper</span></span>
    <span class="key">image</span>: <span class="string"><span class="content">quay.io/debezium/zookeeper:2.4</span></span>
    <span class="key">ports</span>:
      - <span class="string"><span class="content">2181:2181</span></span>
      - <span class="string"><span class="content">2888:2888</span></span>
      - <span class="string"><span class="content">3888:3888</span></span>
  <span class="key">kafka</span>:
    <span class="key">container_name</span>: <span class="string"><span class="content">kafka</span></span>
    <span class="key">image</span>: <span class="string"><span class="content">quay.io/debezium/kafka:2.4</span></span>
    <span class="key">ports</span>:
      - <span class="string"><span class="content">9092:9092</span></span>
    <span class="key">links</span>:
      - <span class="string"><span class="content">zookeeper</span></span>
    <span class="key">environment</span>:
      - <span class="string"><span class="content">ZOOKEEPER_CONNECT=zookeeper:2181</span></span>
  <span class="key">postgres</span>:
    <span class="key">container_name</span>: <span class="string"><span class="content">postgres</span></span>
    <span class="key">image</span>: <span class="string"><span class="content">quay.io/debezium/example-postgres:2.4</span></span>
    <span class="key">ports</span>:
      - <span class="string"><span class="content">5432:5432</span></span>
    <span class="key">environment</span>:
      - <span class="string"><span class="content">POSTGRES_USER=postgres</span></span>
      - <span class="string"><span class="content">POSTGRES_PASSWORD=postgres</span></span>
  <span class="key">connect</span>:
    <span class="key">container_name</span>: <span class="string"><span class="content">connect</span></span>
    <span class="key">image</span>: <span class="string"><span class="content">quay.io/debezium/connect:2.4</span></span>
    <span class="key">ports</span>:
      - <span class="string"><span class="content">8083:8083</span></span>
      - <span class="string"><span class="content">9012:9012 </span></span><i class="conum" data-value="1"></i><b>(1)</b>
      - <span class="string"><span class="content">8778:8778</span></span>
    <span class="key">links</span>:
      - <span class="string"><span class="content">kafka</span></span>
      - <span class="string"><span class="content">postgres</span></span>
    <span class="key">environment</span>:
      - <span class="string"><span class="content">BOOTSTRAP_SERVERS=kafka:9092</span></span>
      - <span class="string"><span class="content">GROUP_ID=1</span></span>
      - <span class="string"><span class="content">CONFIG_STORAGE_TOPIC=my_connect_configs</span></span>
      - <span class="string"><span class="content">OFFSET_STORAGE_TOPIC=my_connect_offsets</span></span>
      - <span class="string"><span class="content">STATUS_STORAGE_TOPIC=my_connect_statuses</span></span>
      - <span class="string"><span class="content">JMXPORT=9012 </span></span><i class="conum" data-value="2"></i><b>(2)</b>
      - <span class="string"><span class="content">JMXHOST=0.0.0.0 </span></span><i class="conum" data-value="3"></i><b>(3)</b>
      - <span class="string"><span class="content">ENABLE_JOLOKIA=true</span></span></code></pre> </div> </div> <div class="colist arabic"> <table> <tr> <td><i class="conum" data-value="1"></i><b>1</b></td> <td>This will expose the port 9012 used to connect to JMX Server</td> </tr> <tr> <td><i class="conum" data-value="2"></i><b>2</b></td> <td>Enables JMX and specifies the port number that will be used for JMX. The value is used to specify the JVM parameter <strong>-Dcom.sun.management.jmxremote.port=$JMX_PORT</strong>.</td> </tr> <tr> <td><i class="conum" data-value="3"></i><b>3</b></td> <td>The IP address or resolvable host name of the Docker host, which JMX uses to construct a URL sent to the JMX client. A value of localhost or 127.0.0.1 will not work. Typically, 0.0.0.0 can be used. The value is used to specify the JVM parameter <strong>-Djava.rmi.server.hostname=$JMXHOST</strong></td> </tr> </table> </div> <div class="paragraph"> <p>After saving the file as <code>debezium.yaml</code>, we can start all services with:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">docker compose -f debezium.yaml up -d</code></pre> </div> </div> <div class="paragraph"> <p>the output will be something like this</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">[+] Running 5/5
 ✔ Network deploy_default        Created                                                                                                                                                                                           0.1s
 ✔ Container deploy-zookeeper-1  Started                                                                                                                                                                                           0.1s
 ✔ Container deploy-postgres-1   Started                                                                                                                                                                                           0.1s
 ✔ Container deploy-kafka-1      Started                                                                                                                                                                                           0.1s
 ✔ Container deploy-connect-1    Started</code></pre> </div> </div> <div class="paragraph"> <p>Now we can check that all services are up and running executing the command</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">docker ps</code></pre> </div> </div> <div class="paragraph"> <p>the output should be something similar to this</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">CONTAINER ID   IMAGE                            COMMAND                  CREATED         STATUS         PORTS                                                                              NAMES
f1d49fb79dba   quay.io/debezium/connect:2.4                &quot;/docker-entrypoint.…&quot;   3 seconds ago   Up 2 seconds   0.0.0.0:8083-&gt;8083/tcp, 0.0.0.0:8778-&gt;8778/tcp, 0.0.0.0:9012-&gt;9012/tcp, 9092/tcp   deploy-connect-1
e164b2651fbf   quay.io/debezium/kafka:2.4       &quot;/docker-entrypoint.…&quot;   3 seconds ago   Up 2 seconds   0.0.0.0:9092-&gt;9092/tcp                                                             deploy-kafka-1
e61116f22f9d   quay.io/debezium/example-postgres:2.4    &quot;docker-entrypoint.s…&quot;   4 seconds ago   Up 2 seconds   0.0.0.0:5432-&gt;5432/tcp                                                             deploy-postgres-1
ccb502882928   quay.io/debezium/zookeeper:2.4   &quot;/docker-entrypoint.…&quot;   4 seconds ago   Up 2 seconds   0.0.0.0:2181-&gt;2181/tcp, 0.0.0.0:2888-&gt;2888/tcp, 0.0.0.0:3888-&gt;3888/tcp             deploy-zookeeper-1</code></pre> </div> </div> <div class="paragraph"> <p>At this point all services are up and running, so we can register the connector through the following configuration</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">inventory-connector</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">config</span><span class="delimiter">&quot;</span></span>: {
    <span class="key"><span class="delimiter">&quot;</span><span class="content">connector.class</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.connector.postgresql.PostgresConnector</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">tasks.max</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">1</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">database.hostname</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">database.port</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">5432</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">database.user</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">database.password</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">database.server.id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">184054</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">database.dbname</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">topic.prefix</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">snapshot.mode</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">NEVER</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">schema.history.internal.kafka.bootstrap.servers</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">kafka:9092</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">schema.history.internal.kafka.topic</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">schema-changes.inventory</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">signal.enabled.channels</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">source,jmx</span><span class="delimiter">&quot;</span></span>, <i class="conum" data-value="1"></i><b>(1)</b>
    <span class="key"><span class="delimiter">&quot;</span><span class="content">signal.data.collection</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">inventory.debezium_signal</span><span class="delimiter">&quot;</span></span>, <i class="conum" data-value="2"></i><b>(2)</b>
    <span class="key"><span class="delimiter">&quot;</span><span class="content">notification.enabled.channels</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">jmx</span><span class="delimiter">&quot;</span></span>
  }
}</code></pre> </div> </div> <div class="colist arabic"> <table> <tr> <td><i class="conum" data-value="1"></i><b>1</b></td> <td>This configuration enables the <strong>source</strong> and <strong>jmx</strong> channels. Even if we only want to use JMX to send signals to execute an incremental snapshot, the <strong>source</strong> signal is still required because Debezium needs to use signal table to watermark the db log for event deduplication.</td> </tr> <tr> <td><i class="conum" data-value="2"></i><b>2</b></td> <td>Set the table used for the signaling</td> </tr> </table> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> For now, don&#8217;t worry about the <strong>notification.enabled.channels</strong> property. We will delve into it later </td> </tr> </table> </div> <div class="paragraph"> <p>After saving this configuration into a file named <strong>postgres-jmx.json</strong>, we can register it.</p> </div> <div class="paragraph"> <p>To register the connector we can use <code>curl</code> to call the Kafka Connect API</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">curl -i -X POST -H &quot;Accept:application/json&quot; -H &quot;Content-Type:application/json&quot; localhost:8083/connectors/ -d '{&quot;name&quot;:&quot;inventory-connector&quot;,&quot;config&quot;:{&quot;connector.class&quot;:&quot;io.debezium.connector.postgresql.PostgresConnector&quot;,&quot;tasks.max&quot;:&quot;1&quot;,&quot;database.hostname&quot;:&quot;postgres&quot;,&quot;database.port&quot;:&quot;5432&quot;,&quot;database.user&quot;:&quot;postgres&quot;,&quot;database.password&quot;:&quot;postgres&quot;,&quot;database.server.id&quot;:&quot;184054&quot;,&quot;database.dbname&quot;:&quot;postgres&quot;,&quot;topic.prefix&quot;:&quot;dbserver1&quot;,&quot;snapshot.mode&quot;:&quot;NEVER&quot;,&quot;schema.history.internal.kafka.bootstrap.servers&quot;:&quot;kafka:9092&quot;,&quot;schema.history.internal.kafka.topic&quot;:&quot;schema-changes.inventory&quot;,&quot;signal.enabled.channels&quot;:&quot;source,jmx&quot;,&quot;signal.data.collection&quot;:&quot;inventory.debezium_signal&quot;,&quot;notification.enabled.channels&quot;:&quot;log,sink,jmx&quot;,&quot;notification.sink.topic.name&quot;:&quot;io.debezium.notification&quot;}}'</code></pre> </div> </div> <div class="paragraph"> <p>or I would suggest to use <strong><a href="https://github.com/kcctl/kcctl">kcctl</a></strong> tool to interact with Kafka Connect. It is a modern and intuitive command line client for Kafka Connect.</p> </div> <div class="paragraph"> <p>First of all we need to create a configuration context to connect with Kafka Connect</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">kcctl config set-context local --cluster http://localhost:8083</code></pre> </div> </div> <div class="paragraph"> <p>then we can register the connector running the following command</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">kcctl apply -f postgres-jmx.json</code></pre> </div> </div> <div class="paragraph"> <p>we can now get the logs of connect container</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">docker logs connect</code></pre> </div> </div> <div class="paragraph"> <p>and check that the connector is started streaming events</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="text">INFO   Postgres|dbserver1|streaming  Starting streaming   [io.debezium.pipeline.ChangeEventSourceCoordinator]</code></pre> </div> </div> </div> <div class="sect2"> <h3 id="prepare_database_for_incremental_snapshot">Prepare database for incremental snapshot</h3> <div class="paragraph"> <p>Since incremental snapshots require the <code>signal.data.collection</code> to be defined, we need to create the signal table on our postgres database.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> The data collection is not required when using MySql with GTIDs and <code>read.only</code> set to true. </td> </tr> </table> </div> <div class="paragraph"> <p>To create the signal table we need to connect to our postgres instance. We can use the <code>psql</code> client inside the postgres container.</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">docker exec -it postgres bash</code></pre> </div> </div> <div class="paragraph"> <p>Once inside the container we can connect to postgres instance with</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">psql -h localhost -d postgres -U postgres</code></pre> </div> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> password is <strong>postgres</strong> </td> </tr> </table> </div> <div class="paragraph"> <p>then we can check that there are already some tables inside the <strong>inventory</strong> schema</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">\dt inventory.*</code></pre> </div> </div> <div class="paragraph"> <p>the command should return something similar to</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">                List of relations
  Schema   |       Name       | Type  |  Owner
-----------+------------------+-------+----------
 inventory | customers        | table | postgres
 inventory | geom             | table | postgres
 inventory | orders           | table | postgres
 inventory | products         | table | postgres
 inventory | products_on_hand | table | postgres
 inventory | spatial_ref_sys  | table | postgres
(6 rows)</code></pre> </div> </div> <div class="paragraph"> <p>We need to create the signal table with the following command:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">CREATE TABLE inventory.debezium_signal (id VARCHAR(42) PRIMARY KEY, type VARCHAR(32) NOT NULL, data VARCHAR(2048) NULL);</code></pre> </div> </div> </div> <div class="sect2"> <h3 id="send_incremental_snapshot_signal">Send incremental snapshot signal</h3> <div class="paragraph"> <p>We must connect to the JMX server to send the signal through the JMX channel. We use the <a href="https://github.com/jiaqi/jmxterm">jmxterm</a> client, so after downloading it, we can run it</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">java -jar jmxterm-1.0.4-uber.jar <i class="conum" data-value="1"></i><b>(1)</b>

open localhost:9012 <i class="conum" data-value="2"></i><b>(2)</b>

beans -d debezium.postgres <i class="conum" data-value="3"></i><b>(3)</b>

run -b debezium.postgres:context=signals,server=dbserver1,type=management signal 12345 execute-snapshot {&quot;data-collections&quot;:[&quot;inventory.orders&quot;],&quot;type&quot;:&quot;INCREMENTAL&quot;} <i class="conum" data-value="4"></i><b>(4)</b></code></pre> </div> </div> <div class="colist arabic"> <table> <tr> <td><i class="conum" data-value="1"></i><b>1</b></td> <td>Run the jmxterm client</td> </tr> <tr> <td><i class="conum" data-value="2"></i><b>2</b></td> <td>Open a connection to JMX Server</td> </tr> <tr> <td><i class="conum" data-value="3"></i><b>3</b></td> <td>Search for bean under <strong>debezium.postgres</strong> domain</td> </tr> <tr> <td><i class="conum" data-value="4"></i><b>4</b></td> <td>Execute the <strong>signal</strong> operation to execute an incremental snapshot of the <strong>inventory.orders</strong> table.</td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="check_data">Check data</h3> <div class="paragraph"> <p>After that, we want to check that all the data from the <strong>orders</strong> table has been correctly captured in its corresponding Kafka topic.</p> </div> <div class="paragraph"> <p>We can enter the Kafka container with the following command:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">docker exec -it kafka bash</code></pre> </div> </div> <div class="paragraph"> <p>Once inside the container we can get all messages in the <strong>dbserver1.inventory.orders</strong> topic with the following command</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">kafka-console-consumer.sh --bootstrap-server kafka:9092 --topic dbserver1.inventory.orders --from-beginning</code></pre> </div> </div> <div class="paragraph"> <p>the output should be something like this</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">schema</span><span class="delimiter">&quot;</span></span>: {
    <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">struct</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">fields</span><span class="delimiter">&quot;</span></span>: [
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">struct</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">fields</span><span class="delimiter">&quot;</span></span>: [
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">default</span><span class="delimiter">&quot;</span></span>: <span class="integer">0</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.time.Date</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">order_date</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">purchaser</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">quantity</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">product_id</span><span class="delimiter">&quot;</span></span>
          }
        ],
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1.inventory.orders.Value</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">before</span><span class="delimiter">&quot;</span></span>
      },
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">struct</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">fields</span><span class="delimiter">&quot;</span></span>: [
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">default</span><span class="delimiter">&quot;</span></span>: <span class="integer">0</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.time.Date</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">order_date</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">purchaser</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">quantity</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">product_id</span><span class="delimiter">&quot;</span></span>
          }
        ],
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1.inventory.orders.Value</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">after</span><span class="delimiter">&quot;</span></span>
      },
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">struct</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">fields</span><span class="delimiter">&quot;</span></span>: [
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">connector</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ts_ms</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.data.Enum</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">parameters</span><span class="delimiter">&quot;</span></span>: {
              <span class="key"><span class="delimiter">&quot;</span><span class="content">allowed</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">true,last,false,incremental</span><span class="delimiter">&quot;</span></span>
            },
            <span class="key"><span class="delimiter">&quot;</span><span class="content">default</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">false</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">snapshot</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">db</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">sequence</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">schema</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">table</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">txId</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">lsn</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">xmin</span><span class="delimiter">&quot;</span></span>
          }
        ],
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.connector.postgresql.Source</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">source</span><span class="delimiter">&quot;</span></span>
      },
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">op</span><span class="delimiter">&quot;</span></span>
      },
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ts_ms</span><span class="delimiter">&quot;</span></span>
      },
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">struct</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">fields</span><span class="delimiter">&quot;</span></span>: [
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">total_order</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">data_collection_order</span><span class="delimiter">&quot;</span></span>
          }
        ],
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">event.block</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">transaction</span><span class="delimiter">&quot;</span></span>
      }
    ],
    <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1.inventory.orders.Envelope</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>
  },
  <span class="key"><span class="delimiter">&quot;</span><span class="content">payload</span><span class="delimiter">&quot;</span></span>: {
    <span class="key"><span class="delimiter">&quot;</span><span class="content">before</span><span class="delimiter">&quot;</span></span>: <span class="value">null</span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">after</span><span class="delimiter">&quot;</span></span>: {
      <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="integer">10001</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">order_date</span><span class="delimiter">&quot;</span></span>: <span class="integer">16816</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">purchaser</span><span class="delimiter">&quot;</span></span>: <span class="integer">1001</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">quantity</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">product_id</span><span class="delimiter">&quot;</span></span>: <span class="integer">102</span>
    },
    <span class="key"><span class="delimiter">&quot;</span><span class="content">source</span><span class="delimiter">&quot;</span></span>: {
      <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">2.4.0-SNAPSHOT</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">connector</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgresql</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">ts_ms</span><span class="delimiter">&quot;</span></span>: <span class="integer">1695631605203</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">snapshot</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">incremental</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">db</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">sequence</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">[</span><span class="char">\&quot;</span><span class="content">34837776</span><span class="char">\&quot;</span><span class="content">,</span><span class="char">\&quot;</span><span class="content">34837776</span><span class="char">\&quot;</span><span class="content">]</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">schema</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">inventory</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">table</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">orders</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">txId</span><span class="delimiter">&quot;</span></span>: <span class="value">null</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">lsn</span><span class="delimiter">&quot;</span></span>: <span class="value">null</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">xmin</span><span class="delimiter">&quot;</span></span>: <span class="value">null</span>
    },
    <span class="key"><span class="delimiter">&quot;</span><span class="content">op</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">r</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">ts_ms</span><span class="delimiter">&quot;</span></span>: <span class="integer">1695631605204</span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">transaction</span><span class="delimiter">&quot;</span></span>: <span class="value">null</span>
  }
}
{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">schema</span><span class="delimiter">&quot;</span></span>: {
    <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">struct</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">fields</span><span class="delimiter">&quot;</span></span>: [
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">struct</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">fields</span><span class="delimiter">&quot;</span></span>: [
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">default</span><span class="delimiter">&quot;</span></span>: <span class="integer">0</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.time.Date</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">order_date</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">purchaser</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">quantity</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">product_id</span><span class="delimiter">&quot;</span></span>
          }
        ],
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1.inventory.orders.Value</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">before</span><span class="delimiter">&quot;</span></span>
      },
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">struct</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">fields</span><span class="delimiter">&quot;</span></span>: [
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">default</span><span class="delimiter">&quot;</span></span>: <span class="integer">0</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.time.Date</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">order_date</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">purchaser</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">quantity</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">product_id</span><span class="delimiter">&quot;</span></span>
          }
        ],
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1.inventory.orders.Value</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">after</span><span class="delimiter">&quot;</span></span>
      },
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">struct</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">fields</span><span class="delimiter">&quot;</span></span>: [
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">connector</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ts_ms</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.data.Enum</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">parameters</span><span class="delimiter">&quot;</span></span>: {
              <span class="key"><span class="delimiter">&quot;</span><span class="content">allowed</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">true,last,false,incremental</span><span class="delimiter">&quot;</span></span>
            },
            <span class="key"><span class="delimiter">&quot;</span><span class="content">default</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">false</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">snapshot</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">db</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">sequence</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">schema</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">table</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">txId</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">lsn</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">xmin</span><span class="delimiter">&quot;</span></span>
          }
        ],
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.connector.postgresql.Source</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">source</span><span class="delimiter">&quot;</span></span>
      },
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">op</span><span class="delimiter">&quot;</span></span>
      },
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ts_ms</span><span class="delimiter">&quot;</span></span>
      },
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">struct</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">fields</span><span class="delimiter">&quot;</span></span>: [
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">total_order</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">data_collection_order</span><span class="delimiter">&quot;</span></span>
          }
        ],
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">event.block</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">transaction</span><span class="delimiter">&quot;</span></span>
      }
    ],
    <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1.inventory.orders.Envelope</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>
  },
  <span class="key"><span class="delimiter">&quot;</span><span class="content">payload</span><span class="delimiter">&quot;</span></span>: {
    <span class="key"><span class="delimiter">&quot;</span><span class="content">before</span><span class="delimiter">&quot;</span></span>: <span class="value">null</span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">after</span><span class="delimiter">&quot;</span></span>: {
      <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="integer">10002</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">order_date</span><span class="delimiter">&quot;</span></span>: <span class="integer">16817</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">purchaser</span><span class="delimiter">&quot;</span></span>: <span class="integer">1002</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">quantity</span><span class="delimiter">&quot;</span></span>: <span class="integer">2</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">product_id</span><span class="delimiter">&quot;</span></span>: <span class="integer">105</span>
    },
    <span class="key"><span class="delimiter">&quot;</span><span class="content">source</span><span class="delimiter">&quot;</span></span>: {
      <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">2.4.0-SNAPSHOT</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">connector</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgresql</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">ts_ms</span><span class="delimiter">&quot;</span></span>: <span class="integer">1695631605204</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">snapshot</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">incremental</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">db</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">sequence</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">[</span><span class="char">\&quot;</span><span class="content">34837776</span><span class="char">\&quot;</span><span class="content">,</span><span class="char">\&quot;</span><span class="content">34837776</span><span class="char">\&quot;</span><span class="content">]</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">schema</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">inventory</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">table</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">orders</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">txId</span><span class="delimiter">&quot;</span></span>: <span class="value">null</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">lsn</span><span class="delimiter">&quot;</span></span>: <span class="value">null</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">xmin</span><span class="delimiter">&quot;</span></span>: <span class="value">null</span>
    },
    <span class="key"><span class="delimiter">&quot;</span><span class="content">op</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">r</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">ts_ms</span><span class="delimiter">&quot;</span></span>: <span class="integer">1695631605204</span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">transaction</span><span class="delimiter">&quot;</span></span>: <span class="value">null</span>
  }
}
{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">schema</span><span class="delimiter">&quot;</span></span>: {
    <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">struct</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">fields</span><span class="delimiter">&quot;</span></span>: [
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">struct</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">fields</span><span class="delimiter">&quot;</span></span>: [
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">default</span><span class="delimiter">&quot;</span></span>: <span class="integer">0</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.time.Date</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">order_date</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">purchaser</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">quantity</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">product_id</span><span class="delimiter">&quot;</span></span>
          }
        ],
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1.inventory.orders.Value</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">before</span><span class="delimiter">&quot;</span></span>
      },
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">struct</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">fields</span><span class="delimiter">&quot;</span></span>: [
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">default</span><span class="delimiter">&quot;</span></span>: <span class="integer">0</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.time.Date</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">order_date</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">purchaser</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">quantity</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">product_id</span><span class="delimiter">&quot;</span></span>
          }
        ],
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1.inventory.orders.Value</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">after</span><span class="delimiter">&quot;</span></span>
      },
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">struct</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">fields</span><span class="delimiter">&quot;</span></span>: [
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">connector</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ts_ms</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.data.Enum</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">parameters</span><span class="delimiter">&quot;</span></span>: {
              <span class="key"><span class="delimiter">&quot;</span><span class="content">allowed</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">true,last,false,incremental</span><span class="delimiter">&quot;</span></span>
            },
            <span class="key"><span class="delimiter">&quot;</span><span class="content">default</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">false</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">snapshot</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">db</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">sequence</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">schema</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">table</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">txId</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">lsn</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">xmin</span><span class="delimiter">&quot;</span></span>
          }
        ],
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.connector.postgresql.Source</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">source</span><span class="delimiter">&quot;</span></span>
      },
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">op</span><span class="delimiter">&quot;</span></span>
      },
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ts_ms</span><span class="delimiter">&quot;</span></span>
      },
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">struct</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">fields</span><span class="delimiter">&quot;</span></span>: [
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">total_order</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">data_collection_order</span><span class="delimiter">&quot;</span></span>
          }
        ],
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">event.block</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">transaction</span><span class="delimiter">&quot;</span></span>
      }
    ],
    <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1.inventory.orders.Envelope</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>
  },
  <span class="key"><span class="delimiter">&quot;</span><span class="content">payload</span><span class="delimiter">&quot;</span></span>: {
    <span class="key"><span class="delimiter">&quot;</span><span class="content">before</span><span class="delimiter">&quot;</span></span>: <span class="value">null</span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">after</span><span class="delimiter">&quot;</span></span>: {
      <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="integer">10003</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">order_date</span><span class="delimiter">&quot;</span></span>: <span class="integer">16850</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">purchaser</span><span class="delimiter">&quot;</span></span>: <span class="integer">1002</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">quantity</span><span class="delimiter">&quot;</span></span>: <span class="integer">2</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">product_id</span><span class="delimiter">&quot;</span></span>: <span class="integer">106</span>
    },
    <span class="key"><span class="delimiter">&quot;</span><span class="content">source</span><span class="delimiter">&quot;</span></span>: {
      <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">2.4.0-SNAPSHOT</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">connector</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgresql</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">ts_ms</span><span class="delimiter">&quot;</span></span>: <span class="integer">1695631605204</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">snapshot</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">incremental</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">db</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">sequence</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">[</span><span class="char">\&quot;</span><span class="content">34837776</span><span class="char">\&quot;</span><span class="content">,</span><span class="char">\&quot;</span><span class="content">34837776</span><span class="char">\&quot;</span><span class="content">]</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">schema</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">inventory</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">table</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">orders</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">txId</span><span class="delimiter">&quot;</span></span>: <span class="value">null</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">lsn</span><span class="delimiter">&quot;</span></span>: <span class="value">null</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">xmin</span><span class="delimiter">&quot;</span></span>: <span class="value">null</span>
    },
    <span class="key"><span class="delimiter">&quot;</span><span class="content">op</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">r</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">ts_ms</span><span class="delimiter">&quot;</span></span>: <span class="integer">1695631605204</span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">transaction</span><span class="delimiter">&quot;</span></span>: <span class="value">null</span>
  }
}
{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">schema</span><span class="delimiter">&quot;</span></span>: {
    <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">struct</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">fields</span><span class="delimiter">&quot;</span></span>: [
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">struct</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">fields</span><span class="delimiter">&quot;</span></span>: [
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">default</span><span class="delimiter">&quot;</span></span>: <span class="integer">0</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.time.Date</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">order_date</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">purchaser</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">quantity</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">product_id</span><span class="delimiter">&quot;</span></span>
          }
        ],
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1.inventory.orders.Value</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">before</span><span class="delimiter">&quot;</span></span>
      },
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">struct</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">fields</span><span class="delimiter">&quot;</span></span>: [
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">default</span><span class="delimiter">&quot;</span></span>: <span class="integer">0</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.time.Date</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">order_date</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">purchaser</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">quantity</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int32</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">product_id</span><span class="delimiter">&quot;</span></span>
          }
        ],
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1.inventory.orders.Value</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">after</span><span class="delimiter">&quot;</span></span>
      },
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">struct</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">fields</span><span class="delimiter">&quot;</span></span>: [
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">connector</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ts_ms</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.data.Enum</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">parameters</span><span class="delimiter">&quot;</span></span>: {
              <span class="key"><span class="delimiter">&quot;</span><span class="content">allowed</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">true,last,false,incremental</span><span class="delimiter">&quot;</span></span>
            },
            <span class="key"><span class="delimiter">&quot;</span><span class="content">default</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">false</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">snapshot</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">db</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">sequence</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">schema</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">table</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">txId</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">lsn</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">xmin</span><span class="delimiter">&quot;</span></span>
          }
        ],
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.connector.postgresql.Source</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">source</span><span class="delimiter">&quot;</span></span>
      },
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">op</span><span class="delimiter">&quot;</span></span>
      },
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">ts_ms</span><span class="delimiter">&quot;</span></span>
      },
      {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">struct</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">fields</span><span class="delimiter">&quot;</span></span>: [
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">string</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">total_order</span><span class="delimiter">&quot;</span></span>
          },
          {
            <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">int64</span><span class="delimiter">&quot;</span></span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
            <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">data_collection_order</span><span class="delimiter">&quot;</span></span>
          }
        ],
        <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">true</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">event.block</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">transaction</span><span class="delimiter">&quot;</span></span>
      }
    ],
    <span class="key"><span class="delimiter">&quot;</span><span class="content">optional</span><span class="delimiter">&quot;</span></span>: <span class="value">false</span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1.inventory.orders.Envelope</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>
  },
  <span class="key"><span class="delimiter">&quot;</span><span class="content">payload</span><span class="delimiter">&quot;</span></span>: {
    <span class="key"><span class="delimiter">&quot;</span><span class="content">before</span><span class="delimiter">&quot;</span></span>: <span class="value">null</span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">after</span><span class="delimiter">&quot;</span></span>: {
      <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="integer">10004</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">order_date</span><span class="delimiter">&quot;</span></span>: <span class="integer">16852</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">purchaser</span><span class="delimiter">&quot;</span></span>: <span class="integer">1003</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">quantity</span><span class="delimiter">&quot;</span></span>: <span class="integer">1</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">product_id</span><span class="delimiter">&quot;</span></span>: <span class="integer">107</span>
    },
    <span class="key"><span class="delimiter">&quot;</span><span class="content">source</span><span class="delimiter">&quot;</span></span>: {
      <span class="key"><span class="delimiter">&quot;</span><span class="content">version</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">2.4.0-SNAPSHOT</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">connector</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgresql</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">ts_ms</span><span class="delimiter">&quot;</span></span>: <span class="integer">1695631605204</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">snapshot</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">incremental</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">db</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">sequence</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">[</span><span class="char">\&quot;</span><span class="content">34837776</span><span class="char">\&quot;</span><span class="content">,</span><span class="char">\&quot;</span><span class="content">34837776</span><span class="char">\&quot;</span><span class="content">]</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">schema</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">inventory</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">table</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">orders</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">txId</span><span class="delimiter">&quot;</span></span>: <span class="value">null</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">lsn</span><span class="delimiter">&quot;</span></span>: <span class="value">null</span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">xmin</span><span class="delimiter">&quot;</span></span>: <span class="value">null</span>
    },
    <span class="key"><span class="delimiter">&quot;</span><span class="content">op</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">r</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">ts_ms</span><span class="delimiter">&quot;</span></span>: <span class="integer">1695631605204</span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">transaction</span><span class="delimiter">&quot;</span></span>: <span class="value">null</span>
  }
}</code></pre> </div> </div> <div class="paragraph"> <p>That&#8217;s all! We have sent an incremental snapshot signal using the JMX channel.</p> </div> </div> <div class="sect2"> <h3 id="monitor_incremental_snapshot_progress_through_jmx_channel">Monitor incremental snapshot progress through JMX channel</h3> <div class="paragraph"> <p>Since we have executed an incremental snapshot, we can now read the notifications produced by Debezium via the JMX channel.</p> </div> <div class="paragraph"> <p>We used the following configuration to register our connector</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">inventory-connector</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">config</span><span class="delimiter">&quot;</span></span>: {
    <span class="key"><span class="delimiter">&quot;</span><span class="content">connector.class</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.connector.postgresql.PostgresConnector</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">tasks.max</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">1</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">database.hostname</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">database.port</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">5432</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">database.user</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">database.password</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">database.server.id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">184054</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">database.dbname</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">topic.prefix</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">snapshot.mode</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">NEVER</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">schema.history.internal.kafka.bootstrap.servers</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">kafka:9092</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">schema.history.internal.kafka.topic</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">schema-changes.inventory</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">signal.enabled.channels</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">source,jmx</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">signal.data.collection</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">inventory.debezium_signal</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">notification.enabled.channels</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">jmx</span><span class="delimiter">&quot;</span></span> <i class="conum" data-value="1"></i><b>(1)</b>
  }
}</code></pre> </div> </div> <div class="colist arabic"> <table> <tr> <td><i class="conum" data-value="1"></i><b>1</b></td> <td>This configuration enables <strong>jmx</strong> notification channel.</td> </tr> </table> </div> <div class="paragraph"> <p>To access the notifications, we need to connect again to the JMX server. So as we did for the signal, we will use <code>jmxterm</code></p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">java -jar jmxterm-1.0.4-uber.jar <i class="conum" data-value="1"></i><b>(1)</b>

open localhost:9012 <i class="conum" data-value="2"></i><b>(2)</b>

beans -d debezium.postgres <i class="conum" data-value="3"></i><b>(3)</b>

get -b debezium.postgres:context=notifications,server=dbserver1,type=management Notifications <i class="conum" data-value="4"></i><b>(4)</b></code></pre> </div> </div> <div class="colist arabic"> <table> <tr> <td><i class="conum" data-value="1"></i><b>1</b></td> <td>Run the jmxterm client</td> </tr> <tr> <td><i class="conum" data-value="2"></i><b>2</b></td> <td>Open a connection to JMX Server</td> </tr> <tr> <td><i class="conum" data-value="3"></i><b>3</b></td> <td>Search for bean under <strong>debezium.postgres</strong> domain</td> </tr> <tr> <td><i class="conum" data-value="4"></i><b>4</b></td> <td>Get notifications.</td> </tr> </table> </div> <div class="paragraph"> <p>you should expect the following output</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="text">#mbean = debezium.postgres:context=notifications,server=dbserver1,type=management:
Notifications = [ {
  additionalData = {
    ( connector_name ) = {
      key = connector_name;
      value = dbserver1;
     };
   };
  aggregateType = Initial Snapshot;
  id = b20bec8d-f21f-4d74-bb75-cdd7f4c7d933;
  type = SKIPPED;
 }, <i class="conum" data-value="1"></i><b>(1)</b>
{
  additionalData = {
    ( connector_name ) = {
      key = connector_name;
      value = dbserver1;
     };
    ( data_collections ) = {
      key = data_collections;
      value = inventory.orders;
     };
   };
  aggregateType = Incremental Snapshot;
  id = 12345;
  type = STARTED;
 }, <i class="conum" data-value="2"></i><b>(2)</b>
{
  additionalData = {
    ( current_collection_in_progress ) = {
      key = current_collection_in_progress;
      value = inventory.orders;
     };
    ( connector_name ) = {
      key = connector_name;
      value = dbserver1;
     };
    ( maximum_key ) = {
      key = maximum_key;
      value = 10004;
     };
    ( last_processed_key ) = {
      key = last_processed_key;
      value = 10004;
     };
    ( data_collections ) = {
      key = data_collections;
      value = inventory.orders;
     };
   };
  aggregateType = Incremental Snapshot;
  id = 12345;
  type = IN_PROGRESS;
 }, <i class="conum" data-value="3"></i><b>(3)</b>
{
  additionalData = {
    ( scanned_collection ) = {
      key = scanned_collection;
      value = inventory.orders;
     };
    ( connector_name ) = {
      key = connector_name;
      value = dbserver1;
     };
    ( total_rows_scanned ) = {
      key = total_rows_scanned;
      value = 4;
     };
    ( status ) = {
      key = status;
      value = SUCCEEDED;
     };
    ( data_collections ) = {
      key = data_collections;
      value = inventory.orders;
     };
   };
  aggregateType = Incremental Snapshot;
  id = 12345;
  type = TABLE_SCAN_COMPLETED;
 }, <i class="conum" data-value="4"></i><b>(4)</b>
{
  additionalData = {
    ( connector_name ) = {
      key = connector_name;
      value = dbserver1;
     };
   };
  aggregateType = Incremental Snapshot;
  id = 12345;
  type = COMPLETED;
 } <i class="conum" data-value="5"></i><b>(5)</b>
];</code></pre> </div> </div> <div class="colist arabic"> <table> <tr> <td><i class="conum" data-value="1"></i><b>1</b></td> <td>This is a notification from the initial snapshot with the status <code>SKIPPED</code> since our connector is configured with <code>"snapshot.mode": "NEVER"</code></td> </tr> <tr> <td><i class="conum" data-value="2"></i><b>2</b></td> <td>This is the notification about the incremental snapshot start</td> </tr> <tr> <td><i class="conum" data-value="3"></i><b>3</b></td> <td>This notification tells that the table <code>inventory.orders</code> snapshot is in progress and provides useful information about the last processed and max keys. In this example, we have only one <code>in progress</code> notification, but depending on your table size and <code>snapshot.fetch.size</code>, you can get more.</td> </tr> <tr> <td><i class="conum" data-value="4"></i><b>4</b></td> <td>This notification tells that the snapshot for a specific table has been completed and provides information about the total rows processed.</td> </tr> <tr> <td><i class="conum" data-value="5"></i><b>5</b></td> <td>This is the last notification that we have for this example and tells that the entire incremental snapshot progress has completed.</td> </tr> </table> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> JMX also offers the possibility to produce its own notifications. Debezium will also produce these notifications. Depending on your JMX client, you can subscribe to these notifications, so you can immediately receive them without polling the <strong>Notification</strong> bean. </td> </tr> </table> </div> </div> </div> </div> <div class="sect1"> <h2 id="leveraging_jolokia_for_rest_based_signaling_and_notifications">Leveraging Jolokia for REST-based Signaling and Notifications</h2> <div class="sectionbody"> <div class="paragraph"> <p>Jolokia is a powerful tool that allows you to interact with a JMX server and expose it via REST. Using it, we can interact with Debezium via REST, leveraging the signaling and notifications JMX beans. In this way, you can send signals and receive notifications seamlessly and with a more familiar REST api.</p> </div> <div class="paragraph"> <p>To enable Jolokia we need to enable its agent on our Kafka Connect container.</p> </div> <div class="paragraph"> <p>This is the docker compose file used in our example</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="yaml"><span class="key">version</span>: <span class="string"><span class="content">'2'</span></span>
<span class="key">services</span>:
  <span class="key">zookeeper</span>:
    <span class="key">image</span>: <span class="string"><span class="content">quay.io/debezium/zookeeper:2.4</span></span>
    <span class="key">ports</span>:
      - <span class="string"><span class="content">2181:2181</span></span>
      - <span class="string"><span class="content">2888:2888</span></span>
      - <span class="string"><span class="content">3888:3888</span></span>
  <span class="key">kafka</span>:
    <span class="key">image</span>: <span class="string"><span class="content">quay.io/debezium/kafka:2.4</span></span>
    <span class="key">ports</span>:
      - <span class="string"><span class="content">9092:9092</span></span>
    <span class="key">links</span>:
      - <span class="string"><span class="content">zookeeper</span></span>
    <span class="key">environment</span>:
      - <span class="string"><span class="content">ZOOKEEPER_CONNECT=zookeeper:2181</span></span>
  <span class="key">postgres</span>:
    <span class="key">image</span>: <span class="string"><span class="content">quay.io/debezium/example-postgres:2.4</span></span>
    <span class="key">ports</span>:
      - <span class="string"><span class="content">5432:5432</span></span>
    <span class="key">environment</span>:
      - <span class="string"><span class="content">POSTGRES_USER=postgres</span></span>
      - <span class="string"><span class="content">POSTGRES_PASSWORD=postgres</span></span>
  <span class="key">connect</span>:
    <span class="key">image</span>: <span class="string"><span class="content">quay.io/debezium/connect:2.4</span></span>
    <span class="key">ports</span>:
      - <span class="string"><span class="content">8083:8083</span></span>
      - <span class="string"><span class="content">9012:9012</span></span>
      - <span class="string"><span class="content">8778:8778 </span></span><i class="conum" data-value="1"></i><b>(1)</b>
    <span class="key">links</span>:
      - <span class="string"><span class="content">kafka</span></span>
      - <span class="string"><span class="content">postgres</span></span>
    <span class="key">environment</span>:
      - <span class="string"><span class="content">BOOTSTRAP_SERVERS=kafka:9092</span></span>
      - <span class="string"><span class="content">GROUP_ID=1</span></span>
      - <span class="string"><span class="content">CONFIG_STORAGE_TOPIC=my_connect_configs</span></span>
      - <span class="string"><span class="content">OFFSET_STORAGE_TOPIC=my_connect_offsets</span></span>
      - <span class="string"><span class="content">STATUS_STORAGE_TOPIC=my_connect_statuses</span></span>
      - <span class="string"><span class="content">JMXPORT=9012</span></span>
      - <span class="string"><span class="content">JMXHOST=0.0.0.0</span></span>
      - <span class="string"><span class="content">ENABLE_JOLOKIA=true </span></span><i class="conum" data-value="2"></i><b>(2)</b></code></pre> </div> </div> <div class="colist arabic"> <table> <tr> <td><i class="conum" data-value="1"></i><b>1</b></td> <td>Will expose the port used by Jolokia agent</td> </tr> <tr> <td><i class="conum" data-value="2"></i><b>2</b></td> <td>This will enable the Jolokia agent already shipped in our test images. If you want to enable the agent on your installation please check the <a href="https://jolokia.org/reference/html/">official documentation</a></td> </tr> </table> </div> <div class="sect2"> <h3 id="sending_signals_via_jolokia">Sending Signals via Jolokia</h3> <div class="paragraph"> <p>To send signals via Jolokia, we can send an HTTP POST request to the Jolokia endpoint with the desired signal and parameters.</p> </div> <div class="paragraph"> <p>To continue with our incremental snapshot example, to trigger it you can run the following command</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">curl -X POST 'http://localhost:8778/jolokia/exec' -d '{&quot;type&quot;:&quot;EXEC&quot;,&quot;mbean&quot;:&quot;debezium.postgres:context=signals,server=dbserver1,type=management&quot;,&quot;operation&quot;:&quot;signal&quot;,&quot;arguments&quot;:[&quot;12345&quot;,&quot;execute-snapshot&quot;,&quot;{\&quot;data-collections\&quot;: [\&quot;inventory.products\&quot;], \&quot;type\&quot;: \&quot;INCREMENTAL\&quot;}&quot;]}' | jq</code></pre> </div> </div> <div class="paragraph"> <p>this should be the output</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">request</span><span class="delimiter">&quot;</span></span>: {
    <span class="key"><span class="delimiter">&quot;</span><span class="content">mbean</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">debezium.postgres:context=signals,server=dbserver1,type=management</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">arguments</span><span class="delimiter">&quot;</span></span>: [
      <span class="string"><span class="delimiter">&quot;</span><span class="content">12345</span><span class="delimiter">&quot;</span></span>,
      <span class="string"><span class="delimiter">&quot;</span><span class="content">execute-snapshot</span><span class="delimiter">&quot;</span></span>,
      <span class="string"><span class="delimiter">&quot;</span><span class="content">{</span><span class="char">\&quot;</span><span class="content">data-collections</span><span class="char">\&quot;</span><span class="content">: [</span><span class="char">\&quot;</span><span class="content">inventory.products</span><span class="char">\&quot;</span><span class="content">], </span><span class="char">\&quot;</span><span class="content">type</span><span class="char">\&quot;</span><span class="content">: </span><span class="char">\&quot;</span><span class="content">INCREMENTAL</span><span class="char">\&quot;</span><span class="content">}</span><span class="delimiter">&quot;</span></span>
    ],
    <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">exec</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">operation</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">signal</span><span class="delimiter">&quot;</span></span>
  },
  <span class="key"><span class="delimiter">&quot;</span><span class="content">value</span><span class="delimiter">&quot;</span></span>: <span class="value">null</span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">timestamp</span><span class="delimiter">&quot;</span></span>: <span class="integer">1695651387</span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">status</span><span class="delimiter">&quot;</span></span>: <span class="integer">200</span>
}</code></pre> </div> </div> </div> </div> </div> <div class="sect1"> <h2 id="receiving_notifications_via_jolokia">Receiving Notifications via Jolokia</h2> <div class="sectionbody"> <div class="paragraph"> <p>Jolokia also allows you to fetch notifications from Debezium using HTTP GET requests.</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">curl -X GET 'http://localhost:8778/jolokia/read/debezium.postgres:context=notifications,server=dbserver1,type=management/Notifications' | jq</code></pre> </div> </div> <div class="paragraph"> <p>this should be the output</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">request</span><span class="delimiter">&quot;</span></span>: {
    <span class="key"><span class="delimiter">&quot;</span><span class="content">mbean</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">debezium.postgres:context=notifications,server=dbserver1,type=management</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">attribute</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Notifications</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">read</span><span class="delimiter">&quot;</span></span>
  },
  <span class="key"><span class="delimiter">&quot;</span><span class="content">value</span><span class="delimiter">&quot;</span></span>: [
    {
      <span class="key"><span class="delimiter">&quot;</span><span class="content">additionalData</span><span class="delimiter">&quot;</span></span>: {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">connector_name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1</span><span class="delimiter">&quot;</span></span>
      },
      <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">b20bec8d-f21f-4d74-bb75-cdd7f4c7d933</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">SKIPPED</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">aggregateType</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Initial Snapshot</span><span class="delimiter">&quot;</span></span>
    },
    {
      <span class="key"><span class="delimiter">&quot;</span><span class="content">additionalData</span><span class="delimiter">&quot;</span></span>: {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">connector_name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">data_collections</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">inventory.orders</span><span class="delimiter">&quot;</span></span>
      },
      <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">12345</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">STARTED</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">aggregateType</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Incremental Snapshot</span><span class="delimiter">&quot;</span></span>
    },
    {
      <span class="key"><span class="delimiter">&quot;</span><span class="content">additionalData</span><span class="delimiter">&quot;</span></span>: {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">last_processed_key</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">10004</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">current_collection_in_progress</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">inventory.orders</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">connector_name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">maximum_key</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">10004</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">data_collections</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">inventory.orders</span><span class="delimiter">&quot;</span></span>
      },
      <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">12345</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">IN_PROGRESS</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">aggregateType</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Incremental Snapshot</span><span class="delimiter">&quot;</span></span>
    },
    {
      <span class="key"><span class="delimiter">&quot;</span><span class="content">additionalData</span><span class="delimiter">&quot;</span></span>: {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">scanned_collection</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">inventory.orders</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">connector_name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">total_rows_scanned</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">4</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">status</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">SUCCEEDED</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">data_collections</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">inventory.orders</span><span class="delimiter">&quot;</span></span>
      },
      <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">12345</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">TABLE_SCAN_COMPLETED</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">aggregateType</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Incremental Snapshot</span><span class="delimiter">&quot;</span></span>
    },
    {
      <span class="key"><span class="delimiter">&quot;</span><span class="content">additionalData</span><span class="delimiter">&quot;</span></span>: {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">connector_name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1</span><span class="delimiter">&quot;</span></span>
      },
      <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">12345</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">COMPLETED</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">aggregateType</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Incremental Snapshot</span><span class="delimiter">&quot;</span></span>
    },
    {
      <span class="key"><span class="delimiter">&quot;</span><span class="content">additionalData</span><span class="delimiter">&quot;</span></span>: {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">connector_name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">data_collections</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">inventory.products</span><span class="delimiter">&quot;</span></span>
      },
      <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">12345</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">STARTED</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">aggregateType</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Incremental Snapshot</span><span class="delimiter">&quot;</span></span>
    },
    {
      <span class="key"><span class="delimiter">&quot;</span><span class="content">additionalData</span><span class="delimiter">&quot;</span></span>: {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">last_processed_key</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">109</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">current_collection_in_progress</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">inventory.products</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">connector_name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">maximum_key</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">109</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">data_collections</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">inventory.products</span><span class="delimiter">&quot;</span></span>
      },
      <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">12345</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">IN_PROGRESS</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">aggregateType</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Incremental Snapshot</span><span class="delimiter">&quot;</span></span>
    },
    {
      <span class="key"><span class="delimiter">&quot;</span><span class="content">additionalData</span><span class="delimiter">&quot;</span></span>: {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">scanned_collection</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">inventory.products</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">connector_name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">total_rows_scanned</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">9</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">status</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">SUCCEEDED</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">data_collections</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">inventory.products</span><span class="delimiter">&quot;</span></span>
      },
      <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">12345</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">TABLE_SCAN_COMPLETED</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">aggregateType</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Incremental Snapshot</span><span class="delimiter">&quot;</span></span>
    },
    {
      <span class="key"><span class="delimiter">&quot;</span><span class="content">additionalData</span><span class="delimiter">&quot;</span></span>: {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">connector_name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">dbserver1</span><span class="delimiter">&quot;</span></span>
      },
      <span class="key"><span class="delimiter">&quot;</span><span class="content">id</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">12345</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">COMPLETED</span><span class="delimiter">&quot;</span></span>,
      <span class="key"><span class="delimiter">&quot;</span><span class="content">aggregateType</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">Incremental Snapshot</span><span class="delimiter">&quot;</span></span>
    }
  ],
  <span class="key"><span class="delimiter">&quot;</span><span class="content">timestamp</span><span class="delimiter">&quot;</span></span>: <span class="integer">1695652278</span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">status</span><span class="delimiter">&quot;</span></span>: <span class="integer">200</span>
}</code></pre> </div> </div> <div class="paragraph"> <p>You can see that now we have also the notification about <code>inventory.products</code> table incremental snapshot that we have sent through REST api</p> </div> </div> </div> <div class="sect1"> <h2 id="conclusion">Conclusion</h2> <div class="sectionbody"> <div class="paragraph"> <p>In this third installment of our series on Debezium Signaling and Notifications, we&#8217;ve learned how to enable and manage both signaling and notifications using JMX and Jolokia. Signaling lets you dynamically control Debezium&#8217;s behavior, while notifications keep you informed about critical events. By harnessing these capabilities along with Jolokia, you can effectively manage, monitor, and interact with your data streaming workflows, ensuring that you always control Debezium.</p> </div> </div> </div>]]></content><author><name>Fiore Mario Vitale</name></author><category term="debezium"/><category term="features"/><category term="notifications"/><category term="signaling"/><category term="integration"/><summary type="html"><![CDATA[Welcome to the third installment of our series on Debezium Signaling and Notifications. In this article, we continue our exploration of Debezium signaling and notifications. In particular, we will delve into how to enable and manage these features using the JMX channel. We will also explore how to send signals and get notifications through the REST API leveraging Jolokia.]]></summary></entry><entry><title type="html">Debezium 2.4.0.Final Released</title><link href="https://debezium.io/blog/2023/10/03/debezium-2-4-final-released/" rel="alternate" type="text/html" title="Debezium 2.4.0.Final Released"/><published>2023-10-03T00:00:00+00:00</published><updated>2023-10-03T00:00:00+00:00</updated><id>https://debezium.io/blog/2023/10/03/debezium-2-4-final-released</id><content type="html" xml:base="https://debezium.io/blog/2023/10/03/debezium-2-4-final-released/"><![CDATA[<div class="paragraph"> <p>As the summer months wind down and we enter autumn with cooler temperatures, the team has diligently prepared the next major milestone of Debezium. It&#8217;s my pleasure to announce the immediate release of the next minor version, Debezium <strong>2.4.0.Final</strong>.</p> </div> <div class="paragraph"> <p>As the team begins the journey toward the next development iteration, let&#8217;s take a moment and review all the new features, changes, and improvements that are included in Debezium 2.4, which includes <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(2.4.0.Alpha1%2C%202.4.0.Alpha2%2C%202.4.0.Beta1%2C%202.4.0.Beta2%2C%202.4.0.CR1%2C%202.4.0.Final)">231 issues</a> resolved by 68 unique contributors.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking_changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>While we try to avoid any potential breaking changes between minor releases, such changes are sometimes inevitable. The upgrade to Debezium 2.4 includes a total of 10 unique breaking changes:</p> </div> <div class="dlist"> <dl> <dt class="hdlist1">MySQL</dt> <dd> <div class="ulist"> <ul> <li> <p>The precision for <code>BIGINT</code> data types was not appropriately set when configuring the connector with <code>bigint.unsigned.handling.mode</code> as <code>precise</code>. If you use a schema registry with the above configuration settings, this release can lead to schema incompatibilities and may require registry adjustments (<a href="https://issues.redhat.com/browse/DBZ-6714">DBZ-6714</a>).</p> </li> </ul> </div> </dd> <dt class="hdlist1">MongoDB</dt> <dd> <div class="ulist"> <ul> <li> <p>The configuration properties <code>mongodb.hosts</code> and <code>mongodb.members.autodiscover</code> have been removed. Connector configurations should be updated with <a href="https://debezium.io/documentation/reference/2.4/connectors/mongodb.html#mongodb-property-mongodb-connection-string">connection strings</a> instead (<a href="https://issues.redhat.com/browse/DBZ-6892">DBZ-6892</a>).</p> </li> <li> <p>Connections were established, preferring the secondary, which made it impossible for users to use the primary. The connector will now use the <a href="https://debezium.io/documentation/reference/2.4/connectors/mongodb.html#mongodb-property-mongodb-connection-string">connection string</a> to influence where to connect (<a href="https://issues.redhat.com/browse/DBZ-6521">DBZ-6521</a>).</p> </li> </ul> </div> </dd> <dt class="hdlist1">Oracle</dt> <dd> <div class="ulist"> <ul> <li> <p>The default value for <code>snapshot.fetch.size</code> and <code>query.fetch.size</code> configuration properties were changed from <code>2000</code> to <code>10000</code> as a way to improve the performance of the connector&#8217;s default configuration (<a href="https://issues.redhat.com/browse/DBZ-6729">DBZ-6729</a>).</p> </li> <li> <p>System change number (SCN) JMX metrics were exposed as <code>String</code> based data types and are now <code>BigInteger</code> data types, enabling exportability to observability stacks (<a href="https://issues.redhat.com/browse/DBZ-6798">DBZ-6798</a>).</p> </li> </ul> </div> </dd> <dt class="hdlist1">Vitess</dt> <dd> <div class="ulist"> <ul> <li> <p>The change event structure has been altered, the <code>source</code> information block now includes a new field that identifies the shard the event originated from (<a href="https://issues.redhat.com/browse/DBZ-6617">DBZ-6617</a>).</p> </li> <li> <p>Collations that ended with <code>_bin</code> were inferred as <code>VARBINARY</code> data types, emitting these as binary data; however, for character-based columns this was incorrect. If you are using these collation types and schema registry, this can lead to schema incompatibilities and may require some registry adjustments (<a href="https://issues.redhat.com/browse/DBZ-6748">DBZ-6748</a>).</p> </li> <li> <p>Schema changes were previously applied across all shards rather than treating each shard independently. If you are using the <code>DefaultTopicNamingStrategy</code> or a derivative, you should switch to <code>TableTopicNamingStrategy</code> to preserve the same topic naming used previously. (<a href="https://issues.redhat.com/browse/DBZ-6775">DBZ-6775</a>)</p> </li> <li> <p>Only a subset of errors were being retried by default. This behavior has changed and now all errors are retried by default and only a subset of pre-defined error conditions are not (<a href="https://issues.redhat.com/browse/DBZ-6944">DBZ-6944</a>).</p> </li> </ul> </div> </dd> <dt class="hdlist1">Debezium Server</dt> <dd> <div class="ulist"> <ul> <li> <p>Debezium Server now includes all variants of the Cassandra connector with the addition of a new environment variable <code>EXTRA_CONNECTOR</code> to control which specific Cassandra connector to use. This variable can be set to <code>dse</code>, <code>cassandra-3</code>, or <code>cassandra-4</code> (<a href="https://issues.redhat.com/browse/DBZ-6638">DBZ-6638</a>).</p> </li> </ul> </div> </dd> </dl> </div> </div> </div> <div class="sect1"> <h2 id="improvements_and_changes">Improvements and changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>In this section, we&#8217;re going to take a tour of all the new features and improvements in Debezium 2.4.</p> </div> <div class="sect2"> <h3 id="core">Core</h3> <div class="sect3"> <h4 id="ad_hoc_blocking_snapshots">Ad-hoc Blocking Snapshots</h4> <div class="paragraph"> <p>Incremental snapshots were first introduced nearly two years ago in Debezium 1.6 and has remained quite popular in the community to deal with a variety of re-snapshot use cases. However, there are some use cases where the intertwined nature of read events with create, updates, and deletes may be less than ideal or even not supported by some consumer applications. For those use cases, Debezium 2.4 introduces ad-hoc blocking snapshots.</p> </div> <div class="paragraph"> <p>An ad-hoc blocking snapshot works in a similar way that ad-hoc incremental snapshots work; however, with one major difference. The snapshot is still triggered by sending a signal to Debezium; however when the signal is processed by the connector, the key difference is that streaming is put on hold while the snapshot process runs. This means you won&#8217;t be receiving a series of read events interwoven with create, update, or delete events. This also means that we&#8217;ll be processing the snapshot in a similar way to traditional snapshots, so the throughput should generally be higher than incremental snapshots.</p> </div> <div class="admonitionblock important"> <table> <tr> <td class="icon"> <i class="fa icon-important" title="Important"></i> </td> <td class="content"> <div class="paragraph"> <p>Be aware that ad-hoc blocking snapshots puts the reading of the transaction logs on hold while the snapshot is performed. This means the same requirements that a traditional snapshot has on transaction log availability also applies when using this type of ad-hoc snapshot mode. When streaming resumes, if a transaction log that is needed has since been removed, the connector will raise an error and stop.</p> </div> </td> </tr> </table> </div> <div class="paragraph"> <p>The signal to initiate an ad-hoc blocking snapshot is very similar to its ad-hoc incremental snapshot counterpart. The following signal below shows the payload to snapshot a specific table with a condition, but this uses the new blocking snapshot rather than the incremental snapshot:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">execute-snapshot</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">data</span><span class="delimiter">&quot;</span></span>: {
    <span class="key"><span class="delimiter">&quot;</span><span class="content">data-collections</span><span class="delimiter">&quot;</span></span>: [<span class="string"><span class="delimiter">&quot;</span><span class="content">public.my_table</span><span class="delimiter">&quot;</span></span>],
    <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">BLOCKING</span><span class="delimiter">&quot;</span></span>, <i class="conum" data-value="1"></i><b>(1)</b>
    <span class="key"><span class="delimiter">&quot;</span><span class="content">additional-condition</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">last_update_date &gt;= '2023-01-01'</span><span class="delimiter">&quot;</span></span>
  }
}</code></pre> </div> </div> <div class="colist arabic"> <table> <tr> <td><i class="conum" data-value="1"></i><b>1</b></td> <td>The use of <code>BLOCKING</code> rather than <code>INCREMENTAL</code> differentiates the two ad-hoc snapshot modes.</td> </tr> </table> </div> </div> <div class="sect3"> <h4 id="error_handling">Error Handling</h4> <div class="paragraph"> <p>Some Debezium connectors previously used a connector property, <code>errors.max.retries</code>. This property controlled how often a Debezium connector failure exception would be explicitly wrapped in a <code>RetriableException</code> but the connector threw the raw exception up to the runtime. While this may sound similar to Kafka Connect&#8217;s <code>errors.retry.timeout</code>, this effectively gave users a common way to deal with retries across multiple Debezium runtimes, including Kafka Connect, Debezium Server, and Debezium Embedded.</p> </div> </div> <div class="sect3"> <h4 id="initial_snapshot_notifications">Initial snapshot notifications</h4> <div class="paragraph"> <p>Debezium&#8217;s new notification subsystem provides an easy way to integrate third-party tools and applications with Debezium to gain insight into the ongoing change data capture process, above and beyond the traditional JMX approach. In 2.4, the notification subsystem now includes the ability to notify you about the status of the ongoing initial snapshot (<a href="https://issues.redhat.com/browse?DBZ-6416">DBZ-6416</a>).</p> </div> <div class="paragraph"> <p>Initial snapshot notifications are emitted with an <code>aggregatetType</code> of <code>Initial Snapshot</code> and contain a <code>type</code> field that exposes the current status of the snapshot. The possible values include: <code>STARTED</code>, <code>ABORTED</code>, <code>PAUSED</code>, <code>RESUMED</code>, <code>IN_PROGRESS</code>, <code>TABLE_SCAN_COMPLETED</code>, and <code>COMPLETED</code>.</p> </div> </div> <div class="sect3"> <h4 id="jmx_notifications_with_json_user_data">JMX notifications with JSON user data</h4> <div class="paragraph"> <p>Debezium 2.4 changes how JMX notifications provide user data. In previous versions, the notification used a <code>toString()</code> style implementation, which while it worked, it doesn&#8217;t provide any good forward or backward compatibility semantics unlike other more structured formats such as JSON.</p> </div> <div class="paragraph"> <p>Moving forward, JMX notification&#8217;s user data will be provided as JSON, making it easier and more reliable to parse and to support extensibility in the future with less concerns about backward compatibility. We hope this makes this feature easier to use moving forward and welcome any additional feedback.</p> </div> </div> <div class="sect3"> <h4 id="notifications">Notifications</h4> <div class="paragraph"> <p>All notification events will now include a timestamp (<a href="https://issues.redhat.com/browse/DBZ-6793">DBZ-6793</a>).</p> </div> </div> <div class="sect3"> <h4 id="source_to_sink_column_name_propagation">Source-to-sink column name propagation</h4> <div class="paragraph"> <p>Normally column names map directly to field names and vice versa when consumed by sink connectors such as a JDBC connector. However, there are situations where the serialization technology, such as Avro, has very specific rules about field naming conventions. When a column&#8217;s name in a database table conflicts with the serialization rule&#8217;s naming conventions, Debezium will rename the field in the event so that it adheres to the serialization&#8217;s rules. This often means that a field will be prepended with underscores or invalid characters replaced with underscores.</p> </div> <div class="paragraph"> <p>This can create problems for certain types of sinks, such as a JDBC sink connector, because the sink cannot easily deduce the original column name for the destination table nor can it adequately map between the event&#8217;s field name and a column name if they differ. This typically means users must use transformation chains on the sink side in order to reconstruct the event&#8217;s fields with namings that represent the source.</p> </div> <div class="paragraph"> <p>Debezium 2.4 introduces a way to minimize and potentially avoid that entirely by propagating the original column name as a field schema parameter, much in the same way that we do for data types, precision, scale, and length. The schema parameter <code>__debezium.source.column.name</code> now includes the original column name when column or data type propagation is enabled.</p> </div> <div class="admonitionblock tip"> <table> <tr> <td class="icon"> <i class="fa icon-tip" title="Tip"></i> </td> <td class="content"> <div class="paragraph"> <p>The Debezium JDBC sink connector already works with column and data type propagation, allowing for the sink connector to more accurately deduce column types, length, precision, and scale.</p> </div> <div class="paragraph"> <p>With this new feature, the JDBC sink connector will automatically use the column name from this argument when it is provided to guarantee that the destination table will be created with the same column names as the source, even when using Avro or similar. This means no transformations are needed when using the Debezium JDBC sink connector.</p> </div> </td> </tr> </table> </div> </div> <div class="sect3"> <h4 id="timezone_transformation">Timezone transformation</h4> <div class="paragraph"> <p>A common request we have often heard from the community has been to emit temporal columns using other time zones besides UTC. Debezium has supported this by using a <code>CustomConverter</code> to change the way temporal columns are emitted by default to writing your own single message transformation; however, these approaches may not be for everyone.</p> </div> <div class="paragraph"> <p>Debezium 2.4 now ships with a brand-new time zone transformation that enables you to control, to a granular level, which temporal columns in an emitted event will be converted from UTC into whatever desired time zone your pipeline requires. To get started with this new transformation, add the following basic configuration to your connector:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">tz</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.tz.type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.transforms.TimezoneConverter</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.tz.converted.timezone</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">America/New_York</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>By specifying the above configuration, all temporal columns that are emitted in UTC will be converted from UTC to the America/New_York time zone. But you are not limited to just changing the timezone for all temporal fields, you can also target specific fields using the <code>include.fields</code> property as shown below:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">tz</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.tz.type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.transforms.TimezoneConverter</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.tz.converted.timezone</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">America/New_York</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.tz.include.fields</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">source:customers:created_at,customers:updated_at</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>In the above example, the first entry will convert the <code>created_at</code> field where the <em>source table name</em> is <code>customers</code> whereas the latter will convert the <code>updated_at</code> field where the <em>topic name</em> is <code>customers</code>. Additionally, you can also exclude fields from the conversion using <code>exclude.fields</code> to apply the conversion to all but a subset:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">tz</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.tz.type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.transforms.TimezoneConverter</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.tz.converted.timezone</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">America/New_York</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.tz.exclude.fields</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">source:customers:updated_at</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>In the above example, all temporal fields will be converted to the America/New_York time zone except where the <em>source table name</em> is <code>customers</code> and the field is <code>updated_at</code>.</p> </div> <div class="paragraph"> <p>You can find more information about this new transformation in the <a href="https://debezium.io/documentation/reference/2.4/transformations/timezone-converter.html">documentation</a> and we would love to hear your feedback.</p> </div> </div> </div> <div class="sect2"> <h3 id="mongodb">MongoDB</h3> <div class="sect3"> <h4 id="cluster_wide_privileges">Cluster-wide privileges</h4> <div class="paragraph"> <p>Cluster-wide privileges are no longer necessary when watching a single database or collection (<a href="https://issues.redhat.com/browse/DBZ-6182">DBZ-6182</a>).</p> </div> </div> <div class="sect3"> <h4 id="configurable_order_of_aggregation_pipeline">Configurable order of aggregation pipeline</h4> <div class="paragraph"> <p>Debezium 2.4 now provides a way to control the aggregation order of the change streams pipeline. This can be critical when specific documents are being aggregated that could lead to pipeline problems such as large documents.</p> </div> <div class="paragraph"> <p>By default, the connector applies the MongoDB internal pipeline filters and then any user-constructed filters; however this could lead to situations where large documents make it into the pipeline and MongoDB could throw an error if the document exceeds the internal 16Mb limit. In such use cases, the connector can now be configured to apply the user stages to the pipeline first defined by <code>cursor.pipeline</code> to filter out such use cases to avoid the pipeline from failing due to the 16Mb limit.</p> </div> <div class="paragraph"> <p>To accomplish this, simply apply the following configuration to the connector:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">cursor.pipeline.order</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">user_first</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">cursor.pipeline</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;custom-pipeline-filters&gt;</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>For more details, please see the <a href="https://debezium.io/documentation/reference/2.4/connectors/mongodb.html#mongodb-property-cursor-pipeline">documentation</a>.</p> </div> </div> <div class="sect3"> <h4 id="custom_authentication">Custom authentication</h4> <div class="paragraph"> <p>In specific environments such as AWS, you need to use AWS IAM role-based authentication to connect to the MongoDB cluster; however, this requires setting the property u sing <code>AWS_CREDENTIAL_PROVIDER</code>. This provider is responsible for creating a session and providing the credentials.</p> </div> <div class="paragraph"> <p>To integrate more seamlessly in such environments, a new configuration property, <code>mongodb.authentication.class</code> has been added that allows you to define the credential provider class directly in the connector configuration. If you need to use such a provider configuration, you can now add the following to the connector configuration:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">mongodb.authentication.class</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;fully-qualified-class-name-to-use&gt;</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">mongodb.user</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">username</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">mongodb.password</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">password</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>In addition, if the authentication needs to use another database besides <code>admin</code>, the connector configuration can also include the <code>mongodb.authsource</code> property to control what authentication database should be used.</p> </div> <div class="paragraph"> <p>For more information, please see the <a href="https://debezium.io/documentation/reference/2.4/connectors/mongodb.html#mongodb-property-mongodb-authentication-class">documentation</a>.</p> </div> </div> <div class="sect3"> <h4 id="filter_match_mode">Filter match mode</h4> <div class="paragraph"> <p>A new configuration property, <code>filtering.match.mode</code> has been added for MongoDB to allow specifying how the filtering should be handled. This property can be specified with values of either <code>regex</code> or <code>literal</code> (<a href="https://issues.redhat.com/browse/DBZ-6973">DBZ-6973</a>).</p> </div> </div> <div class="sect3"> <h4 id="mongodb_7">MongoDB 7</h4> <div class="paragraph"> <p>MongoDB 7.0 was released just last month and Debezium 2.4 ships with MongoDB 7 support.</p> </div> <div class="paragraph"> <p>If you are looking to upgrade to MongoDB 7 for your environment, you can easily do so as Debezium 2.4+ is fully compatible with the newer version. If you encounter any problems, please let us know.</p> </div> </div> <div class="sect3"> <h4 id="parallel_incremental_snapshots">Parallel incremental snapshots</h4> <div class="paragraph"> <p>Since the introduction of incremental snapshots back in Debezium 1.x, the process to incremental snapshot existing data while concurrently capturing changes from a database transaction has been a single-threaded activity. It&#8217;s not uncommon when adding new features to focus on the basics and build upon that foundation, which is precisely what has happened with MongoDB.</p> </div> <div class="paragraph"> <p>In Debezium 2.4, we are taking the first steps to add parallel support to incremental snapshots with the MongoDB connector by reading multiple chunks in parallel. This should allow faster throughput at the cost of memory while the chunks are being collected, sorted, and deduplication occurs against the transaction log capture data set. Thanks to <a href="https://github.com/xidui">Yue Wang</a> for starting this effort in <a href="https://issues.redhat.com/browse/DBZ-6518">DBZ-6518</a>, it&#8217;s most definitely something we are looking to explore for the relational connectors in an upcoming Debezium release.</p> </div> </div> <div class="sect3"> <h4 id="read_preferences">Read preferences</h4> <div class="paragraph"> <p>Read preference taken from connection string (<a href="https://issues.redhat.com/browse/DBZ-6468">DBZ-6468</a>, <a href="https://issues.redhat.com/browse/DBZ-6578">DBZ-6578</a>).</p> </div> </div> <div class="sect3"> <h4 id="authentication_changes">Authentication changes</h4> <div class="paragraph"> <p>Support authentication with TC MongoDB deployments (<a href="https://issues.redhat.com/browse/DBZ-6596">DBZ-6596</a>).</p> </div> </div> </div> <div class="sect2"> <h3 id="mysql">MySQL</h3> <div class="sect3"> <h4 id="alternative_driver_support">Alternative driver support</h4> <div class="paragraph"> <p>In order to use IAM authentication on AWS, a special MySQL driver is required to provide that type of functionality. With Debezium 2.4, you can now provide a reference to this specific driver and the connector will use that driver instead of the default driver shipped with the connector.</p> </div> <div class="paragraph"> <p>As an example, to connect using IAM authentication on AWS, the following configuration is needed:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="text">database.jdbc.driver=software.aws.rds.jdbc.mysql.Driver
database.jdbc.protocol=jdbc:mysql:aws</code></pre> </div> </div> <div class="paragraph"> <p>The <code>database.jdbc.driver</code> specifies the driver that should be loaded by the connector and used to communicate with the MySQL database. The <code>database.jdbc.protocol</code> is a supplemental configuration property that may not be required in all contexts. It defaults to <code>jdbc:mysql</code> but since AWS requires <code>jdbc:mysql:aws</code>, this allows you to specify this derivative within the configuration.</p> </div> <div class="paragraph"> <p>We&#8217;ve love to hear feedback and whether something like this might be useful for other scenarios.</p> </div> </div> <div class="sect3"> <h4 id="parallel_snapshot_schema_events">Parallel snapshot schema events</h4> <div class="paragraph"> <p>Thanks to a contribution provided by Harvey Yue (<a href="https://issues.redhat.com/browse/DBZ-6472">DBZ-6472</a>), the MySQL connector will use parallelization to generate schema events during its snapshot phase. This should improve the overall performance when capturing the schema for many tables in your database. We plan to investigate how this can be extended to other relational connectors.</p> </div> </div> </div> <div class="sect2"> <h3 id="postgresql">PostgreSQL</h3> <div class="sect3"> <h4 id="postgresql_16">PostgreSQL 16</h4> <div class="paragraph"> <p>PostgreSQL announced the immediate release for PostgreSQL 16 just over a week ago, and we&#8217;re pleased to announce that Debezium 2.4 will support that release.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>PostgreSQL 16 introduces logical replication from standby servers; however, this feature has not yet been tested by Debezium and will be a feature introduced in a later build of Debezium. For now, logical replication remains only supported via the primary.</p> </div> </td> </tr> </table> </div> </div> <div class="sect3"> <h4 id="timescaledb_support">TimescaleDB support</h4> <div class="paragraph"> <p>TimescaleDB is an open-source time series-based database that is based on PostgreSQL. This means that a great deal of functionality to support TimescaleDB directly comes from the existing PostgreSQL connector; however there are certain aspects of TimescaleDB such as chunks, hypertables, and agregates that are not.</p> </div> <div class="paragraph"> <p>Therefore, if you want to get started with Debezium 2.4 and TimescaleDB, the integration requires a combination of both the PostgreSQL connector combined with a new <code>TimescaleDb</code> single message transformation (SMT). The combination of these two provide the ability to stream changes from a TimescaleDB environment with appropriate table names based on chunks, hypertables, and aggregates.</p> </div> <div class="paragraph"> <p>The <code>TimescaleDb</code> transformation is available as <code>io.debezium.connector.postgresql.transforms.timescaledb</code> and is responsible for adjusting the final topic names when working with chunks, hypertables, and aggregates. Additionally, this transformation adds metadata headers to the change event so you know the original chunk name, chunk table, the hypertable schema and table names accordingly.</p> </div> </div> </div> <div class="sect2"> <h3 id="oracle">Oracle</h3> <div class="sect3"> <h4 id="embedded_infinispan_global_configuration_support">Embedded Infinispan global configuration support</h4> <div class="paragraph"> <p>The Oracle connector supports three different buffering techniques, one is based on JVM heap while the other two are based on off-heap storage using Infinispan. When working with Infinispan, you can choose to use a remote cluster, where the caches are stored and managed across a remote connection, or using an embedded cluster, where the cluster is managed locally by the connector itself.</p> </div> <div class="paragraph"> <p>When working with a remote Infinispan cluster, there is some cluster configuration that is made as a part of the Infinispan installation itself, this is often referred to as the global or cluster configuration. However when working with an embedded Infinispan cluster, Debezium simply used the default configuration for an embedded cluster, which may not always provide all the necessary behaviors for each environment.</p> </div> <div class="paragraph"> <p>Debezium 2.4 introduces a new configuration property, <code>log.mining.buffer.infinispan.cache.global</code>. This property allows specifying the XML configuration for the Infinispan "global" or "cluster" configuration.</p> </div> <div class="listingblock"> <div class="title">An example configuration</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;infinispan&gt;</span>
  <span class="tag">&lt;threads&gt;</span>
    <span class="tag">&lt;blocking-bounded-queue-thread-pool</span>
        <span class="attribute-name">max-threads</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">10</span><span class="delimiter">&quot;</span></span>
        <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">myexec</span><span class="delimiter">&quot;</span></span>
        <span class="attribute-name">keepalive-time</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">10000</span><span class="delimiter">&quot;</span></span>
        <span class="attribute-name">queue-length</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">5000</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
  <span class="tag">&lt;/threads&gt;</span>
<span class="tag">&lt;/infinispan&gt;</span></code></pre> </div> </div> <div class="paragraph"> <p>With Debezium 2.4, if you are using the Infinispan-embedded buffer, you can now safely configure the overall embedded global configuration for Infinispan, which can allow you to tune and improve the overall performance when using the embedded Infinispan engine.</p> </div> </div> <div class="sect3"> <h4 id="max_transaction_age_metric">Max transaction age metric</h4> <div class="paragraph"> <p>The Oracle connector provides a myriad of metrics for LogMiner, including the <code>OldestScn</code> metric representing the oldest system change number in the connector&#8217;s transaction buffer. This SCN can be useful to know how far back a transaction may still be buffered relative to the current system change number, <code>CurrentScn</code>. However, system change numbers are simply that, numerical values that require the use of a database function call to know when the change occurred.</p> </div> <div class="paragraph"> <p>Starting with Debezium 2.4, the connector will now also track the age of the oldest system change number by providing a new metric called <code>OldestScnAgeInMilliseconds</code>. This metric is calculated by taking the timestamp of the <code>OffsetScn</code> and calculating the difference between that time and the query time of the metric, giving a rough age in milliseconds of the oldest transaction in the buffer that has yet to be committed or rolled back.</p> </div> <div class="paragraph"> <p>If there are other metrics you may be interested in to help, please reach out and let us know.</p> </div> </div> <div class="sect3"> <h4 id="openlogreplicator_ingestion_method">OpenLogReplicator ingestion method</h4> <div class="paragraph"> <p>The Debezium for Oracle connector has traditionally shipped with two adapters, one for Oracle XStream and another to integrate directly with Oracle LogMiner. While each adapter has its own benefits and is quite mature with features and support for a wide array of data types and use cases, we wanted to explore a completely different way of capturing changes.</p> </div> <div class="paragraph"> <p>Debezium 2.4.0.Beta2 introduces a new, experimental Oracle ingestion adapter based on <a href="https://github.com/bersler/OpenLogReplicator">OpenLogReplicator</a>. The adapter integrates directly with the OpenLogReplicator process in order to create change events in a similar way that the XStream implementation acts as a client to Oracle GoldenGate.</p> </div> <div class="paragraph"> <p>OpenLogReplicator is a standalone process that must either run on the Oracle database server or can run independently of the database server but requires direct communication with the database via TCP/IP and have direct read access to the Oracle redo and archive log files. OpenLogReplicator also does not ship with any pre-built binaries, so the code must either be built directly from source or deployed in a <a href="https://github.com/bersler/OpenLogReplicator-docker">container image</a> that can access the database and its files remotely via file shares.</p> </div> <div class="paragraph"> <p>Once OpenLogReplicator is installed, set up requires the following steps:</p> </div> <div class="ulist"> <ul> <li> <p>Configure the OpenLogReplicator&#8217;s configuration, <code>OpenLogReplicator.json</code>.</p> </li> <li> <p>Configure the Oracle connector to use the OpenLogReplicator adapter.</p> </li> </ul> </div> <div class="paragraph"> <p>At this time, the Debezium for Oracle connector expects the OpenLogReplicator configuration to use very specific settings so that the data is transferred to the connector using the right serialization. The <a href="https://debezium.io/documentation/reference/2.4/connectors/oracle.html#oracle-openlogreplicator-configuration">example configuration</a> shows the critical configuration parameters that must be set for Debezium to ingest the data properly.</p> </div> <div class="paragraph"> <p>When OpenLogReplicator is configured, you should see OpenLogReplicator start with the following:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code>OpenLogReplicator v1.2.1 (C) 2018-2023 by Adam Leszczynski (aleszczynski@bersler.com), see LICENSE file for licensing information, arch: x86_64, system: Linux, release: 6.4.11-200.fc38.x86_64, build: Debug, modules: OCI Probobuf
adding source: ORACLE <i class="conum" data-value="1"></i><b>(1)</b>
adding target: DBZ-NETWORK <i class="conum" data-value="2"></i><b>(2)</b>
writer is starting with Network:0.0.0.0:9000 <i class="conum" data-value="3"></i><b>(3)</b></code></pre> </div> </div> <div class="colist arabic"> <table> <tr> <td><i class="conum" data-value="1"></i><b>1</b></td> <td>The source alias configured in <code>OpenLogReplicator.json</code></td> </tr> <tr> <td><i class="conum" data-value="2"></i><b>2</b></td> <td>The target alias configured in <code>OpenLogReplicator.json</code></td> </tr> <tr> <td><i class="conum" data-value="3"></i><b>3</b></td> <td>The host and port the OpenLogReplicator is listening on.</td> </tr> </table> </div> <div class="paragraph"> <p>Lastly to configure the connector, set the following connector configuration options:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">database.connection.adapter</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">olr</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">openlogreplicator.source</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;source-alias&gt;</span><span class="delimiter">&quot;</span></span>, <i class="conum" data-value="1"></i><b>(1)</b>
  <span class="key"><span class="delimiter">&quot;</span><span class="content">openlogreplicator.host</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;host&gt;</span><span class="delimiter">&quot;</span></span>, <i class="conum" data-value="2"></i><b>(2)</b>
  <span class="key"><span class="delimiter">&quot;</span><span class="content">openlogreplicator.port</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;port&gt;</span><span class="delimiter">&quot;</span></span> <i class="conum" data-value="3"></i><b>(3)</b></code></pre> </div> </div> <div class="colist arabic"> <table> <tr> <td><i class="conum" data-value="1"></i><b>1</b></td> <td>The source alias defined in the <code>OpenLogReplicator.json</code> configuration that is to be used.</td> </tr> <tr> <td><i class="conum" data-value="2"></i><b>2</b></td> <td>The host that is running the OpenLogReplicator.</td> </tr> <tr> <td><i class="conum" data-value="3"></i><b>3</b></td> <td>The port the OpenLogReplicator is listening on.</td> </tr> </table> </div> <div class="paragraph"> <p>When the connector starts and begins to stream, it will connect to the OpenLogReplicator process' network endpoint, negotiate the connection with the serialization process, and then will begin to receive redo log entries.</p> </div> <div class="paragraph"> <p>We will have another blog post that goes over OpenLogReplicator in more detail in the coming weeks leading up to the final release, but in the meantime feel free to experiment with the new ingestion method as we would love to hear your feedback.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>As this ingestion method is experimental, there are a few known limitations, please review the connector <a href="https://debezium.io/documentation/reference/2.4/connectors/oracle.html#oracle-openlogreplicator-known-issues">documentation</a> for details.</p> </div> </td> </tr> </table> </div> </div> <div class="sect3"> <h4 id="xml_and_raw_data_types">XML and RAW data types</h4> <div class="paragraph"> <p>Debezium 2.4 supports several new Oracle data types, which include <code>XML_TYPE</code> and <code>RAW</code> (<a href="https://issues.redhat.com/browse/DBZ-3605">DBZ-3605</a>). Two new Oracle dependencies were necessary to support XML: <code>xdb</code> and <code>xmlparserv2</code>. These dependencies are not redistributable, so they&#8217;re not included in the connector plugin archive by default, much like the connector&#8217;s driver. You must obtain these directly from Maven Central or oracle, just like the driver dependency.</p> </div> <div class="paragraph"> <p>In addition, XML works similarly to <code>CLOB</code> and <code>BLOB</code> data types; therefore, the connector must be configured with <code>lob.enabled</code> set to <code>true</code> to ingest XML changes. We&#8217;d love to hear your feedback on this new feature as it&#8217;s been requested for quite some time.</p> </div> </div> </div> <div class="sect2"> <h3 id="sql_server">SQL Server</h3> <div class="sect3"> <h4 id="heartbeat_improvements">Heartbeat improvements</h4> <div class="paragraph"> <p>It&#8217;s not an uncommon situation for a database to go for a period of time without there being any relevant changes, whether that is due to inactivity or changes that do occur being of no interest to the connector based on configuration. In these cases, it&#8217;s critical that offset metadata managed by the connector remains synchronized with the offset backing store during these periods so that a restart of the connector works as expected.</p> </div> <div class="paragraph"> <p>With Debezium 2.4, if a SQL Server change capture loop does not find any changes or the changes that did occur are not of any relevance to the connector, the connector will continue to emit heartbeat events when enabled. This should improve the reliability of the offsets stored in the offset backing store across a variety of use cases.</p> </div> </div> </div> <div class="sect2"> <h3 id="jdbc">JDBC</h3> <div class="sect3"> <h4 id="improved_table_naming_strategy">Improved table naming strategy</h4> <div class="paragraph"> <p>Nicholas Fwang added the ability to reference values from the change event&#8217;s <code>source</code> information block as a part of the connector&#8217;s configuration property <code>table.name.format</code>. If you want to reference such fields, simply use <code>${source.&lt;field-name&gt;}</code> in the configuration, and the field&#8217;s value will be used (<a href="https://issues.redhat.com/browse/DBZ-6595">DBZ-6595</a>).</p> </div> </div> <div class="sect3"> <h4 id="header_based_primary_keys">Header-based primary keys</h4> <div class="paragraph"> <p>Roman Kudryashov contributed the ability to resolve a row&#8217;s primary key from a header defined on the change event. To use this new feature, specify the connector configuration property <code>primary.key.mode</code> as <code>record_header</code>. If the header value is a primitive type, you will need to define a <code>primary.key.fields</code> configuration similar to how you would if the event&#8217;s record key was a primitive. If the header value is a <code>struct</code> type, all fields of the structure will be used by default, but specifying the <code>primary.key.fields</code> property allows you to choose a subset of fields from the header as the key (<a href="https://issues.redhat.com/browse/DBZ-6602">DBZ-6602</a>).</p> </div> </div> <div class="sect3"> <h4 id="sql_server_identity_inserts">SQL Server identity inserts</h4> <div class="paragraph"> <p>Each database handles the insertion of values into an identity-based column differently. With SQL Server, this requires the explicit enablement of <code>IDENTITY_INSERT</code> prior to the insert and the disabling of this feature afterward. With Debezium 2.4, the Debezium JDBC sink connector provides support for this in the target database.</p> </div> <div class="paragraph"> <p>In order to take advantage of identity-based inserts, the JDBC sink connector must be configured with a new dialect-based property called <code>dialect.sqlserver.identity.inserts</code>, which can be set to <code>true</code> or <code>false</code>. By default, this feature is set to <code>false</code> and must be enabled if you wish to insert into identity-based columns.</p> </div> <div class="paragraph"> <p>When enabled, all <em>insert</em> and <em>upsert</em> operations will be wrapped as follows:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="sql"><span class="class">SET</span> IDENTITY_INSERT &lt;<span class="type">table</span>-name&gt; <span class="keyword">ON</span>;
&lt;the <span class="class">insert</span> <span class="keyword">or</span> upsert statement&gt;
<span class="class">SET</span> IDENTITY_INSERT &lt;<span class="type">table</span>-name&gt; OFF;</code></pre> </div> </div> </div> </div> <div class="sect2"> <h3 id="spanner">Spanner</h3> <div class="sect3"> <h4 id="await_initialization_task_timeout">Await initialization task timeout</h4> <div class="paragraph"> <p>It was possible due to certain conditions that a Spanner connector may not advance from the <code>START_INITIAL_SYNC</code> state during initialization. After investigation by Nancy Xu, a new configuration option was introduced to supply a configurable timeout. This can be done by setting <code>connector.spanner.task.await.initialization.timeout</code> to the desired number of milliseconds.</p> </div> </div> <div class="sect3"> <h4 id="gke_workload_identity_support">GKE workload identity support</h4> <div class="paragraph"> <p>Google Kubernetes Engine (GKE) supports identity workloads, allowing you to use a more secure authentication mechanism than the traditional JSON-based keys. In Debezium 2.4, when no JSON key is explicitly set, the Spanner connector will now automatically default to GKE workload identity authentication. Thanks to <a href="https://github.com/laughingman7743">laughingman7743</a> for this effort as a part of <a href="https://issues.redhat.com/browse/DBZ-6885">DBZ-6885</a>.</p> </div> </div> </div> <div class="sect2"> <h3 id="ui">UI</h3> <div class="sect3"> <h4 id="connector_metrics">Connector Metrics</h4> <div class="paragraph"> <p>The Debezium UI project allows you to easily deploy any Debezium connector onto Kafka Connect using a web-based interface. This release has improved the interface by including several connector metrics on the main connector listing view. We&#8217;d love your feedback on this change and welcome any suggestions on other metrics you may find useful (<a href="https://issues.redhat.com/browse/DBZ-5321">DBZ-5321</a>).</p> </div> </div> </div> <div class="sect2"> <h3 id="examples">Examples</h3> <div class="sect3"> <h4 id="offset_editor_example">Offset editor example</h4> <div class="paragraph"> <p>Users often express the need to manipulate connector offsets for various reasons. This can often be very difficult for those who may not be familiar with Kafka&#8217;s CLI tools or Java if you use Debezium Server. Thanks to a contribution (<a href="https://issues.redhat.com/browse/DBZ-6338">DBZ-6338</a>) by Nathan Smit, you can now use an editor to manipulate the offsets from the command line or a web-based interface.</p> </div> <div class="paragraph"> <p>Head to our <a href="https://github.com/debezium/debezium-examples/tree/main/offset-editor">examples repository</a> and follow the <code>README.md</code> to get started.</p> </div> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_changes">Other changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.4.0.Final%20ORDER%20BY%20component%20ASC">15 issues</a> were fixed in this release and a total of <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%20in%20(2.4.0.Alpha1%2C%202.4.0.Alpha2%2C%202.4.0.Beta1%2C%202.4.0.Beta2%2C%202.4.0.CR1%2C%202.4.0.Final)">231 issues</a> across all the Debezium 2.4 releases.</p> </div> <div class="ulist"> <ul> <li> <p>Debezium Outbox not working with CloudEventsConverter <a href="https://issues.redhat.com/browse/DBZ-3642">DBZ-3642</a></p> </li> <li> <p>Incremental snapshot data-collections are not deduplicated <a href="https://issues.redhat.com/browse/DBZ-6787">DBZ-6787</a></p> </li> <li> <p>MongoDB connector no longer requires cluster-wide privileges <a href="https://issues.redhat.com/browse/DBZ-6888">DBZ-6888</a></p> </li> <li> <p>Timezone Transformation can&#8217;t work <a href="https://issues.redhat.com/browse/DBZ-6940">DBZ-6940</a></p> </li> <li> <p>MySQL Kafka Signalling documentation is incorrect <a href="https://issues.redhat.com/browse/DBZ-6941">DBZ-6941</a></p> </li> <li> <p>Infinite loop when using OR condition in additional-condition <a href="https://issues.redhat.com/browse/DBZ-6956">DBZ-6956</a></p> </li> <li> <p>Filter out specified DDL events logic is reverted <a href="https://issues.redhat.com/browse/DBZ-6966">DBZ-6966</a></p> </li> <li> <p>DDL parser does not support NOCOPY keyword <a href="https://issues.redhat.com/browse/DBZ-6971">DBZ-6971</a></p> </li> <li> <p>Decrease time spent in handling rebalance events <a href="https://issues.redhat.com/browse/DBZ-6974">DBZ-6974</a></p> </li> <li> <p>ParsingException (MySQL/MariaDB): User specification with whitespace <a href="https://issues.redhat.com/browse/DBZ-6978">DBZ-6978</a></p> </li> <li> <p>RecordsStreamProducerIT#shouldReceiveChangesForInfinityNumericWithInfinity fails on Postgres &lt; 14 <a href="https://issues.redhat.com/browse/DBZ-6986">DBZ-6986</a></p> </li> <li> <p>PostgresConnectorIT#shouldAddNewFieldToSourceInfo may fail as the schema may not exists <a href="https://issues.redhat.com/browse/DBZ-6987">DBZ-6987</a></p> </li> </ul> </div> <div class="paragraph"> <p>A big thank you to all the contributors from the community who worked on Debezium 2.4: <a href="https://github.com/Vincenzo%20Santoynastaso">Vincenzo Santoynastaso</a>, <a href="https://github.com/adamstrickland">Adam Strickland</a>, <a href="https://github.com/aozmen121">Alisa Houskova</a>, <a href="https://github.com/AnatolyPopov">Anatolii Popov</a>, <a href="https://github.com/andreas-ibm">Andreas Martens</a>, <a href="https://github.com/BigGillyStyle">Andy Pickler</a>, <a href="https://github.com/adasari">Anil Dasari</a>, <a href="https://github.com/akanimesh7">Animesh Kumar</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/maxant">Ant Kutschera</a>, <a href="https://github.com/Artgyk">Artur Gukasian</a>, <a href="https://github.com/bdbene">Balint Bene</a>, <a href="https://github.com/roldanbob">Bob Roldan</a>, <a href="https://github.com/brenoavm">Breno Moreira</a>, <a href="https://github.com/TyrantLucifer">Chao Tian</a>, <a href="https://github.com/chrisbeard">Chris Beard</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/C0urante">Chris Egerton</a>, <a href="https://github.com/Matan">Cohen</a>, <a href="https://github.com/vidourem">David Remy</a>, <a href="https://github.com/Fraznist">Emre Akgün</a>, <a href="https://github.com/ericpangiawan">Eric Pangiawan</a>, <a href="https://github.com/faihofu">Fai Ho Fu</a>, <a href="https://github.com/gurpiarbassi">Gurps Bassi</a>, <a href="https://github.com/ruanhang1993">Hang Ruan</a>, <a href="https://github.com/harveyyue">Harvey Yue</a>, <a href="https://github.com/blcksrx">Hossein Torabi</a>, <a href="https://github.com/indraraj">Indra Shukla</a>, <a href="https://github.com/nicholas-fwang">Inki Hwang</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/jeremy-l-ford">Jeremy Ford</a>, <a href="https://github.com/novotnyJiri">Jiri Novotny</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/joschi">Jochen Schalanda</a>, <a href="https://github.com/pricelessjunk">Kaustuv chakrabarti</a>, <a href="https://github.com/Naros">M. Gökhan Akgül</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/MartinMedek">Martin Medek</a>, <a href="https://github.com/mfortunat">Massimo Fortunat</a>, <a href="https://github.com/nancyxu123">Nancy Xu</a>, <a href="https://github.com/benesch">Nikhil Benesch</a>, <a href="https://github.com/nirolevy">Nir Levy</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/paul-cheung">Paul Cheung</a>, <a href="https://github.com/rajdangwal">Rajendra Dangwal</a>, <a href="https://github.com/rk3rn3r">René Kerner</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/rkudryashov">Roman Kudryashov</a>, <a href="https://github.com/ironakj">Ronak Jain</a>, <a href="https://github.com/ryanvanhuuksloot">Ryan van Huuksloot</a>, <a href="https://github.com/jaegwonseo">Seo Jae-kwon</a>, <a href="https://github.com/eizners">Sergey Eizner</a>, <a href="https://github.com/ShuranZhang">Shuran Zhang</a>, <a href="https://github.com/smiklosovic">Stefan Miklosovic</a>, <a href="https://github.com/rolevinks">Stein Rolevink</a>, <a href="https://github.com/sunxiaojian">Sun Xiao Jian</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, <a href="https://github.com/laughingman7743">Tomoyuki Nakamura</a>, <a href="https://github.com/vjuranek">Vojtěch Juránek</a>, <a href="https://github.com/wuzhenhua01">Wu Zhenhua</a>, <a href="https://github.com/sunxiaojian">Xiaojian Sun</a>, <a href="https://github.com/j2gg0s">Yanjie Wang</a>, <a href="https://github.com/Ychopada">Yashashree Chopada</a>, <a href="https://github.com/Yue">Zheng Wang</a>, <a href="https://github.com/vidourem">david remy</a>, <a href="https://github.com/ibnubay">ibnubay</a>, and <a href="https://github.com/tisonkun">tison</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="outlook_whats_next">Outlook &amp; What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.4 was a feature packed milestone for the team, so after a few drinks and celebration, the plan is to turn our focus toward what is ahead for the 2.5 release in mid-December. We already had our first Debezium Community meeting, discussed our <a href="/docs/roadmap">road map</a>, and we&#8217;re more than eager to get started.</p> </div> <div class="paragraph"> <p>If you have any ideas or suggestions for what you&#8217;d like to see included in Debezium 2.5, please provide that feedback on our <a href="https://groups.google.com/forum/#!forum/debezium">mailing list</a> or in our <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">Zulip chat</a>.</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><summary type="html"><![CDATA[As the summer months wind down and we enter autumn with cooler temperatures, the team has diligently prepared the next major milestone of Debezium. It&#8217;s my pleasure to announce the immediate release of the next minor version, Debezium 2.4.0.Final. As the team begins the journey toward the next development iteration, let&#8217;s take a moment and review all the new features, changes, and improvements that are included in Debezium 2.4, which includes 231 issues resolved by 68 unique contributors.]]></summary></entry><entry><title type="html">Online machine learning with the data streams from the database</title><link href="https://debezium.io/blog/2023/09/23/flink-spark-online-learning/" rel="alternate" type="text/html" title="Online machine learning with the data streams from the database"/><published>2023-09-23T00:00:00+00:00</published><updated>2023-09-23T00:00:00+00:00</updated><id>https://debezium.io/blog/2023/09/23/flink-spark-online-learning</id><content type="html" xml:base="https://debezium.io/blog/2023/09/23/flink-spark-online-learning/"><![CDATA[<div class="paragraph"> <p>In <a href="https://debezium.io/blog/2023/05/02/tensorflow-mnist-classification/">the previous blog post</a>, we have shown how to leverage Debezium to train neural-network model with the existing data from the database and use this pre-trained model to classify images newly stored into the database. In this blog post, we will move it one step further - we will use Debezium to create multiple data streams from the database and use one of the streams for continuous learning and to improve our model, and the second one for making predictions on the data. When the model is constantly improved or adjusted to recent data samples, this approach is known as <a href="https://en.wikipedia.org/wiki/Online_machine_learning">online machine learning</a>. Online learning is only suitable for some use cases, and implementing an online variant of a given algorithm may be challenging or even impossible. However, in situations where online learning is possible, it becomes a very powerful tool as it allows one to react to the changes in the data in real-time and avoids the need to re-train and re-deploy new models, thus saving the hardware and operational costs. As the streams of data become more and more common, e.g. with the advent of IoT, we can expect online learning to become more and more popular. It&#8217;s usually a perfect fit for analyzing streaming data in use cases where it&#8217;s possible.</p> </div> <div class="paragraph"> <p></p> </div> <div class="paragraph"> <p>As mentioned in the previous blog, our goal here is not to build the best possible model for a given use case but to investigate how we can build a complete pipeline from inserting the data into the database through delivering it to the model and using it for model training and predictions. To keep things simple, we will use another well-known data sample often used in ML tutorials. We will explore how to classify various species of the Iris flower using an online variant of <a href="https://en.wikipedia.org/wiki/K-means_clustering">k-mean clustering algorithm</a>. We use <a href="https://flink.apache.org/">Apache Flink</a> and <a href="https://spark.apache.org/">Apache Spark</a> to process the data streams. Both these frameworks are very popular data processing frameworks and include a machine learning library, which, besides others, implements online k-means algorithms. Thus, we can focus on building a complete pipeline for delivering the data from the database into a given model, processing it in real time, and not having to deal with the algorithm&#8217;s implementation details.</p> </div> <div class="paragraph"> <p>All the code mentioned later in this blog post is available as a Debezium example in <a href="https://github.com/debezium/debezium-examples/tree/blog_flink_spark_ml/machine-learning/flink-spark-iris">Debezium example repository</a>, with all other useful stuff, like Docker composes and step-by-step instructions in the <a href="https://github.com/debezium/debezium-examples/blob/blog_flink_spark_ml/machine-learning/flink-spark-iris/README.adoc">README</a> file.</p> </div> <div class="sect1"> <h2 id="data_set_preparation">Data set preparation</h2> <div class="sectionbody"> <div class="paragraph"> <p>We will use <a href="https://en.wikipedia.org/wiki/Iris_flower_data_set">Iris flower data set</a>. Our goal is to determine the Iris species based on a couple of measurements of the Iris flower: its sepal length, sepal width, petal length, and petal width.</p> </div> <div class="imageblock centered-image"> <figure> <img src="/assets/images/2023-09-23-flink-spark-online-learning/iris_versicolor.jpg" class="responsive-image" alt="Iris versicolor"> <figcaption>Iris versicolor, source <a href="https://en.wikipedia.org/wiki/Iris_flower_data_set#/media/File:Iris_versicolor_3.jpg">Wikipedia</a></figcaption> </figure> </div> <div class="paragraph"> <p>The data set can be downloaded from various sources. We can take advantage of the fact that it&#8217;s available already pre-processed in e.g. <a href="https://scikit-learn.org">scikit-learn</a> toolkit and use it from there. Each sample row contains a data point (sepal length, sepal width, petal length, and petal width) and a label. Label is number 0, 1, or 2, where 0 stands for Iris setosa, 1 stands for Iris versicolor, and 2 for Iris virginica. The data set is small - containing only 150 data points.</p> </div> <div class="paragraph"> <p>As we load the data into the database, we will first prepare SQL files, which we will later pass to the database. We need to divide the original data sample into three sub-samples - two for training and one for testing. The initial training will use the first training data sample. This data sample is intentionally small to not generate good predictions when we test the model for the first time so that we can see how the model&#8217;s prediction will increase in real-time when we feed it with more data.</p> </div> <div class="paragraph"> <p>You can use the following Python script from the accompanying demo repository for generating all three SQL files.</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code>$ ./iris2sql.py</code></pre> </div> </div> <div class="paragraph"> <p>The <code>postgres</code> directory contains the files used for this demo. <code>train1.sql</code> will be loaded automatically into the Postgres database upon its start. <code>test.sql</code> and <code>train2.sql</code> will be loaded manually into the database later.</p> </div> </div> </div> <div class="sect1"> <h2 id="classification_with_apache_flink">Classification with Apache Flink</h2> <div class="sectionbody"> <div class="paragraph"> <p>First, let&#8217;s look at how to do online Iris flower classification and learning in Apache Flink. The following figure depicts the high-level schema for the entire pipeline.</p> </div> <div class="imageblock centered-image"> <img src="/assets/images/2023-09-23-flink-spark-online-learning/postgres_to_flink.png" class="responsive-image" alt="Postgres to Flink schema"> </div> <div class="paragraph"> <p>We will use Postgres as our source database. Debezium, deployed as a Kafka Connect source connector, tracks the changes in the database and creates the streams of data sent to Kafka from newly inserted data. Kafka sends these streams to Apache Flink, which employs the streaming k-means algorithm for model fitting and data classification. The predictions of the model for test data streams are produced as another stream and sent back to Kafka.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>You can also ingest database changes directly into the Flink without using Kafka. Ververika&#8217;s implementation of CDC source connectors embeds the Debezium directly into the Flink. See Flink CDC connectors <a href="https://ververica.github.io/flink-cdc-connectors/">documentation</a> for more details.</p> </div> </td> </tr> </table> </div> <div class="paragraph"> <p>Our database contains two tables. The first stores our training data, while the second stores the test data. Therefore, there are two data streams, each corresponding to one table - one data stream for learning and one with data points that need to be classified. In real applications, you can use only one table or, on the contrary, many more tables. You can even deploy more Debezium connectors and thus combine data from several databases.</p> </div> <div class="sect2"> <h3 id="using_debezium_and_kafka_as_a_source_data_stream">Using Debezium and Kafka as a source data stream</h3> <div class="paragraph"> <p>Apache Flink has excellent integration with Kafka. We can pass the Debezium records as e.g. JSON records. For creating Flink tables, it even has support for Debezium&#8217;s record format, but for streams, we need to extract part of the Debezium message, which contains the newly stored row of the table. However, this is very easy as Debezium provides SMT, <a href="https://debezium.io/documentation/reference/nightly/transformations/event-flattening.html">extract new record state SMT</a>, which does precisely this. The complete Debezium configuration can look like this:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
    <span class="key"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">iris-connector-flink</span><span class="delimiter">&quot;</span></span>,
    <span class="key"><span class="delimiter">&quot;</span><span class="content">config</span><span class="delimiter">&quot;</span></span>: {
        <span class="key"><span class="delimiter">&quot;</span><span class="content">connector.class</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.connector.postgresql.PostgresConnector</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">tasks.max</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">1</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">database.hostname</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">database.port</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">5432</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">database.user</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">database.password</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">database.dbname</span><span class="delimiter">&quot;</span></span> : <span class="string"><span class="delimiter">&quot;</span><span class="content">postgres</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">topic.prefix</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">flink</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">table.include.list</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">public.iris_.*</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">key.converter</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">org.apache.kafka.connect.json.JsonConverter</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">value.converter</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">org.apache.kafka.connect.json.JsonConverter</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">unwrap</span><span class="delimiter">&quot;</span></span>,
        <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.unwrap.type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.transforms.ExtractNewRecordState</span><span class="delimiter">&quot;</span></span>
    }
}</code></pre> </div> </div> <div class="paragraph"> <p>The configuration captures all tables in the <code>public</code> schema with tables that begin with the <code>iris_</code> prefix. Since we are storing training and test data in two tables, two Kafka topics named <code>flink.public.iris_train</code> and <code>flink.public.iris_test</code> are created, respectively. Flink&#8217;s <code>DataStreamSource</code> represents the incoming stream of data. As we encode the records as a JSON, it will be a stream of JSON <code>ObjectNode</code> objects. Constructing the source stream is very straightforward:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="java">KafkaSource&lt;ObjectNode&gt; train = KafkaSource.&lt;ObjectNode&gt;builder()
    .setBootstrapServers(<span class="string"><span class="delimiter">&quot;</span><span class="content">kafka:9092</span><span class="delimiter">&quot;</span></span>)
    .setTopics(<span class="string"><span class="delimiter">&quot;</span><span class="content">flink.public.iris_train</span><span class="delimiter">&quot;</span></span>)
    .setClientIdPrefix(<span class="string"><span class="delimiter">&quot;</span><span class="content">train</span><span class="delimiter">&quot;</span></span>)
    .setGroupId(<span class="string"><span class="delimiter">&quot;</span><span class="content">dbz</span><span class="delimiter">&quot;</span></span>)
    .setStartingOffsets(OffsetsInitializer.earliest())
    .setDeserializer(KafkaRecordDeserializationSchema.of(<span class="keyword">new</span> JSONKeyValueDeserializationSchema(<span class="predefined-constant">false</span>)))
    .build();
DataStreamSource&lt;ObjectNode&gt; trainStream = env.fromSource(train, WatermarkStrategy.noWatermarks(), <span class="string"><span class="delimiter">&quot;</span><span class="content">Debezium train</span><span class="delimiter">&quot;</span></span>);</code></pre> </div> </div> <div class="paragraph"> <p>Flink operates primarily on the <code>Table</code> abstraction object. Also, ML models accept only tables as input, and predictions are produced as tables too. Therefore, we must first convert our input stream into a <code>Table</code> object. We will start by transforming our input data stream into a stream of table rows. We need to define a map function that would return a <code>Row</code> object with a vector containing one data point. As the k-means algorithm belongs to <a href="https://en.wikipedia.org/wiki/Unsupervised_learning">unsupervised learning</a> algorithms, i.e. the model doesn&#8217;t need corresponding "right answers" for the data points, we can skip the <code>label</code> field from the vector:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="java"><span class="directive">private</span> <span class="directive">static</span> <span class="type">class</span> <span class="class">RecordMapper</span> <span class="directive">implements</span> MapFunction&lt;ObjectNode, Row&gt; {
    <span class="annotation">@Override</span>
    <span class="directive">public</span> Row map(ObjectNode node) {
        JsonNode payload = node.get(<span class="string"><span class="delimiter">&quot;</span><span class="content">value</span><span class="delimiter">&quot;</span></span>).get(<span class="string"><span class="delimiter">&quot;</span><span class="content">payload</span><span class="delimiter">&quot;</span></span>);
        <span class="predefined-type">StringBuffer</span> sb = <span class="keyword">new</span> <span class="predefined-type">StringBuffer</span>();
        <span class="keyword">return</span> Row.of(Vectors.dense(
                        payload.get(<span class="string"><span class="delimiter">&quot;</span><span class="content">sepal_length</span><span class="delimiter">&quot;</span></span>).asDouble(),
                        payload.get(<span class="string"><span class="delimiter">&quot;</span><span class="content">sepal_width</span><span class="delimiter">&quot;</span></span>).asDouble(),
                        payload.get(<span class="string"><span class="delimiter">&quot;</span><span class="content">petal_length</span><span class="delimiter">&quot;</span></span>).asDouble(),
                        payload.get(<span class="string"><span class="delimiter">&quot;</span><span class="content">petal_width</span><span class="delimiter">&quot;</span></span>).asDouble()));
    }
}</code></pre> </div> </div> <div class="paragraph"> <p>Various parts of the internal Flink pipeline can run on different worker nodes, and therefore, we also need to provide type information about the table. With that, we are ready to create the table object:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="java">StreamTableEnvironment tEnv = StreamTableEnvironment.create(env);
TypeInformation&lt;?&gt;<span class="type">[]</span> types = {DenseVectorTypeInfo.INSTANCE};
<span class="predefined-type">String</span> names<span class="type">[]</span> = {<span class="string"><span class="delimiter">&quot;</span><span class="content">features</span><span class="delimiter">&quot;</span></span>};
RowTypeInfo typeInfo = <span class="keyword">new</span> RowTypeInfo(types, names);

DataStream&lt;Row&gt; inputStream = trainStream.map(<span class="keyword">new</span> RecordMapper()).returns(typeInfo);
Table trainTable = tEnv.fromDataStream(inputStream).as(<span class="string"><span class="delimiter">&quot;</span><span class="content">features</span><span class="delimiter">&quot;</span></span>);</code></pre> </div> </div> </div> <div class="sect2"> <h3 id="building_flink_stream_k_means">Building Flink stream k-means</h3> <div class="paragraph"> <p>Once we have a <code>Table</code> object, we can pass it to our model. So let&#8217;s create one and pass a train stream to it for continuous model training:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="java">OnlineKMeans onlineKMeans = <span class="keyword">new</span> OnlineKMeans()
    .setFeaturesCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">features</span><span class="delimiter">&quot;</span></span>)
    .setPredictionCol(<span class="string"><span class="delimiter">&quot;</span><span class="content">prediction</span><span class="delimiter">&quot;</span></span>)
    .setInitialModelData(tEnv.fromDataStream(env.fromElements(<span class="integer">1</span>).map(<span class="keyword">new</span> IrisInitCentroids())))
    .setK(<span class="integer">3</span>);
OnlineKMeansModel model = onlineKMeans.fit(trainTable);</code></pre> </div> </div> <div class="paragraph"> <p>To make things more straightforward, we directly set the number of desired clusters to 3 instead of finding the optimal number of clusters by digging into the data (using e.g. <a href="https://en.wikipedia.org/wiki/Elbow_method_(clustering)">elbow method</a>). We also set some initial values for the centers of the clusters instead of using random numbers (Flink provides a convenient method for it - <code>KMeansModelData.generateRandomModelData()</code> if you want to try with random centers).</p> </div> <div class="paragraph"> <p>To obtain the predictions for our test data, we again need to convert our test stream into a table. The model transforms the table with test data into a table with predictions. Finally, convert the prediction into a stream and persisted, e.g. in a Kafka topic:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="java">DataStream&lt;Row&gt; testInputStream = testStream.map(<span class="keyword">new</span> RecordMapper()).returns(typeInfo);
Table testTable = tEnv.fromDataStream(testInputStream).as(<span class="string"><span class="delimiter">&quot;</span><span class="content">features</span><span class="delimiter">&quot;</span></span>);
Table outputTable = model.transform(testTable)[<span class="integer">0</span>];

DataStream&lt;Row&gt; resultStream = tEnv.toChangelogStream(outputTable);
resultStream.map(<span class="keyword">new</span> ResultMapper()).sinkTo(kafkaSink);</code></pre> </div> </div> <div class="paragraph"> <p>Now, we are ready to build our application and almost ready to submit it to Flink for execution. Before we do, we need to create the required Kafka topics first. While the topics can be empty, Flink requires that they at least exist. As we include a small set of data in the Postgres training table when the database starts, Debezium will create a corresponding topic when registering the Debezium Postgres connector in Kafka Connect. Since the test data table does not yet exist, we need to create the topic in Kafka manually:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">$ docker compose -f docker-compose-flink.yaml exec kafka /kafka/bin/kafka-topics.sh --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1  --topic flink.public.iris_test</code></pre> </div> </div> <div class="paragraph"> <p>Now, we are ready to submit our application to Flink. For the complete code, please see the corresponding source code in Debezium <a href="https://github.com/debezium/debezium-examples/blob/blog_flink_spark_ml/machine-learning/flink-spark-iris/iris-flink/src/main/java/io/github/vjuranek/FlinkKafkaKmeans.java">example repository</a></p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>If you don&#8217;t use Docker compose provided as part of the source code for this demo, please include <a href="https://nightlies.apache.org/flink/flink-ml-docs-master/">Flink ML library</a> in the Flink <code>lib</code> folder, as the ML library is not part of default Flink distribution.</p> </div> </td> </tr> </table> </div> <div class="paragraph"> <p>Flink provides a friendly UI, which is available on <a href="http://localhost:8081/" class="bare">http://localhost:8081/</a>. There, you can check, besides other things, the status of your jobs and also, e.g. job execution plan in an excellent graphical representation:</p> </div> <div class="imageblock centered-image"> <a href="/assets/images/2023-09-23-flink-spark-online-learning/flink_dag.png" target="_blank"><img src="/assets/images/2023-09-23-flink-spark-online-learning/flink_dag.png" class="responsive-image" alt="Postgres to Flink schema"></a> </div> </div> <div class="sect2"> <h3 id="evaluating_the_model">Evaluating the model</h3> <div class="paragraph"> <p>From the user&#8217;s point of view, all the interactions with our model occur by inserting new records into the database or reading Kafka topics with predictions. As we already created a very small initial training data sample in the database when it started, we can directly check our model predictions by inserting our test data sample into the database:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">$ psql -h localhost -U postgres -f postgres/iris_test.sql</code></pre> </div> </div> <div class="paragraph"> <p>The insert results in an immediate data stream of test data in Kafka, passing it into the model and sending the prediction back to the <code>iris_predictions</code> Kafka topic. The predictions are not accurate when training the model on a very small data set with just two clusters. The following shows our initial predictions:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code>[5.4, 3.7, 1.5, 0.2] is classified as 0
[4.8, 3.4, 1.6, 0.2] is classified as 0
[7.6, 3.0, 6.6, 2.1] is classified as 2
[6.4, 2.8, 5.6, 2.2] is classified as 2
[6.0, 2.7, 5.1, 1.6] is classified as 2
[5.4, 3.0, 4.5, 1.5] is classified as 2
[6.7, 3.1, 4.7, 1.5] is classified as 2
[5.5, 2.4, 3.8, 1.1] is classified as 2
[6.1, 2.8, 4.7, 1.2] is classified as 2
[4.3, 3.0, 1.1, 0.1] is classified as 0
[5.8, 2.7, 3.9, 1.2] is classified as 2</code></pre> </div> </div> <div class="paragraph"> <p>In our case, the correct answer should be:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code>[5.4, 3.7, 1.5, 0.2] is 0
[4.8, 3.4, 1.6, 0.2] is 0
[7.6, 3.0, 6.6, 2.1] is 2
[6.4, 2.8, 5.6, 2.2] is 2
[6.0, 2.7, 5.1, 1.6] is 1
[5.4, 3.0, 4.5, 1.5] is 1
[6.7, 3.1, 4.7, 1.5] is 1
[5.5, 2.4, 3.8, 1.1] is 1
[6.1, 2.8, 4.7, 1.2] is 1
[4.3, 3.0, 1.1, 0.1] is 0
[5.8, 2.7, 3.9, 1.2] is 1</code></pre> </div> </div> <div class="paragraph"> <p>When comparing the result, we only have 5 of 11 data points correctly classified due to the initial sample training data size. On the other hand, as we didn&#8217;t start with completely random clusters, our predictions are also not completely wrong.</p> </div> <div class="paragraph"> <p>Let&#8217;s see how things change when we supply more training data into the model:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">$ psql -h localhost -U postgres -f postgres/iris_train2.sql</code></pre> </div> </div> <div class="paragraph"> <p>To see the updated predictions, we insert the same test data sample again into the database:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">$ psql -h localhost -U postgres -f postgres/iris_test.sql</code></pre> </div> </div> <div class="paragraph"> <p>The following predictions are much better since we have all three categories present. We have also correctly classified 7 out of the 11 data points.</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code>[5.4, 3.7, 1.5, 0.2] is classified as 0
[4.8, 3.4, 1.6, 0.2] is classified as 0
[7.6, 3.0, 6.6, 2.1] is classified as 2
[6.4, 2.8, 5.6, 2.2] is classified as 2
[6.0, 2.7, 5.1, 1.6] is classified as 2
[5.4, 3.0, 4.5, 1.5] is classified as 2
[6.7, 3.1, 4.7, 1.5] is classified as 2
[5.5, 2.4, 3.8, 1.1] is classified as 1
[6.1, 2.8, 4.7, 1.2] is classified as 2
[4.3, 3.0, 1.1, 0.1] is classified as 0
[5.8, 2.7, 3.9, 1.2] is classified as 1</code></pre> </div> </div> <div class="paragraph"> <p>As the whole data sample is pretty small, for further model training we can re-use our second train data sample:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="bash">$ psql -h localhost -U postgres -f postgres/iris_train2.sql
$ psql -h localhost -U postgres -f postgres/iris_test.sql</code></pre> </div> </div> <div class="paragraph"> <p>This results in the following prediction.</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code>[5.4, 3.7, 1.5, 0.2] is classified as 0
[4.8, 3.4, 1.6, 0.2] is classified as 0
[7.6, 3.0, 6.6, 2.1] is classified as 2
[6.4, 2.8, 5.6, 2.2] is classified as 2
[6.0, 2.7, 5.1, 1.6] is classified as 2
[5.4, 3.0, 4.5, 1.5] is classified as 1
[6.7, 3.1, 4.7, 1.5] is classified as 2
[5.5, 2.4, 3.8, 1.1] is classified as 1
[6.1, 2.8, 4.7, 1.2] is classified as 1
[4.3, 3.0, 1.1, 0.1] is classified as 0
[5.8, 2.7, 3.9, 1.2] is classified as 1</code></pre> </div> </div> <div class="paragraph"> <p>We now find we have 9 out of 11 data points correctly classified. While this is still not an excellent result, we expect only partially accurate results as this is simply a prediction. The primary motivation here is to show the whole pipeline and demonstrate that the model improves the predictions without re-training and re-deploying the model when adding new data.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="classification_with_apache_spark">Classification with Apache Spark</h2> <div class="sectionbody"> <div class="paragraph"> <p>From the user&#8217;s point of view, Apache Spark is very similar to Flink, and the implementation would be quite similar. This chapter is briefer to make this blog post more digestible.</p> </div> <div class="paragraph"> <p>Spark has two streaming models: the older <a href="https://spark.apache.org/docs/latest/streaming-programming-guide.html">DStreams</a>, which is now in legacy state, and the more recent and recommended <a href="https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html">structured streaming</a>. However, as the streaming k-means algorithm contained in the Spark ML library works only with the DStreams, for simplicity, DStreams are used in this example. A better approach would be to use structured streaming and implement the streaming k-means ourselves. This is, however, outside this blog post&#8217;s scope and main goal.</p> </div> <div class="paragraph"> <p>Spark supports streaming from Kafka using DStreams. However, writing DStreams back to Kafka is not supported, although it is possible but isn&#8217;t straightforward.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>Structured streaming supports both directions, reading and writing to Kafka, very easily.</p> </div> </td> </tr> </table> </div> <div class="paragraph"> <p>Again, for the sake of simplicity, we skip the final part and will write the predictions only to the console instead of writing them back to Kafka. The big picture of our pipelines thus looks like this:</p> </div> <div class="imageblock centered-image"> <img src="/assets/images/2023-09-23-flink-spark-online-learning/postgres_to_spark.png" class="responsive-image" alt="Postgres to Spark schema"> </div> <div class="sect2"> <h3 id="defining_the_data_streams">Defining the data streams</h3> <div class="paragraph"> <p>Similarly to Flink, creating Spark streams from Kafka streams is straightforward, and most of the parameters are self-explanatory:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="java"><span class="predefined-type">Set</span>&lt;<span class="predefined-type">String</span>&gt; trainTopic = <span class="keyword">new</span> <span class="predefined-type">HashSet</span>&lt;&gt;(<span class="predefined-type">Arrays</span>.asList(<span class="string"><span class="delimiter">&quot;</span><span class="content">spark.public.iris_train</span><span class="delimiter">&quot;</span></span>));
<span class="predefined-type">Set</span>&lt;<span class="predefined-type">String</span>&gt; testTopic = <span class="keyword">new</span> <span class="predefined-type">HashSet</span>&lt;&gt;(<span class="predefined-type">Arrays</span>.asList(<span class="string"><span class="delimiter">&quot;</span><span class="content">spark.public.iris_test</span><span class="delimiter">&quot;</span></span>));
<span class="predefined-type">Map</span>&lt;<span class="predefined-type">String</span>, <span class="predefined-type">Object</span>&gt; kafkaParams = <span class="keyword">new</span> <span class="predefined-type">HashMap</span>&lt;&gt;();
kafkaParams.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string"><span class="delimiter">&quot;</span><span class="content">kafka:9092</span><span class="delimiter">&quot;</span></span>);
kafkaParams.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string"><span class="delimiter">&quot;</span><span class="content">dbz</span><span class="delimiter">&quot;</span></span>);
kafkaParams.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, <span class="string"><span class="delimiter">&quot;</span><span class="content">earliest</span><span class="delimiter">&quot;</span></span>);
kafkaParams.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
kafkaParams.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);

JavaInputDStream&lt;ConsumerRecord&lt;<span class="predefined-type">String</span>, <span class="predefined-type">String</span>&gt;&gt; trainStream = KafkaUtils.createDirectStream(
        jssc,
        LocationStrategies.PreferConsistent(),
        ConsumerStrategies.Subscribe(trainTopic, kafkaParams));
JavaDStream&lt;LabeledPoint&gt; train = trainStream.map(ConsumerRecord::value)
        .map(SparkKafkaStreamingKmeans::toLabeledPointString)
        .map(LabeledPoint::parse);</code></pre> </div> </div> <div class="paragraph"> <p>On the last line, we transform the Kafka stream to a labeled point stream, which the Spark ML library uses for working with its ML models. Labeled points are expected as the strings formatted as data point labels separated by the comma from space-separated data point values. So the map function looks like this:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="java"><span class="directive">private</span> <span class="directive">static</span> <span class="predefined-type">String</span> toLabeledPointString(<span class="predefined-type">String</span> json) <span class="directive">throws</span> <span class="exception">ParseException</span> {
    JSONParser jsonParser = <span class="keyword">new</span> JSONParser();
    JSONObject o = (JSONObject)jsonParser.parse(json);
    <span class="keyword">return</span> <span class="predefined-type">String</span>.format(<span class="string"><span class="delimiter">&quot;</span><span class="content">%s, %s %s %s %s</span><span class="delimiter">&quot;</span></span>,
            o.get(<span class="string"><span class="delimiter">&quot;</span><span class="content">iris_class</span><span class="delimiter">&quot;</span></span>),
            o.get(<span class="string"><span class="delimiter">&quot;</span><span class="content">sepal_length</span><span class="delimiter">&quot;</span></span>),
            o.get(<span class="string"><span class="delimiter">&quot;</span><span class="content">sepal_width</span><span class="delimiter">&quot;</span></span>),
            o.get(<span class="string"><span class="delimiter">&quot;</span><span class="content">petal_length</span><span class="delimiter">&quot;</span></span>),
            o.get(<span class="string"><span class="delimiter">&quot;</span><span class="content">petal_width</span><span class="delimiter">&quot;</span></span>));
}</code></pre> </div> </div> <div class="paragraph"> <p>It still applies that k-means is an unsupervised algorithm and doesn&#8217;t use the data point labels. However, it&#8217;s convenient to pass them to <code>LabeledPoint</code> class as later on, we can show them together with model predictions.</p> </div> <div class="paragraph"> <p>We chain one more map function to parse the string and create a labeled data point from it. In this case, it&#8217;s a built-in function of Spark <code>LabeledPoint</code>.</p> </div> <div class="paragraph"> <p>Contrary to Flink, Spark doesn&#8217;t require Kafka topics to exist in advance, so when deploying the model, we don&#8217;t have to create the topics. We can let Debezium create them once the table with the test data is created and populated with the data.</p> </div> </div> <div class="sect2"> <h3 id="defining_and_evaluating_the_model">Defining and evaluating the model</h3> <div class="paragraph"> <p>Defining the streaming k-means model is very similar to Flink:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="java">StreamingKMeans model = <span class="keyword">new</span> StreamingKMeans()
        .setK(<span class="integer">3</span>)
        .setInitialCenters(initCenters, weights);
model.trainOn(train.map(lp -&gt; lp.getFeatures()));</code></pre> </div> </div> <div class="paragraph"> <p>Also, in this case, we directly set the number of clusters to 3 and provide the same initial central points to the clusters. We also only pass the data points for training, not the labels.</p> </div> <div class="paragraph"> <p>As mentioned above, we can use the labels to show them together with the predictions:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="java">JavaPairDStream&lt;<span class="predefined-type">Double</span>, <span class="predefined-type">Vector</span>&gt; predict = test.mapToPair(lp -&gt; <span class="keyword">new</span> Tuple2&lt;&gt;(lp.label(), lp.features()));
model.predictOnValues(predict).print(<span class="integer">11</span>);</code></pre> </div> </div> <div class="paragraph"> <p>We print 11 stream elements to the console on the resulting stream with the predictions, as this is the size of our test sample. Like Flink, the results after initial training on a very small data sample could be better. The first number in the tuple is the data point label, while the second one is the corresponding prediction done by our model:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code>spark_1      | (0.0,0)
spark_1      | (0.0,0)
spark_1      | (2.0,2)
spark_1      | (2.0,2)
spark_1      | (1.0,0)
spark_1      | (1.0,0)
spark_1      | (1.0,2)
spark_1      | (1.0,0)
spark_1      | (1.0,0)
spark_1      | (0.0,0)
spark_1      | (1.0,0)</code></pre> </div> </div> <div class="paragraph"> <p>However, when we provide more training data, predictions are much better:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code>spark_1      | (0.0,0)
spark_1      | (0.0,0)
spark_1      | (2.0,2)
spark_1      | (2.0,2)
spark_1      | (1.0,1)
spark_1      | (1.0,1)
spark_1      | (1.0,2)
spark_1      | (1.0,0)
spark_1      | (1.0,1)
spark_1      | (0.0,0)
spark_1      | (1.0,0)</code></pre> </div> </div> <div class="paragraph"> <p>If we pass the second training data sample once again for the training, our model makes correct predictions for the whole test sample:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code>---
spark_1      | (0.0,0)
spark_1      | (0.0,0)
spark_1      | (2.0,2)
spark_1      | (2.0,2)
spark_1      | (1.0,1)
spark_1      | (1.0,1)
spark_1      | (1.0,1)
spark_1      | (1.0,1)
spark_1      | (1.0,1)
spark_1      | (0.0,0)
spark_1      | (1.0,1)
----</code></pre> </div> </div> <div class="admonitionblock warning"> <table> <tr> <td class="icon"> <i class="fa icon-warning" title="Warning"></i> </td> <td class="content"> <div class="paragraph"> <p>The prediction is a number of the cluster which k-means algorithm created and has no relation to labels in our data sample. That means that e.g. <code>(0.0,1)</code> doesn&#8217;t have to be a wrong prediction. It can happen that a data point with label 0 was assigned to the correct cluster, however, Spark internally marked it as a cluster number 1. This needs to be kept in mind when evaluating the model.</p> </div> </td> </tr> </table> </div> <div class="paragraph"> <p>So, similar to Flink, we get better results as we pass more training data without the need to re-train and re-deploy the model. In this case, we get even better results than Flink&#8217;s model.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="conclusions">Conclusions</h2> <div class="sectionbody"> <div class="paragraph"> <p>In this blog post, we continued exploring how Debezium can help make data ingestion into various ML frameworks seamless. We have shown how to pass the data from the database to Apache Flink and Apache Spark in real time as a stream of the data. The integration is easy to set up in both cases and works well. We demonstrated it in an example that allows us to use an online learning algorithm, namely the online k-means algorithm, to highlight the power of data streaming. Online machine learning allows us to make real-time predictions on the data stream and improve or adjust the model immediately as the new training data arrives. Model adjustment doesn&#8217;t require any model re-training on a separate compute cluster and re-deploying a new model, making ML-ops more straightforward and cost-effective.</p> </div> <div class="paragraph"> <p>As usual, we would appreciate any feedback on this blog post. Do you have any ideas on how Debezium or change data capture can be helpful in this area? What would be helpful to investigate, whether integration with another ML framework, integration with a specific ML feature store, etc.? In case you have any input any this regard, don&#8217;t hesitate to reach out to us on the <a href="http://debezium.zulipchat.com/">Zulip chat</a>, <a href="https://groups.google.com/forum/#!forum/debezium">mailing list</a> or you can transform your ideas directly into <a href="http://issues.redhat.com/projects/DBZ/issues">Jira feature requests</a>.</p> </div> </div> </div>]]></content><author><name>Vojtěch Juránek</name></author><category term="machine-learning"/><category term="flink"/><category term="spark"/><category term="online-learning"/><category term="examples"/><category term="apache-kafka"/><summary type="html"><![CDATA[In the previous blog post, we have shown how to leverage Debezium to train neural-network model with the existing data from the database and use this pre-trained model to classify images newly stored into the database. In this blog post, we will move it one step further - we will use Debezium to create multiple data streams from the database and use one of the streams for continuous learning and to improve our model, and the second one for making predictions on the data. When the model is constantly improved or adjusted to recent data samples, this approach is known as online machine learning. Online learning is only suitable for some use cases, and implementing an online variant of a given algorithm may be challenging or even impossible. However, in situations where online learning is possible, it becomes a very powerful tool as it allows one to react to the changes in the data in real-time and avoids the need to re-train and re-deploy new models, thus saving the hardware and operational costs. As the streams of data become more and more common, e.g. with the advent of IoT, we can expect online learning to become more and more popular. It&#8217;s usually a perfect fit for analyzing streaming data in use cases where it&#8217;s possible.]]></summary></entry><entry><title type="html">Debezium 2.4.0.CR1 Released</title><link href="https://debezium.io/blog/2023/09/22/debezium-2-4-cr1-released/" rel="alternate" type="text/html" title="Debezium 2.4.0.CR1 Released"/><published>2023-09-22T00:00:00+00:00</published><updated>2023-09-22T00:00:00+00:00</updated><id>https://debezium.io/blog/2023/09/22/debezium-2-4-cr1-released</id><content type="html" xml:base="https://debezium.io/blog/2023/09/22/debezium-2-4-cr1-released/"><![CDATA[<div class="paragraph"> <p>As the summer concludes for us in the north and we await the autumn colors, the team has been busy preparing for the next major release of Debezium 2.4. It&#8217;s my pleasure to announce today that we are nearly there with the release of Debezium <strong>2.4.0.CR1</strong>.</p> </div> <div class="paragraph"> <p>The focus for this release is primarily on stability; however, we do have a few new last minute addititons that we should highlight, so let&#8217;s dive right in, shall we?!</p> </div> <div class="paragraph"> <p><!- more -></p> </div> <div class="sect1"> <h2 id="breaking_changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>The community led Vitess connector was retrying only a subset of errors by default. This behavior has been changed and now only explicitly defined errors are not retried. For more details, please see <a href="https://issues.redhat.com">DBZ-6944</a>.</p> </div> </div> </div> <div class="sect1"> <h2 id="new_features">New Features</h2> <div class="sectionbody"> <div class="sect2"> <h3 id="mongodb_parallel_incremental_snapshots">MongoDB parallel incremental snapshots</h3> <div class="paragraph"> <p>Since the introduction of incremental snapshots back in Debezium 1.x, the process to incremental snapshot existing data while concurrently capturing changes from a database transaction has been a single-threaded activity. It&#8217;s not uncommon when adding new features to focus on the basics and build upon that foundation, which is precisely what has happened with MongoDB.</p> </div> <div class="paragraph"> <p>In Debezium 2.4, we are taking the first steps to add parallel support to incremental snapshots with the MongoDB connector by reading multiple chunks in parallel. This should allow faster throughput at the cost of memory while the chunks are being collected, sorted, and deduplication occurs against the transaction log capture data set. Thanks to <a href="https://github.com/xidui">Yue Wang</a> for starting this effort in <a href="https://issues.redhat.com/browse/DBZ-6518">DBZ-6518</a>, it&#8217;s most definitely something we are looking to explore for the relational connectors in an upcoming Debezium release.</p> </div> </div> <div class="sect2"> <h3 id="postgresql_16_support">PostgreSQL 16 support</h3> <div class="paragraph"> <p>PostgreSQL announced the immediate release for PostgreSQL 16 just over a week ago, and we&#8217;re pleased to announce that Debezium 2.4 will support that release.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>PostgreSQL 16 introduces logical replication from standby servers; however, this feature has not yet been tested by Debezium and will be a feature introduced in a later build of Debezium. For now, logical replication remains only supported via the primary.</p> </div> </td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="google_spanner_gke_workload_identity_support">Google Spanner GKE workload identity support</h3> <div class="paragraph"> <p>Google Kubernetes Engine (GKE) supports identity workloads, allowing you to use a more secure authentication mechanism than the traditional JSON-based keys. In Debezium 2.4, when no JSON key is explicitly set, the Spanner connector will now automatically default to GKE workload identity authentication. Thanks to <a href="https://github.com/laughingman7743">laughingman7743</a> for this effort as a part of <a href="https://issues.redhat.com/browse/DBZ-6885">DBZ-6885</a>.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_fixes">Other Fixes</h2> <div class="sectionbody"> <div class="ulist"> <ul> <li> <p>Ad-hoc blocking snaps trigger emits schema changes of all tables <a href="https://issues.redhat.com/browse/DBZ-6828">DBZ-6828</a></p> </li> <li> <p>When the start_scn corresponding to the existence of a transaction in V$TRANSACTION is 0, log mining starts from the oldest scn when the oracle connector is started for the first time <a href="https://issues.redhat.com/browse/DBZ-6869">DBZ-6869</a></p> </li> <li> <p>Ensure that the connector can handle rebalance events robustly <a href="https://issues.redhat.com/browse/DBZ-6870">DBZ-6870</a></p> </li> <li> <p>OpenLogReplicator confirmation can resend or omit events on restarts <a href="https://issues.redhat.com/browse/DBZ-6895">DBZ-6895</a></p> </li> <li> <p>ExtractNewRecordState&#8217;s schema cache is not updated with arrival of the ddl change event <a href="https://issues.redhat.com/browse/DBZ-6901">DBZ-6901</a></p> </li> <li> <p>Misleading Debezium error message when RDI port is not specified in application.properties <a href="https://issues.redhat.com/browse/DBZ-6902">DBZ-6902</a></p> </li> <li> <p>Generting protobuf files to target/generated-sources breaks build <a href="https://issues.redhat.com/browse/DBZ-6903">DBZ-6903</a></p> </li> <li> <p>Clean log printout in Redis Debezium Sink <a href="https://issues.redhat.com/browse/DBZ-6908">DBZ-6908</a></p> </li> <li> <p>Values being omitted from list of JSON object <a href="https://issues.redhat.com/browse/DBZ-6910">DBZ-6910</a></p> </li> <li> <p>fix logger named <a href="https://issues.redhat.com/browse/DBZ-6935">DBZ-6935</a></p> </li> <li> <p>MySql connector get NPE when snapshot.mode is set to never and signal data collection configured <a href="https://issues.redhat.com/browse/DBZ-6937">DBZ-6937</a></p> </li> <li> <p>Sanity check / retry for redo logs does not work per Oracle RAC thread <a href="https://issues.redhat.com/browse/DBZ-6938">DBZ-6938</a></p> </li> <li> <p>Drop events has wrong table changes information <a href="https://issues.redhat.com/browse/DBZ-6945">DBZ-6945</a></p> </li> <li> <p>Remove spaces from Signal and Notification MBean&#8217;s ObjectName <a href="https://issues.redhat.com/browse/DBZ-6957">DBZ-6957</a></p> </li> </ul> </div> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.4.0.CR1%20ORDER%20BY%20component%20ASC">20 issues</a> were fixed for this release. A big thank you to all the contributors from the community who worked on this release: <a href="https://github.com/BigGillyStyle">Andy Pickler</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/brenoavm">Breno Moreira</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/harveyyue">Harvey Yue</a>, <a href="https://github.com/indraraj">Indra Shukla</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/nancyxu123">Nancy Xu</a>, <a href="https://github.com/nirolevy">Nir Levy</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/rk3rn3r">René Kerner</a>, <a href="https://github.com/eizners">Sergey Eizner</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, <a href="https://github.com/wuzhenhua01">Wu Zhenhua</a>, Zheng Wang, <a href="https://github.com/laughingman7743">laughingman7743</a>, and <a href="https://github.com/tisonkun">tison</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="outlook_and_whats_next">Outlook and What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>We&#8217;re now at the junction where we begin to set our vision on Debezium 2.5 and what lies ahead. We recently held our first Community Meeting and discussed a number of our 2.5 roadmap ideas, some of which include:</p> </div> <div class="ulist"> <ul> <li> <p>Parallel incremental snapshots for relational connectors.</p> </li> <li> <p>Improved MongoDB support for BSONDocument exceeding 16MB.</p> </li> <li> <p>Db2 support on z/OS and iSeries platforms.</p> </li> <li> <p>Batch support in the JDBC sink connector.</p> </li> <li> <p>Parallelization of tasks and other Debezium Engine internals.</p> </li> <li> <p>Preview of MariaDB and Oracle 23 support</p> </li> </ul> </div> <div class="paragraph"> <p>For more details, please check out our <a href="https://debezium.io/roadmap">road map</a> for all upcoming details around Debezium 2.5 and beyond.</p> </div> <div class="paragraph"> <p>Additionally, Debezium will be at <a href="https://www.confluent.io/events/current/">Current 2023</a> next week. If you are attending, be sure to stop by the Ask-The-Experts session on Wednesday at 2:30PM to catch a sesssion on Debezium and Kafka. Additionally, be sure to check out the sponsored session on Wednesday at 4:30PM to find out just how easy it is to deploy data pipelines from the edge to the cloud using open-source projects such as Debezium, Strimzi, Apicurio, and Kubernetes.</p> </div> <div class="paragraph"> <p>As always, if you have any questions, suggestions, or feedback, please reach out to us on our <a href="https://groups.google.com/g/debezium">mailing list</a> or <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">chat</a>. We always enjoy hearing what you have to share. Until next time, be safe.</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="caassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><summary type="html"><![CDATA[As the summer concludes for us in the north and we await the autumn colors, the team has been busy preparing for the next major release of Debezium 2.4. It&#8217;s my pleasure to announce today that we are nearly there with the release of Debezium 2.4.0.CR1. The focus for this release is primarily on stability; however, we do have a few new last minute addititons that we should highlight, so let&#8217;s dive right in, shall we?! Breaking changes The community led Vitess connector was retrying only a subset of errors by default. This behavior has been changed and now only explicitly defined errors are not retried. For more details, please see DBZ-6944. New Features MongoDB parallel incremental snapshots Since the introduction of incremental snapshots back in Debezium 1.x, the process to incremental snapshot existing data while concurrently capturing changes from a database transaction has been a single-threaded activity. It&#8217;s not uncommon when adding new features to focus on the basics and build upon that foundation, which is precisely what has happened with MongoDB. In Debezium 2.4, we are taking the first steps to add parallel support to incremental snapshots with the MongoDB connector by reading multiple chunks in parallel. This should allow faster throughput at the cost of memory while the chunks are being collected, sorted, and deduplication occurs against the transaction log capture data set. Thanks to Yue Wang for starting this effort in DBZ-6518, it&#8217;s most definitely something we are looking to explore for the relational connectors in an upcoming Debezium release. PostgreSQL 16 support PostgreSQL announced the immediate release for PostgreSQL 16 just over a week ago, and we&#8217;re pleased to announce that Debezium 2.4 will support that release. PostgreSQL 16 introduces logical replication from standby servers; however, this feature has not yet been tested by Debezium and will be a feature introduced in a later build of Debezium. For now, logical replication remains only supported via the primary. Google Spanner GKE workload identity support Google Kubernetes Engine (GKE) supports identity workloads, allowing you to use a more secure authentication mechanism than the traditional JSON-based keys. In Debezium 2.4, when no JSON key is explicitly set, the Spanner connector will now automatically default to GKE workload identity authentication. Thanks to laughingman7743 for this effort as a part of DBZ-6885. Other Fixes Ad-hoc blocking snaps trigger emits schema changes of all tables DBZ-6828 When the start_scn corresponding to the existence of a transaction in V$TRANSACTION is 0, log mining starts from the oldest scn when the oracle connector is started for the first time DBZ-6869 Ensure that the connector can handle rebalance events robustly DBZ-6870 OpenLogReplicator confirmation can resend or omit events on restarts DBZ-6895 ExtractNewRecordState&#8217;s schema cache is not updated with arrival of the ddl change event DBZ-6901 Misleading Debezium error message when RDI port is not specified in application.properties DBZ-6902 Generting protobuf files to target/generated-sources breaks build DBZ-6903 Clean log printout in Redis Debezium Sink DBZ-6908 Values being omitted from list of JSON object DBZ-6910 fix logger named DBZ-6935 MySql connector get NPE when snapshot.mode is set to never and signal data collection configured DBZ-6937 Sanity check / retry for redo logs does not work per Oracle RAC thread DBZ-6938 Drop events has wrong table changes information DBZ-6945 Remove spaces from Signal and Notification MBean&#8217;s ObjectName DBZ-6957 Altogether, 20 issues were fixed for this release. A big thank you to all the contributors from the community who worked on this release: Andy Pickler, Anisha Mohanty, Breno Moreira, Chris Cranford, Harvey Yue, Indra Shukla, Jakub Cechacek, Jiri Pechanec, Mario Fiore Vitale, Nancy Xu, Nir Levy, Ondrej Babec, René Kerner, Sergey Eizner, Thomas Thornton, Wu Zhenhua, Zheng Wang, laughingman7743, and tison! Outlook and What&#8217;s next? We&#8217;re now at the junction where we begin to set our vision on Debezium 2.5 and what lies ahead. We recently held our first Community Meeting and discussed a number of our 2.5 roadmap ideas, some of which include: Parallel incremental snapshots for relational connectors. Improved MongoDB support for BSONDocument exceeding 16MB. Db2 support on z/OS and iSeries platforms. Batch support in the JDBC sink connector. Parallelization of tasks and other Debezium Engine internals. Preview of MariaDB and Oracle 23 support For more details, please check out our road map for all upcoming details around Debezium 2.5 and beyond. Additionally, Debezium will be at Current 2023 next week. If you are attending, be sure to stop by the Ask-The-Experts session on Wednesday at 2:30PM to catch a sesssion on Debezium and Kafka. Additionally, be sure to check out the sponsored session on Wednesday at 4:30PM to find out just how easy it is to deploy data pipelines from the edge to the cloud using open-source projects such as Debezium, Strimzi, Apicurio, and Kubernetes. As always, if you have any questions, suggestions, or feedback, please reach out to us on our mailing list or chat. We always enjoy hearing what you have to share. Until next time, be safe.]]></summary></entry><entry><title type="html">Debezium 2.4.0.Beta2 Released</title><link href="https://debezium.io/blog/2023/09/13/debezium-2-4-beta2-released/" rel="alternate" type="text/html" title="Debezium 2.4.0.Beta2 Released"/><published>2023-09-13T00:00:00+00:00</published><updated>2023-09-13T00:00:00+00:00</updated><id>https://debezium.io/blog/2023/09/13/debezium-2-4-beta2-released</id><content type="html" xml:base="https://debezium.io/blog/2023/09/13/debezium-2-4-beta2-released/"><![CDATA[<div class="paragraph"> <p>It has been nearly two weeks since our last preview release of the Debezium 2.4 series, and I am thrilled to announcement the next installation of that series, Debezium <strong>2.4.0.Beta2</strong>.</p> </div> <div class="paragraph"> <p>While typically beta releases focus on stability and bugs, this release includes quite a number of noteworthy improves and new features including a new ingestion method for Oracle using OpenLogReplicator, a new single message transform to handle timezone conversions, custom authentication support for MongoDB, configurable order for the MongoDB aggregation pipeline, and lastly support for MongoDB 7.</p> </div> <div class="paragraph"> <p>Let&#8217;s take a few moments and dive into all these new features, improvements, and changes in more detail.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="oracle_ingestion_using_openlogreplicator">Oracle ingestion using OpenLogReplicator</h2> <div class="sectionbody"> <div class="paragraph"> <p>The Debezium for Oracle connector has traditionally shipped with two adapters, one for Oracle XStream and another to integrate directly with Oracle LogMiner. While each adapter has its own benefits and is quite mature with features and support for a wide array of data types and use cases, we wanted to explore a completely different way of capturing changes.</p> </div> <div class="paragraph"> <p>Debezium 2.4.0.Beta2 introduces a new, experimental Oracle ingestion adapter based on <a href="https://github.com/bersler/OpenLogReplicator">OpenLogReplicator</a>. The adapter integrates directly with the OpenLogReplicator process in order to create change events in a similar way that the XStream implementation acts as a client to Oracle GoldenGate.</p> </div> <div class="paragraph"> <p>OpenLogReplicator is a standalone process that must either run on the Oracle database server or can run independently of the database server but requires direct communication with the database via TCP/IP and have direct read access to the Oracle redo and archive log files. OpenLogReplicator also does not ship with any pre-built binaries, so the code must either be built directly from source or deployed in a <a href="https://github.com/bersler/OpenLogReplicator-docker">container image</a> that can access the database and its files remotely via file shares.</p> </div> <div class="paragraph"> <p>Once OpenLogReplicator is installed, set up requires the following steps:</p> </div> <div class="ulist"> <ul> <li> <p>Configure the OpenLogReplicator&#8217;s configuration, <code>OpenLogReplicator.json</code>.</p> </li> <li> <p>Configure the Oracle connector to use the OpenLogReplicator adapter.</p> </li> </ul> </div> <div class="paragraph"> <p>At this time, the Debezium for Oracle connector expects the OpenLogReplicator configuration to use very specific settings so that the data is transferred to the connector using the right serialization. The <a href="https://debezium.io/documentation/reference/2.4/connectors/oracle.html#oracle-openlogreplicator-configuration">example configuration</a> shows the critical configuration parameters that must be set for Debezium to ingest the data properly.</p> </div> <div class="paragraph"> <p>When OpenLogReplicator is configured, you should see OpenLogReplicator start with the following:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code>OpenLogReplicator v1.2.1 (C) 2018-2023 by Adam Leszczynski (aleszczynski@bersler.com), see LICENSE file for licensing information, arch: x86_64, system: Linux, release: 6.4.11-200.fc38.x86_64, build: Debug, modules: OCI Probobuf
adding source: ORACLE <i class="conum" data-value="1"></i><b>(1)</b>
adding target: DBZ-NETWORK <i class="conum" data-value="2"></i><b>(2)</b>
writer is starting with Network:0.0.0.0:9000 <i class="conum" data-value="3"></i><b>(3)</b></code></pre> </div> </div> <div class="colist arabic"> <table> <tr> <td><i class="conum" data-value="1"></i><b>1</b></td> <td>The source alias configured in <code>OpenLogReplicator.json</code></td> </tr> <tr> <td><i class="conum" data-value="2"></i><b>2</b></td> <td>The target alias configured in <code>OpenLogReplicator.json</code></td> </tr> <tr> <td><i class="conum" data-value="3"></i><b>3</b></td> <td>The host and port the OpenLogReplicator is listening on.</td> </tr> </table> </div> <div class="paragraph"> <p>Lastly to configure the connector, set the following connector configuration options:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">database.connection.adapter</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">olr</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">openlogreplicator.source</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;source-alias&gt;</span><span class="delimiter">&quot;</span></span>, <i class="conum" data-value="1"></i><b>(1)</b>
  <span class="key"><span class="delimiter">&quot;</span><span class="content">openlogreplicator.host</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;host&gt;</span><span class="delimiter">&quot;</span></span>, <i class="conum" data-value="2"></i><b>(2)</b>
  <span class="key"><span class="delimiter">&quot;</span><span class="content">openlogreplicator.port</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;port&gt;</span><span class="delimiter">&quot;</span></span> <i class="conum" data-value="3"></i><b>(3)</b></code></pre> </div> </div> <div class="colist arabic"> <table> <tr> <td><i class="conum" data-value="1"></i><b>1</b></td> <td>The source alias defined in the <code>OpenLogReplicator.json</code> configuration that is to be used.</td> </tr> <tr> <td><i class="conum" data-value="2"></i><b>2</b></td> <td>The host that is running the OpenLogReplicator.</td> </tr> <tr> <td><i class="conum" data-value="3"></i><b>3</b></td> <td>The port the OpenLogReplicator is listening on.</td> </tr> </table> </div> <div class="paragraph"> <p>When the connector starts and begins to stream, it will connect to the OpenLogReplicator process' network endpoint, negotiate the connection with the serialization process, and then will begin to receive redo log entries.</p> </div> <div class="paragraph"> <p>We will have another blog post that goes over OpenLogReplicator in more detail in the coming weeks leading up to the final release, but in the meantime feel free to experiment with the new ingestion method as we would love to hear your feedback.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>As this ingestion method is experimental, there are a few known limitations, please review the connector <a href="https://debezium.io/documentation/reference/2.4/connectors/oracle.html#oracle-openlogreplicator-known-issues">documentation</a> for details.</p> </div> </td> </tr> </table> </div> </div> </div> <div class="sect1"> <h2 id="new_timezone_transformation">New Timezone Transformation</h2> <div class="sectionbody"> <div class="paragraph"> <p>A common request we have often heard from the community has been to emit temporal columns using other time zones besides UTC. Debezium has supported this by using a <code>CustomConverter</code> to change the way temporal columns are emitted by default to writing your own single message transformation; however, these approaches may not be for everyone.</p> </div> <div class="paragraph"> <p>Debezium 2.4 now ships with a brand-new time zone transformation that enables you to control, to a granular level, which temporal columns in an emitted event will be converted from UTC into whatever desired time zone your pipeline requires. To get started with this new transformation, add the following basic configuration to your connector:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">tz</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.tz.type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.transforms.TimezoneConverter</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.tz.converted.timezone</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">America/New_York</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>By specifying the above configuration, all temporal columns that are emitted in UTC will be converted from UTC to the America/New_York time zone. But you are not limited to just changing the timezone for all temporal fields, you can also target specific fields using the <code>include.fields</code> property as shown below:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">tz</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.tz.type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.transforms.TimezoneConverter</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.tz.converted.timezone</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">America/New_York</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.tz.include.fields</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">source:customers:created_at,customers:updated_at</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>In the above example, the first entry will convert the <code>created_at</code> field where the <em>source table name</em> is <code>customers</code> whereas the latter will convert the <code>updated_at</code> field where the <em>topic name</em> is <code>customers</code>. Additionally, you can also exclude fields from the conversion using <code>exclude.fields</code> to apply the conversion to all but a subset:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">tz</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.tz.type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">io.debezium.transforms.TimezoneConverter</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.tz.converted.timezone</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">America/New_York</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">transforms.tz.exclude.fields</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">source:customers:updated_at</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>In the above example, all temporal fields will be converted to the America/New_York time zone except where the <em>source table name</em> is <code>customers</code> and the field is <code>updated_at</code>.</p> </div> <div class="paragraph"> <p>You can find more information about this new transformation in the <a href="https://debezium.io/documentation/reference/2.4/transformations/timezone-converter.html">documentation</a> and we would love to hear your feedback.</p> </div> </div> </div> <div class="sect1"> <h2 id="mongodb_changes">MongoDB changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.4.0.Beta2 also ships with several MongoDB connector changes, lets take a look at those separately.</p> </div> <div class="sect2"> <h3 id="breaking_changes">Breaking changes</h3> <div class="paragraph"> <p>The <code>mongodb.hosts</code> and <code>mongodb.members.autodiscover</code> configuration properties were removed and no have any influence on the MongoDB connector behavior. If you previously relied on these configuration properties, you must now use the MongoDB <a href="https://debezium.io/documentation/reference/2.4/connectors/mongodb.html#mongodb-property-mongodb-connection-string">connection string</a> configuration property moving forward (<a href="https://issues.redhat.com/browse/DBZ-6892">DBZ-6892</a>).</p> </div> </div> <div class="sect2"> <h3 id="custom_authentication">Custom Authentication</h3> <div class="paragraph"> <p>In specific environments such as AWS, you need to use AWS IAM role-based authentication to connect to the MongoDB cluster; however, this requires setting the property u sing <code>AWS_CREDENTIAL_PROVIDER</code>. This provider is responsible for creating a session and providing the credentials.</p> </div> <div class="paragraph"> <p>To integrate more seamlessly in such environments, a new configuration property, <code>mongodb.authentication.class</code> has been added that allows you to define the credential provider class directly in the connector configuration. If you need to use such a provider configuration, you can now add the following to the connector configuration:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">mongodb.authentication.class</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;fully-qualified-class-name-to-use&gt;</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">mongodb.user</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">username</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">mongodb.password</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">password</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>In addition, if the authentication needs to use another database besides <code>admin</code>, the connector configuration can also include the <code>mongodb.authsource</code> property to control what authentication database should be used.</p> </div> <div class="paragraph"> <p>For more information, please see the <a href="https://debezium.io/documentation/reference/2.4/connectors/mongodb.html#mongodb-property-mongodb-authentication-class">documentation</a>.</p> </div> </div> <div class="sect2"> <h3 id="configurable_order_of_aggregation_pipeline">Configurable order of aggregation pipeline</h3> <div class="paragraph"> <p>Debezium 2.4 now provides a way to control the aggregation order of the change streams pipeline. This can be critical when specific documents are being aggregated that could lead to pipeline problems such as large documents.</p> </div> <div class="paragraph"> <p>By default, the connector applies the MongoDB internal pipeline filters and then any user-constructed filters; however this could lead to situations where large documents make it into the pipeline and MongoDB could throw an error if the document exceeds the internal 16Mb limit. In such use cases, the connector can now be configured to apply the user stages to the pipeline first defined by <code>cursor.pipeline</code> to filter out such use cases to avoid the pipeline from failing due to the 16Mb limit.</p> </div> <div class="paragraph"> <p>To accomplish this, simply apply the following configuration to the connector:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">cursor.pipeline.order</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">user_first</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">cursor.pipeline</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;custom-pipeline-filters&gt;</span><span class="delimiter">&quot;</span></span>
}</code></pre> </div> </div> <div class="paragraph"> <p>For more details, please see the <a href="https://debezium.io/documentation/reference/2.4/connectors/mongodb.html#mongodb-property-cursor-pipeline">documentation</a>.</p> </div> </div> <div class="sect2"> <h3 id="mongodb_7_support">MongoDB 7 support</h3> <div class="paragraph"> <p>MongoDB 7.0 was released just last month and Debezium 2.4 ships with MongoDB 7 support.</p> </div> <div class="paragraph"> <p>If you are looking to upgrade to MongoDB 7 for your environment, you can easily do so as Debezium 2.4+ is fully compatible with the newer version. If you encounter any problems, please let us know.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_fixes_improvements">Other fixes &amp; improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>There are several bugfixes and stability changes in this release, some noteworthy are:</p> </div> <div class="ulist"> <ul> <li> <p>Documentation content section in the debezium.io scroll over to the top header. <a href="https://issues.redhat.com/browse/DBZ-5942">DBZ-5942</a></p> </li> <li> <p>Only publish deltas instead of full snapshots to reduce size of sync event messages <a href="https://issues.redhat.com/browse/DBZ-6458">DBZ-6458</a></p> </li> <li> <p>Postgres - Incremental snapshot fails on tables with an enum type in the primary key <a href="https://issues.redhat.com/browse/DBZ-6481">DBZ-6481</a></p> </li> <li> <p>schema.history.internal.store.only.captured.databases.ddl flag not considered while snapshot schema to history topic <a href="https://issues.redhat.com/browse/DBZ-6712">DBZ-6712</a></p> </li> <li> <p>ExtractNewDocumentState for MongoDB ignore previous document state when handling delete event&#8217;s with REWRITE <a href="https://issues.redhat.com/browse/DBZ-6725">DBZ-6725</a></p> </li> <li> <p>MongoDB New Document State Extraction: original name overriding does not work <a href="https://issues.redhat.com/browse/DBZ-6773">DBZ-6773</a></p> </li> <li> <p>Error with propagation source column name <a href="https://issues.redhat.com/browse/DBZ-6831">DBZ-6831</a></p> </li> <li> <p>Support truncating large columns <a href="https://issues.redhat.com/browse/DBZ-6844">DBZ-6844</a></p> </li> <li> <p>Always reset VStream grpc channel when max size is exceeded <a href="https://issues.redhat.com/browse/DBZ-6852">DBZ-6852</a></p> </li> <li> <p>Kafka offset store fails with NPE <a href="https://issues.redhat.com/browse/DBZ-6853">DBZ-6853</a></p> </li> <li> <p>JDBC Offset storage - configuration of table name does not work <a href="https://issues.redhat.com/browse/DBZ-6855">DBZ-6855</a></p> </li> <li> <p>JDBC sink insert fails with Oracle target database due to semicolon <a href="https://issues.redhat.com/browse/DBZ-6857">DBZ-6857</a></p> </li> <li> <p>Oracle test shouldContinueToUpdateOffsetsEvenWhenTableIsNotChanged fails with NPE <a href="https://issues.redhat.com/browse/DBZ-6860">DBZ-6860</a></p> </li> <li> <p>Tombstone events causes NPE on JDBC connector <a href="https://issues.redhat.com/browse/DBZ-6862">DBZ-6862</a></p> </li> <li> <p>Debezium-MySQL not filtering AWS RDS internal events <a href="https://issues.redhat.com/browse/DBZ-6864">DBZ-6864</a></p> </li> <li> <p>Avoid getting NPE when executing the arrived method in ExecuteSnapshot <a href="https://issues.redhat.com/browse/DBZ-6865">DBZ-6865</a></p> </li> <li> <p>errors.max.retries = 0 Causes retrievable error to be ignored <a href="https://issues.redhat.com/browse/DBZ-6866">DBZ-6866</a></p> </li> <li> <p>Streaming aggregation pipeline broken for combination of database filter and signal collection <a href="https://issues.redhat.com/browse/DBZ-6867">DBZ-6867</a></p> </li> <li> <p>ChangeStream aggregation pipeline fails on large documents which should be excluded <a href="https://issues.redhat.com/browse/DBZ-6871">DBZ-6871</a></p> </li> <li> <p>Oracle alter table drop constraint fails when cascading index <a href="https://issues.redhat.com/browse/DBZ-6876">DBZ-6876</a></p> </li> </ul> </div> <div class="paragraph"> <p>Altogether, a total of <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.4.0.Beta2%20ORDER%20BY%20component%20ASC">36 issues</a> were fixed for this release. A big thank you to all the contributors from the community who worked on this release: <a href="https://github.com/BigGillyStyle">Andy Pickler</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/brenoavm">Breno Moreira</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/harveyyue">Harvey Yue</a>, <a href="https://github.com/indraraj">Indra Shukla</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/nancyxu123">Nancy Xu</a>, <a href="https://github.com/nirolevy">Nir Levy</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, and <a href="https://github.com/tisonkun">tison</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="outlook_whats_next">Outlook &amp; What&#8217;s Next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.4 is shaping up quite nicely with our second Beta2 preview release which now includes OpenLogReplicator support. We intend to spend the remaining several weeks as we move toward a 2.4 final working on stability and any regressions that are identified. We encourage you to give Debezium 2.4.0.Beta2 a try. I would anticipate a Beta3 likely next week to address any shortcomings with OpenLogReplicator with the hope of a final by end of the month.</p> </div> <div class="paragraph"> <p>Don&#8217;t forget about the Debezium Community Event, which I shared with you on the <a href="https://groups.google.com/g/debezium">mailing list</a>. The event will be held on Thursday, September 21st at 8:00am EDT (12:00pm UTC) where we&#8217;ll discuss Debezium 2.4 and the future. Details are available on the <a href="https://debezium.zulipchat.com/#narrow/stream/302529-community-general/topic/Community.20Event/near/390297046">Zulip chat thread</a>, so be sure to join if you are able, we&#8217;d love to see you there.</p> </div> <div class="paragraph"> <p>Additionally, if you intend to participate at Current 2023 (formerly Kafka Summit) in San Jose, California, I will be there doing on a presentation on Debezium and data pipelines Wednesday afternoon with my good friend Carles Arnal. There will also be another presentation by my colleague Hans-Peter Grahsl on event-driven design you shouldn&#8217;t miss. If you&#8217;d like to meet up and have a quick chat about Debezium, your experiences, or even just to say "Hi", I&#8217;d love to chat. Please feel free to ping me on Zulip (@Chris Cranford) or send me a notification on Twitter (@crancran77).</p> </div> <div class="paragraph"> <p>As always, if you have any ideas or suggestions, you can also get in touch with us on the <a href="https://groups.google.com/g/debezium">mailing list</a> or our <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">chat</a>.</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><summary type="html"><![CDATA[It has been nearly two weeks since our last preview release of the Debezium 2.4 series, and I am thrilled to announcement the next installation of that series, Debezium 2.4.0.Beta2. While typically beta releases focus on stability and bugs, this release includes quite a number of noteworthy improves and new features including a new ingestion method for Oracle using OpenLogReplicator, a new single message transform to handle timezone conversions, custom authentication support for MongoDB, configurable order for the MongoDB aggregation pipeline, and lastly support for MongoDB 7. Let&#8217;s take a few moments and dive into all these new features, improvements, and changes in more detail.]]></summary></entry><entry><title type="html">Enable pass-through of additional properties in Debezium UI</title><link href="https://debezium.io/blog/2023/09/10/Debezium-UI-connectors-custom-property/" rel="alternate" type="text/html" title="Enable pass-through of additional properties in Debezium UI"/><published>2023-09-10T00:00:00+00:00</published><updated>2023-09-10T00:00:00+00:00</updated><id>https://debezium.io/blog/2023/09/10/Debezium-UI-connectors-custom-property</id><content type="html" xml:base="https://debezium.io/blog/2023/09/10/Debezium-UI-connectors-custom-property/"><![CDATA[<div class="paragraph"> <p>The Debezium UI team continues to add support for more features, allowing users to configure connectors more easily. In this article, we&#8217;ll describe and demonstrate how to provide the additional properties for configuration that the UI does not expose by default. Read further for more information!</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="need_for_custom_properties_step">Need for custom properties step</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium is very flexible - each connector can be configured and fine-tuned in various ways. Debezium UI already exposes an extensive list of properties that are segregated under different steps for configuration. However, despite the UI exposing a wide range of properties, there are situations where additional custom properties may be necessary beyond those exposed out of the box. For example, <code>producer.<strong></code>, <code>consumer.</strong></code>, and even <code>driver.*</code> properties are pass-through configuration options for configuring parts of the Kafka Connect pipeline or the JDBC driver, respectively.</p> </div> <div class="paragraph"> <p><strong>Example</strong></p> </div> <div class="paragraph"> <p>Debezium must configure the Kafka producer settings to write schema change events to the schema history topic for connectors that utilize a schema history topic, like MySQL. The connector configuration includes a subset of options that act as pass-through properties that begin with the <code>schema.history.internal.producer.*</code> prefix.</p> </div> <div class="paragraph"> <p>Debezium strips the prefix from the property names before passing the properties to the Kafka client.</p> </div> </div> </div> <div class="sect1"> <h2 id="custom_properties_step">Custom properties step</h2> <div class="sectionbody"> <div class="paragraph"> <p>The Debezium UI allows you to configure additional properties for connectors not exposed in the UI. For this, we have created a new extra step called <strong>Custom Properties</strong> in the configuration wizard.</p> </div> <div class="exampleblock centered-image responsive-image"> <div class="content"> <img src="/assets/images/2023-09-10-enable-passthru-ui/customStep2.png" class="responsive-image"> </div> </div> <div class="paragraph"> <p>The <strong>custom properties</strong> step allows you to provide the additional properties by entering a key-value pair. Once you enter the additional configuration properties <code>key</code> and <code>value</code>, click the <strong>Apply</strong> button.</p> </div> <div class="exampleblock centered-image responsive-image"> <div class="content"> <img src="/assets/images/2023-09-10-enable-passthru-ui/configureEmptylist.png" class="responsive-image"> </div> </div> <div class="paragraph"> <p>When clicking the <strong>Apply</strong> button, the UI validates the user entries and provides feedback if there are any problems. If there are no problems, the UI will show a green check icon on the right side of all the successfully added additional properties. You can also remove any added property by clicking on the <strong>Remove</strong> button on the right side of the property.</p> </div> <div class="paragraph"> <p>On the left-hand side, you can see the list of already configured properties from the previous wizard step, and the newly added custom properties in this step are highlighted in <strong>blue</strong> color.</p> </div> <div class="exampleblock centered-image responsive-image"> <div class="content"> <img src="/assets/images/2023-09-10-enable-passthru-ui/CustomProp.png" class="responsive-image"> </div> </div> <div class="paragraph"> <p>In the screenshot above, the user added <code>schema.history.internal.producer.*</code> related additional properties.</p> </div> </div> </div> <div class="sect1"> <h2 id="self_contained_example">Self-contained example</h2> <div class="sectionbody"> <div class="paragraph"> <p>You can try out configuring the connector with some custom properties (and more) with our self-contained example <a href="https://github.com/debezium/debezium-examples/tree/main/ui-demo">UI demo</a> - which is included under <a href="https://github.com/debezium/debezium-examples">debezium-examples</a> on GitHub. The UI demo includes a Docker Compose file, which brings up several sources with data and the UI. Please refer to the <a href="https://github.com/debezium/debezium-examples/tree/main/ui-demo">README file</a> for more details on running the Debezium UI demo.</p> </div> <div class="paragraph"> <p>To learn more about the Debezium UI, please refer to the <a href="/documentation/reference/operations/debezium-ui.html">reference documentation</a>.</p> </div> </div> </div> <div class="sect1"> <h2 id="more_coming_soon">More coming soon!</h2> <div class="sectionbody"> <div class="paragraph"> <p>Stay tuned for further improvements and new feature announcements in the UI in the coming releases.</p> </div> <div class="paragraph"> <p><em>A big thank you to the team who have contributed in many ways: Anisha Mohanty, René Kerner and Chrish Cranford!</em></p> </div> </div> </div>]]></content><author><name>Indra Raj Shukla</name></author><category term="community"/><category term="debezium-ui"/><summary type="html"><![CDATA[The Debezium UI team continues to add support for more features, allowing users to configure connectors more easily. In this article, we&#8217;ll describe and demonstrate how to provide the additional properties for configuration that the UI does not expose by default. Read further for more information!]]></summary></entry><entry><title type="html">Debezium 2.3.3.Final Released</title><link href="https://debezium.io/blog/2023/09/05/debezium-2-3-3-final-released/" rel="alternate" type="text/html" title="Debezium 2.3.3.Final Released"/><published>2023-09-05T00:00:00+00:00</published><updated>2023-09-05T00:00:00+00:00</updated><id>https://debezium.io/blog/2023/09/05/debezium-2-3-3-final-released</id><content type="html" xml:base="https://debezium.io/blog/2023/09/05/debezium-2-3-3-final-released/"><![CDATA[<div class="paragraph"> <p>It is my pleasure to announce the immediate release of Debezium <strong>2.3.3.Final</strong>.</p> </div> <div class="paragraph"> <p>This release includes several bug fixes to address regressions, stability, documentation updates. If you are currently looking to upgrade to the Debezium 2.3.x release stream, we highly recommend you consider using this release. Let&#8217;s take a quick look into the regressions and bug fixes.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="breaking_changes">Breaking changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>There is currently one breaking change in this release, where the behavior of Debezium 2.3.3.Final changes from the previous release of Debezium 2.3.2.Final. If you are upgrading from Debezium 2.3.2.Final or any prior version, please review the following breaking changes for details.</p> </div> <div class="sect2"> <h3 id="oracle_connector_scn_based_metrics">Oracle connector SCN-based metrics</h3> <div class="paragraph"> <p>Oracle tracks a variety of system change number, often called SCN, values in its JMX metrics including <code>OffsetScn</code>, <code>CurrentScn</code>, <code>OldestScn</code>, and <code>CommittedScn</code>. These SCN values are numeric and can often exceed the upper bounds of a <code>Long</code> data type, and so Debezium has traditionally exposed these values as <code>String</code> s.</p> </div> <div class="paragraph"> <p>Unfortunately, tooling such as Grafana and Prometheus do not work with <code>String</code> -based values, and it has been raised on several occasions that the community would like to be able to view these values from metrics gathering frameworks. With Debezium 2.3.3.Final or later, there is a small behavior change with the these JMX metrics as they are no longer exposed as <code>String</code> values but instead are now exposed as <code>BigInteger</code> values.</p> </div> <div class="paragraph"> <p>This change in behavior allows tooling such as Grafana and Prometheus to now scrape these values from the JMX beans automatically for reporting and observability stacks.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>If you were previously gathering these values for other purposes, be aware they&#8217;re no longer string-based and should be interpreted as <code>BigInteger</code> numerical values moving forward.</p> </div> </td> </tr> </table> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_fixes_improvements">Other fixes &amp; improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>There are several bugfixes and stability changes in this release, some noteworthy are:</p> </div> <div class="ulist"> <ul> <li> <p>Support PostgreSQL coercion for UUID, JSON, and JSONB data types <a href="https://issues.redhat.com/browse/DBZ-6589">DBZ-6589</a></p> </li> <li> <p>Debezium 2.3.0.Final Missing Kafka Channel Documentation <a href="https://issues.redhat.com/browse/DBZ-6688">DBZ-6688</a></p> </li> <li> <p>Debezium crashes on parsing MySQL DDL statement (specific JOIN) <a href="https://issues.redhat.com/browse/DBZ-6724">DBZ-6724</a></p> </li> <li> <p>ExtractNewDocumentState for MongoDB ignore previous document state when handling delete event&#8217;s with REWRITE <a href="https://issues.redhat.com/browse/DBZ-6725">DBZ-6725</a></p> </li> <li> <p>Missing or misspelled IDs result in downstream build errors <a href="https://issues.redhat.com/browse/DBZ-6754">DBZ-6754</a></p> </li> <li> <p>When using pgoutput in postgres connector, (+/-)Infinity is not supported in decimal values <a href="https://issues.redhat.com/browse/DBZ-6758">DBZ-6758</a></p> </li> <li> <p>Outbox transformation can cause connector to crash <a href="https://issues.redhat.com/browse/DBZ-6760">DBZ-6760</a></p> </li> <li> <p>Postgres tests for toasted byte array and toasted date array fail with decoderbufs plugin <a href="https://issues.redhat.com/browse/DBZ-6767">DBZ-6767</a></p> </li> <li> <p>MongoDB New Document State Extraction: nonexistent field for add.headers <a href="https://issues.redhat.com/browse/DBZ-6774">DBZ-6774</a></p> </li> <li> <p>Notifications and signals leaks between MBean instances when using JMX channels <a href="https://issues.redhat.com/browse/DBZ-6777">DBZ-6777</a></p> </li> <li> <p>Dbz crashes on parsing MySQL DDL statement (SELECT 1.;) <a href="https://issues.redhat.com/browse/DBZ-6780">DBZ-6780</a></p> </li> <li> <p>Dbz crashed on parsing MySQL DDL statement (SELECT 1 + @sum:=1 AS ss;) <a href="https://issues.redhat.com/browse/DBZ-6794">DBZ-6794</a></p> </li> <li> <p>MySQL DDL parser - REPEAT function not accepted <a href="https://issues.redhat.com/browse/DBZ-6803">DBZ-6803</a></p> </li> <li> <p>Dbz crashes on DDL statement (non Latin chars in variables) <a href="https://issues.redhat.com/browse/DBZ-6821">DBZ-6821</a></p> </li> <li> <p>Not trim the default value for the BIGINT and SMALLINT types when parsing MySQL DDL <a href="https://issues.redhat.com/browse/DBZ-6824">DBZ-6824</a></p> </li> <li> <p>Make partial and multi-response transactions debug level logs <a href="https://issues.redhat.com/browse/DBZ-6830">DBZ-6830</a></p> </li> <li> <p>Oracle test shouldContinueToUpdateOffsetsEvenWhenTableIsNotChanged fails with NPE <a href="https://issues.redhat.com/browse/DBZ-6860">DBZ-6860</a></p> </li> <li> <p>Streaming aggregation pipeline broken for combination of database filter and signal collection <a href="https://issues.redhat.com/browse/DBZ-6867">DBZ-6867</a></p> </li> </ul> </div> <div class="paragraph"> <p>Altogether, a total of <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.3.3.Final%20ORDER%20BY%20component%20ASC">19 issues</a> were fixed for this release. <a href="https://github.com/andreas-ibm">Andreas Martens</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/roldanbob">Bob Roldan</a>, <a href="https://github.com/chrisbeard">Chris Beard</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/vidourem">David Remy</a>, <a href="https://github.com/Fraznist">Emre Akgün</a>, <a href="https://github.com/ericpangiawan">Eric Pangiawan</a>, <a href="https://github.com/ruanhang1993">Hang Ruan</a>, <a href="https://github.com/harveyyue">Harvey Yue</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, and <a href="https://github.com/vidourem">david remy</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="outlook_whats_next">Outlook &amp; What&#8217;s Next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>As the team continues active development of Debezium 2.4, I would expect another maintenance release of Debezium 2.3 later this mont, barring any reported regressions or bugs.</p> </div> <div class="paragraph"> <p>In addition, the Debezium Community Event&#8217;s agenda and date will be published this week, so keep an eye out for that news. And finally, we&#8217;ll be presenting at Kafka Summit 2023 (aka Current 2023) later this upcoming month. If you&#8217;re planning to attend and would like to ask the experts, be sure to get in touch with me or anyone on the team and we can plan to meet up and discuss anything related to Debezium and CDC.</p> </div> <div class="paragraph"> <p>As always, if you have any ideas or suggestions, you can also get in touch with us on the <a href="https://groups.google.com/g/debezium">mailing list</a> or our <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">chat</a>.</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><summary type="html"><![CDATA[It is my pleasure to announce the immediate release of Debezium 2.3.3.Final. This release includes several bug fixes to address regressions, stability, documentation updates. If you are currently looking to upgrade to the Debezium 2.3.x release stream, we highly recommend you consider using this release. Let&#8217;s take a quick look into the regressions and bug fixes.]]></summary></entry><entry><title type="html">Debezium 2.4.0.Beta1 Released</title><link href="https://debezium.io/blog/2023/08/29/debezium-2-4-beta1-released/" rel="alternate" type="text/html" title="Debezium 2.4.0.Beta1 Released"/><published>2023-08-29T00:00:00+00:00</published><updated>2023-08-29T00:00:00+00:00</updated><id>https://debezium.io/blog/2023/08/29/debezium-2-4-beta1-released</id><content type="html" xml:base="https://debezium.io/blog/2023/08/29/debezium-2-4-beta1-released/"><![CDATA[<div class="paragraph"> <p>While development remains steadfast as we continue forward on Debezium 2.4, I am thrilled to announce the immediate availability of Debezium <strong>2.4.0.Beta1</strong>.</p> </div> <div class="paragraph"> <p>While this release focuses on stability and bug fixes, there are several new noteworthy features including TimescaleDB support, JMX notifications using JSON payloads, multiple improvements to the Oracle connector&#8217;s metrics and embedded Infinispan buffer implementation, SQL Server heartbeats, Vitess shardless strategy, JDBC sink with SQL Server identity-based inserts, and much more. Let&#8217;s dive into each of thees new features and others in more detail.</p> </div> <div class="paragraph"> <p></p> </div> <div class="sect1"> <h2 id="timescaledb_support">TimescaleDB support</h2> <div class="sectionbody"> <div class="paragraph"> <p>TimescaleDB is an open-source time series-based database that is based on PostgreSQL. This means that a great deal of functionality to support TimescaleDB directly comes from the existing PostgreSQL connector; however there are certain aspects of TimescaleDB such as chunks, hypertables, and agregates that are not.</p> </div> <div class="paragraph"> <p>Therefore, if you want to get started with Debezium 2.4 and TimescaleDB, the integration requires a combination of both the PostgreSQL connector combined with a new <code>TimescaleDb</code> single message transformation (SMT). The combination of these two provide the ability to stream changes from a TimescaleDB environment with appropriate table names based on chunks, hypertables, and aggregates.</p> </div> <div class="paragraph"> <p>The <code>TimescaleDb</code> transformation is available as <code>io.debezium.connector.postgresql.transforms.timescaledb</code> and is responsible for adjusting the final topic names when working with chunks, hypertables, and aggregates. Additionally, this transformation adds metadata headers to the change event so you know the original chunk name, chunk table, the hypertable schema and table names accordingly.</p> </div> </div> </div> <div class="sect1"> <h2 id="jmx_notifications_with_json_user_data">JMX notifications with JSON user data</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.4 changes how JMX notifications provide user data. In previous versions, the notification used a <code>toString()</code> style implementation, which while it worked, it doesn&#8217;t provide any good forward or backward compatibility semantics unlike other more structured formats such as JSON.</p> </div> <div class="paragraph"> <p>Moving forward, JMX notification&#8217;s user data will be provided as JSON, making it easier and more reliable to parse and to support extensibility in the future with less concerns about backward compatibility. We hope this makes this feature easier to use moving forward and welcome any additional feedback.</p> </div> </div> </div> <div class="sect1"> <h2 id="oracle_connector_scn_based_metrics">Oracle connector SCN-based metrics</h2> <div class="sectionbody"> <div class="paragraph"> <p>Oracle tracks a variety of system change number, often called SCN, values in its JMX metrics including <code>OffsetScn</code>, <code>CurrentScn</code>, <code>OldestScn</code>, and <code>CommittedScn</code>. These SCN values are numeric and can often exceed the upper bounds of a <code>Long</code> data type, and so Debezium has traditionally exposed these values as <code>String</code> s.</p> </div> <div class="paragraph"> <p>Unfortunately, tooling such as Grafana and Prometheus do not work with <code>String</code> -based values, and it has been raised on several occasions that the community would like to be able to view these values from metrics gathering frameworks. With Debezium 2.4, there is a small behavior change with the these JMX metrics as they are no longer exposed as <code>String</code> values but instead are now exposed as <code>BigInteger</code> values.</p> </div> <div class="paragraph"> <p>This change in behavior allows tooling such as Grafana and Prometheus to now scrape these values from the JMX beans automatically for reporting and observability stacks.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>If you were previously gathering these values for other purposes, be aware they&#8217;re no longer string-based and should be interpreted as <code>BigInteger</code> numerical values moving forward.</p> </div> </td> </tr> </table> </div> </div> </div> <div class="sect1"> <h2 id="oracle_connector_max_transaction_age_metric">Oracle connector max transaction age metric</h2> <div class="sectionbody"> <div class="paragraph"> <p>The Oracle connector provides a myriad of metrics for LogMiner, including the <code>OldestScn</code> metric representing the oldest system change number in the connector&#8217;s transaction buffer. This SCN can be useful to know how far back a transaction may still be buffered relative to the current system change number, <code>CurrentScn</code>. However, system change numbers are simply that, numerical values that require the use of a database function call to know when the change occurred.</p> </div> <div class="paragraph"> <p>Starting with Debezium 2.4, the connector will now also track the age of the oldest system change number by providing a new metric called <code>OldestScnAgeInMilliseconds</code>. This metric is calculated by taking the timestamp of the <code>OffsetScn</code> and calculating the difference between that time and the query time of the metric, giving a rough age in milliseconds of the oldest transaction in the buffer that has yet to be committed or rolled back.</p> </div> <div class="paragraph"> <p>If there are other metrics you may be interested in to help, please reach out and let us know.</p> </div> </div> </div> <div class="sect1"> <h2 id="oracle_embedded_infinispan_configuration_changes">Oracle embedded Infinispan configuration changes</h2> <div class="sectionbody"> <div class="paragraph"> <p>The Oracle connector supports three different buffering techniques, one is based on JVM heap while the other two are based on off-heap storage using Infinispan. When working with Infinispan, you can choose to use a remote cluster, where the caches are stored and managed across a remote connection, or using an embedded cluster, where the cluster is managed locally by the connector itself.</p> </div> <div class="paragraph"> <p>When working with a remote Infinispan cluster, there is some cluster configuration that is made as a part of the Infinispan installation itself, this is often referred to as the global or cluster configuration. However when working with an embedded Infinispan cluster, Debezium simply used the default configuration for an embedded cluster, which may not always provide all the necessary behaviors for each environment.</p> </div> <div class="paragraph"> <p>Debezium 2.4 introduces a new configuration property, <code>log.mining.buffer.infinispan.cache.global</code>. This property allows specifying the XML configuration for the Infinispan "global" or "cluster" configuration.</p> </div> <div class="listingblock"> <div class="title">An example configuration</div> <div class="content"> <pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;infinispan&gt;</span>
  <span class="tag">&lt;threads&gt;</span>
    <span class="tag">&lt;blocking-bounded-queue-thread-pool</span>
        <span class="attribute-name">max-threads</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">10</span><span class="delimiter">&quot;</span></span>
        <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">myexec</span><span class="delimiter">&quot;</span></span>
        <span class="attribute-name">keepalive-time</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">10000</span><span class="delimiter">&quot;</span></span>
        <span class="attribute-name">queue-length</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">5000</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
  <span class="tag">&lt;/threads&gt;</span>
<span class="tag">&lt;/infinispan&gt;</span></code></pre> </div> </div> <div class="paragraph"> <p>With Debezium 2.4, if you are using the Infinispan-embedded buffer, you can now safely configure the overall embedded global configuration for Infinispan, which can allow you to tune and improve the overall performance when using the embedded Infinispan engine.</p> </div> </div> </div> <div class="sect1"> <h2 id="sql_sever_heartbeat_improvements">SQL Sever heartbeat improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>It&#8217;s not an uncommon situation for a database to go for a period of time without there being any relevant changes, whether that is due to inactivity or changes that do occur being of no interest to the connector based on configuration. In these cases, it&#8217;s critical that offset metadata managed by the connector remains synchronized with the offset backing store during these periods so that a restart of the connector works as expected.</p> </div> <div class="paragraph"> <p>With Debezium 2.4, if a SQL Server change capture loop does not find any changes or the changes that did occur are not of any relevance to the connector, the connector will continue to emit heartbeat events when enabled. This should improve the reliability of the offsets stored in the offset backing store across a variety of use cases.</p> </div> </div> </div> <div class="sect1"> <h2 id="vitess_shardless_naming_strategy">Vitess shardless naming strategy</h2> <div class="sectionbody"> <div class="paragraph"> <p>Debezium 2.4.0.Alpha2 introduced a mechanism to handle schema changes per shard by using the shard name as the catalog when identifying the relational identifier for a table. When using the <code>DefaultTopicNamingStrategy</code>, this had the side effect that the shard would be included within the topic name, which may not be desirable.</p> </div> <div class="paragraph"> <p>Debezium 2.4.0.Beta1 introduces a new strategy that enables the old behavior called <code>TableTopicNamingStrategy</code>.</p> </div> <div class="paragraph"> <p>The following table shows the output differences for topic names based on the different strategies:</p> </div> <table class="tableblock frame-all grid-all stretch"> <colgroup> <col style="width: 50%;"> <col style="width: 50%;"> </colgroup> <thead> <tr> <th class="tableblock halign-left valign-top">Strategy</th> <th class="tableblock halign-left valign-top">Topic Output</th> </tr> </thead> <tbody> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock"><code>DefaultTopicNamingStrategy</code></p></td> <td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;topic.prefix&gt;.&lt;shard&gt;.&lt;table-name&gt;</code></p></td> </tr> <tr> <td class="tableblock halign-left valign-top"><p class="tableblock"><code>TableTopicNamingStrategy</code></p></td> <td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;topic.prefix&gt;.&lt;table-name&gt;</code></p></td> </tr> </tbody> </table> <div class="paragraph"> <p>In order to configure the table topic naming strategy, include the following configuration for the connector:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="properties">topic.naming.strategy=io.debezium.connector.vitess.TableTopicNamingStrategy</code></pre> </div> </div> </div> </div> <div class="sect1"> <h2 id="jdbc_sink_sql_server_identity_inserts">JDBC sink SQL Server identity inserts</h2> <div class="sectionbody"> <div class="paragraph"> <p>Each database handles the insertion of values into an identity-based column differently. With SQL Server, this requires the explicit enablement of <code>IDENTITY_INSERT</code> prior to the insert and the disabling of this feature afterward. With Debezium 2.4, the Debezium JDBC sink connector provides support for this in the target database.</p> </div> <div class="paragraph"> <p>In order to take advantage of identity-based inserts, the JDBC sink connector must be configured with a new dialect-based property called <code>dialect.sqlserver.identity.inserts</code>, which can be set to <code>true</code> or <code>false</code>. By default, this feature is set to <code>false</code> and must be enabled if you wish to insert into identity-based columns.</p> </div> <div class="paragraph"> <p>When enabled, all <em>insert</em> and <em>upsert</em> operations will be wrapped as follows:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="sql"><span class="class">SET</span> IDENTITY_INSERT &lt;<span class="type">table</span>-name&gt; <span class="keyword">ON</span>;
&lt;the <span class="class">insert</span> <span class="keyword">or</span> upsert statement&gt;
<span class="class">SET</span> IDENTITY_INSERT &lt;<span class="type">table</span>-name&gt; OFF;</code></pre> </div> </div> </div> </div> <div class="sect1"> <h2 id="other_fixes_improvements">Other fixes &amp; improvements</h2> <div class="sectionbody"> <div class="paragraph"> <p>There are several bugfixes and stability changes in this release, some noteworthy are:</p> </div> <div class="ulist"> <ul> <li> <p>Debezium heartbeat.action.query does not start before writing to WAL <a href="https://issues.redhat.com/browse/DBZ-6635">DBZ-6635</a></p> </li> <li> <p>Schema name changed with Custom topic naming strategy <a href="https://issues.redhat.com/browse/DBZ-6641">DBZ-6641</a></p> </li> <li> <p>Wrong behavior of quote.identifiers in JdbcSinkConnector <a href="https://issues.redhat.com/browse/DBZ-6682">DBZ-6682</a></p> </li> <li> <p>Toasted UUID array is not properly processed <a href="https://issues.redhat.com/browse/DBZ-6720">DBZ-6720</a></p> </li> <li> <p>Debezium crashes on parsing MySQL DDL statement (specific JOIN) <a href="https://issues.redhat.com/browse/DBZ-6724">DBZ-6724</a></p> </li> <li> <p>Blocking snapshot must take snapshot configurations from signal <a href="https://issues.redhat.com/browse/DBZ-6731">DBZ-6731</a></p> </li> <li> <p>When using pgoutput in postgres connector, (+/-)Infinity is not supported in decimal values <a href="https://issues.redhat.com/browse/DBZ-6758">DBZ-6758</a></p> </li> <li> <p>Outbox transformation can cause connector to crash <a href="https://issues.redhat.com/browse/DBZ-6760">DBZ-6760</a></p> </li> <li> <p>MongoDB New Document State Extraction: nonexistent field for add.headers <a href="https://issues.redhat.com/browse/DBZ-6774">DBZ-6774</a></p> </li> <li> <p>Mongodb connector tests are massively failing when executed on 7.0-rc version <a href="https://issues.redhat.com/browse/DBZ-6779">DBZ-6779</a></p> </li> <li> <p>Dbz crashes on parsing MySQL DDL statement (SELECT 1.;) <a href="https://issues.redhat.com/browse/DBZ-6780">DBZ-6780</a></p> </li> <li> <p>Mysql connector tests are failing when executed without any profile <a href="https://issues.redhat.com/browse/DBZ-6791">DBZ-6791</a></p> </li> <li> <p>Dbz crashed on parsing MySQL DDL statement (SELECT 1 + @sum:=1 AS ss;) <a href="https://issues.redhat.com/browse/DBZ-6794">DBZ-6794</a></p> </li> <li> <p>MySQL DDL parser - REPEAT function not accepted <a href="https://issues.redhat.com/browse/DBZ-6803">DBZ-6803</a></p> </li> <li> <p>Fix bug with getSnapshottingTask <a href="https://issues.redhat.com/browse/DBZ-6820">DBZ-6820</a></p> </li> <li> <p>Dbz crashes on DDL statement (non-Latin chars in variables) <a href="https://issues.redhat.com/browse/DBZ-6821">DBZ-6821</a></p> </li> <li> <p>Not trim the default value for the BIGINT and SMALLINT types when parsing MySQL DDL <a href="https://issues.redhat.com/browse/DBZ-6824">DBZ-6824</a></p> </li> <li> <p>PostgresConnectorIT#shouldAddNewFieldToSourceInfo fails randomly <a href="https://issues.redhat.com/browse/DBZ-6839">DBZ-6839</a></p> </li> <li> <p>Wrong filtered comments <a href="https://issues.redhat.com/browse/DBZ-6840">DBZ-6840</a></p> </li> <li> <p>Intermittent test failure: BaseSourceTaskTest.verifyTaskRestartsSuccessfully <a href="https://issues.redhat.com/browse/DBZ-6841">DBZ-6841</a></p> </li> <li> <p>When using <code>skip.messages.without.change=true</code> a WARN log message is reported for each record <a href="https://issues.redhat.com/browse/DBZ-6843">DBZ-6843</a></p> </li> </ul> </div> <div class="paragraph"> <p>Altogether, a total of <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.4.0.Beta1%20ORDER%20BY%20component%20ASC">39 issues</a> were fixed for this release. <a href="https://github.com/andreas-ibm">Andreas Martens</a>, <a href="https://github.com/adasari">Anil Dasari</a>, <a href="https://github.com/ani-sha">Anisha Mohanty</a>, <a href="https://github.com/roldanbob">Bob Roldan</a>, <a href="https://github.com/chrisbeard">Chris Beard</a>, <a href="https://github.com/Naros">Chris Cranford</a>, Matan Cohen, <a href="https://github.com/Fraznist">Emre Akgün</a>, <a href="https://github.com/ericpangiawan">Eric Pangiawan</a>, <a href="https://github.com/ruanhang1993">Hang Ruan</a>, <a href="https://github.com/harveyyue">Harvey Yue</a>, <a href="https://github.com/jeremy-l-ford">Jeremy Ford</a>, <a href="https://github.com/novotnyJiri">Jiri Novotny</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/Naros">M. Gökhan Akgül</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/nancyxu123">Nancy Xu</a>, <a href="https://github.com/obabec">Ondrej Babec</a>, <a href="https://github.com/rajdangwal">Rajendra Dangwal</a>, <a href="https://github.com/ShuranZhang">Shuran Zhang</a>, <a href="https://github.com/rolevinks">Stein Rolevink</a>, <a href="https://github.com/sunxiaojian">Sun Xiao Jian</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, <a href="https://github.com/wuzhenhua01">Wu Zhenhua</a>, <a href="https://github.com/sunxiaojian">Xiaojian Sun</a></p> </div> </div> </div> <div class="sect1"> <h2 id="outlook_whats_next">Outlook &amp; What&#8217;s Next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>As we enter the beta-phase of Debezium 2.4, the next several weeks will primarily focus on bugfixes and stability as we continue to march forward to a final release at the end of September. We are also close on the last minute changes for the OpenLogReplicator ingestion method for Oracle and once complete, expect a Beta2 shortly afterward. Furthermore, there will be a Debezium 2.3.3.Final maintenance release early next week and likely at least one more 2.3 release as we make the transition to Debezium 2.4 as the new stable release later this coming month.</p> </div> <div class="paragraph"> <p>In addition, the Debezium Community Event&#8217;s agenda and date will be published later this week, so keep an eye out for that news. And finally, we&#8217;ll be presenting at Kafka Summit 2023 (aka Current 2023) later this upcoming month. If you&#8217;re planning to attend and would like to ask the experts, be sure to get in touch with me or anyone on the team and we can plan to meet up and discuss anything related to Debezium and CDC.</p> </div> <div class="paragraph"> <p>As always, if you have any ideas or suggestions, you can also get in touch with us on the <a href="https://groups.google.com/g/debezium">mailing list</a> or our <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">chat</a>.</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><summary type="html"><![CDATA[While development remains steadfast as we continue forward on Debezium 2.4, I am thrilled to announce the immediate availability of Debezium 2.4.0.Beta1. While this release focuses on stability and bug fixes, there are several new noteworthy features including TimescaleDB support, JMX notifications using JSON payloads, multiple improvements to the Oracle connector&#8217;s metrics and embedded Infinispan buffer implementation, SQL Server heartbeats, Vitess shardless strategy, JDBC sink with SQL Server identity-based inserts, and much more. Let&#8217;s dive into each of thees new features and others in more detail.]]></summary></entry><entry><title type="html">Debezium 2.4.0.Alpha2 Released</title><link href="https://debezium.io/blog/2023/08/09/debezium-2-4-alpha2-released/" rel="alternate" type="text/html" title="Debezium 2.4.0.Alpha2 Released"/><published>2023-08-09T00:00:00+00:00</published><updated>2023-08-09T00:00:00+00:00</updated><id>https://debezium.io/blog/2023/08/09/debezium-2-4-alpha2-released</id><content type="html" xml:base="https://debezium.io/blog/2023/08/09/debezium-2-4-alpha2-released/"><![CDATA[<div class="paragraph"> <p>Despite summer being well underway, Debezium contributors remain hard at work, and it&#8217;s my pleasure to announce the next preview release of Debezium 2.4 series, <strong>2.4.0.Alpha2</strong>.</p> </div> <div class="paragraph"> <p>This preview release includes a mix of improvements, bug fixes, and new features that are available for the Debezium community to test and offer feedback. Some highlights from this release include ad-hoc blocking snapshots, source-to-sink column name propagation, support for alternative MySQL drivers, and all Cassandra connectors with Debezium Server. Let&#8217;s take a few moments and dive into these and others.</p> </div> <div class="paragraph"> <p><!- more --></p> </div> <div class="ulist"> <ul> <li> <p><a href="#breaking-changes">Breaking changes</a></p> </li> <li> <p><a href="#new-features">New features</a></p> </li> <li> <p><a href="#other-changes">Other changes</a></p> </li> <li> <p><a href="#whats-next">What&#8217;s next</a></p> </li> </ul> </div> <div class="sect1"> <h2 id="breaking-changes">Breaking changes</h2> <div class="sectionbody"> <div class="sect2"> <h3 id="debezium_server_and_cassandra_connectors">Debezium Server and Cassandra connectors</h3> <div class="paragraph"> <p>For Cassandra connector users who may have been using Debezium Server or who may have wanted to use Debezium Server, we previously only shipped Cassandra 4 with the Debezium Server distribution. With Debezium 2.4, we now include all three Cassandra connector variants with the distribution, meaning that Cassandra 3 and DSE can now be used directly.</p> </div> <div class="paragraph"> <p>However, for this to work, a new environment variable <code>EXTRA_CONNECTOR</code> was introduced to specify specifically which Cassandra connector variant should be used by Debezium Server. This means that if you were using Cassandra 4 with Debezium Server, you must include this environment variable when upgrading to have the same configuration continue to work as it did in prior versions.</p> </div> <div class="paragraph"> <p>This new environment variable should be set to <code>dse</code>, <code>cassandra-3</code>, or <code>cassandra-4</code> depending on the Cassandra version you intend to use for your Debezium Server source connector.</p> </div> </div> <div class="sect2"> <h3 id="mysql_bigint_precision_changed">MySQL BIGINT precision changed</h3> <div class="paragraph"> <p>The Debezium for MySQL connector was not properly setting the precision for <code>BIGINT</code> data types when configuring the connector with <code>bigint.unsigned.handling.mode</code> as <code>precise</code>. Unfortunately, this led to a situation where the schema for such fields did not include the correct precision value.</p> </div> <div class="paragraph"> <p>Debezium 2.4 includes <a href="https://issues.redhat.com/browse/DBZ-6714">DBZ-6714</a>, which provides a fix to address the incorrect precision for such fields. This can lead to schema incompatibilities when using schema registry, so you may need to adjust your compatibility settings or take other actions if you need to use strict compatibility rules.</p> </div> </div> <div class="sect2"> <h3 id="oracle_snapshot_and_query_fetch_sizes_increased">Oracle snapshot and query fetch sizes increased</h3> <div class="paragraph"> <p>Debezium 2.4 introduces a change in the default values for the <code>snapshot.fetch.size</code> and the <code>query.fetch.size</code> Oracle connector configuration properties. Previously, these properties used a default of <code>2000</code>; however, thanks to a community contributor, it was identified that these values may likely be too low for production use.</p> </div> <div class="paragraph"> <p>With this release, the Oracle connector will now use a default of <code>10000</code> for both properties, which should have a positive improvement on throughput for most users who were not explicitly setting these values. If you were previously using custom values for these settings in your connector configurations, then you will not see a change in your existing behavior. Only users who previously were not explicitly setting these values will notice that the new defaults will be used.</p> </div> <div class="admonitionblock note"> <table> <tr> <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> <td class="content"> <div class="paragraph"> <p>These configuration properties are meant to act as tuning knobs, as a specific configuration for one JDBC environment may not work as well in a different environment. While we believe this change will have no negative impact, if you do notice a drop in performance, you can add these properties to your connector configuration setting them to their previous defaults of <code>2000</code>.</p> </div> </td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="vitess_incorrectly_mapped_bin_columns">Vitess incorrectly mapped <code>_bin</code> columns</h3> <div class="paragraph"> <p>For collations that end with the <code>_bin</code> designator, Vitess maps these to a data type of <code>VARBINARY</code>. As a result, the Vitess connector was inferring that these columns should be emitted as binary data; however, for character-based columns that used such collations, this was incorrect.</p> </div> <div class="paragraph"> <p>Debezium 2.4 will now properly emit character-based columns that are collated with a <code>_bin</code> designator as string-based data rather than binary data. This means that if you are using schema registry, you may observe somee schema incompatibilities and you may need to adjust your compatibility settings or take other actions to mitigate this change.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="new-features">New Features</h2> <div class="sectionbody"> <div class="sect2"> <h3 id="ad_hoc_blocking_snapshots">Ad-hoc blocking snapshots</h3> <div class="paragraph"> <p>Incremental snapshots were first introduced nearly two years ago in Debezium 1.6 and has remained quite popular in the community to deal with a variety of re-snapshot use cases. However, there are some use cases where the intertwined nature of read events with create, updates, and deletes may be less than ideal or even not supported by some consumer application. For those use cases, Debezium 2.4 introduces ad-hoc blocking snapshots.</p> </div> <div class="paragraph"> <p>An ad-hoc blocking snapshot works in a similar way that ad-hoc incremental snapshots work; however, with one major difference. The snapshot is still triggered by sending a signal to Debezium; however when the signal is processed by the connector, the key difference is that streaming is put on hold while the snapshot process runs. This means you won&#8217;t be receiving a series of read events interwoven with create, update, or delete events. This also means that we&#8217;ll be processing the snapshot in a similar way to traditional snapshots, so the throughput should generally be higher than incremental snapshots.</p> </div> <div class="admonitionblock important"> <table> <tr> <td class="icon"> <i class="fa icon-important" title="Important"></i> </td> <td class="content"> <div class="paragraph"> <p>Be aware that ad-hoc blocking snapshots puts the reading of the transaction logs on hold while the snapshot is performed. This means the same requirements that a traditional snapshot has on transaction log availability also applies when using this type of ad-hoc snapshot mode. When streaming resumes, if a transaction log that is needed has since been removed, the connector will raise an error and stop.</p> </div> </td> </tr> </table> </div> <div class="paragraph"> <p>The signal to initiate an ad-hoc blocking snapshot is very similar to its ad-hoc incremental snapshot counterpart. The following signal below shows the payload to snapshot a specific table with a condition, but this uses the new blocking snapshot rather than the incremental snapshot:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">execute-snapshot</span><span class="delimiter">&quot;</span></span>,
  <span class="key"><span class="delimiter">&quot;</span><span class="content">data</span><span class="delimiter">&quot;</span></span>: {
    <span class="key"><span class="delimiter">&quot;</span><span class="content">data-collections</span><span class="delimiter">&quot;</span></span>: [<span class="string"><span class="delimiter">&quot;</span><span class="content">public.my_table</span><span class="delimiter">&quot;</span></span>],
    <span class="key"><span class="delimiter">&quot;</span><span class="content">type</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">BLOCKING</span><span class="delimiter">&quot;</span></span>, <i class="conum" data-value="1"></i><b>(1)</b>
    <span class="key"><span class="delimiter">&quot;</span><span class="content">additional-condition</span><span class="delimiter">&quot;</span></span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">last_update_date &gt;= '2023-01-01'</span><span class="delimiter">&quot;</span></span>
  }
}</code></pre> </div> </div> <div class="colist arabic"> <table> <tr> <td><i class="conum" data-value="1"></i><b>1</b></td> <td>The use of <code>BLOCKING</code> rather than <code>INCREMENTAL</code> differentiates the two ad-hoc snapshot modes.</td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="source_to_sink_column_name_propagation">Source-to-sink column name propagation</h3> <div class="paragraph"> <p>Normally column names map directly to field names and vice versa when consumed by sink connectors such as a JDBC connector. However, there are situations where the serialization technology, such as Avro, has very specific rules about field naming conventions. When a column&#8217;s name in a database table conflicts with the serialization rule&#8217;s naming conventions, Debezium will rename the field in the event so that it adheres to the serialization&#8217;s rules. This often means that a field will be prepended with underscores or invalid characters replaced with underscores.</p> </div> <div class="paragraph"> <p>This can create problems for certain types of sinks, such as a JDBC sink connector, because the sink cannot easily deduce the original column name for the destination table nor can it adequately map between the event&#8217;s field name and a column name if they differ. This typically means users must use transformation chains on the sink side in order to reconstruct the event&#8217;s fields with namings that represent the source.</p> </div> <div class="paragraph"> <p>Debezium 2.4 introduces a way to minimize and potentially avoid that entirely by propagating the original column name as a field schema parameter, much in the same way that we do for data types, precision, scale, and length. The schema parameter <code>__debezium.source.column.name</code> now includes the original column name when column or data type propagation is enabled.</p> </div> <div class="admonitionblock tip"> <table> <tr> <td class="icon"> <i class="fa icon-tip" title="Tip"></i> </td> <td class="content"> <div class="paragraph"> <p>The Debezium JDBC sink connector already works with column and data type propagation, allowing for the sink connector to more accurately deduce column types, length, precision, and scale.</p> </div> <div class="paragraph"> <p>With this new feature, the JDBC sink connector will automatically use the column name from this argument when it is provided to guarantee that the destination table will be created with the same column names as the source, even when using Avro or similar. This means no transformations are needed when using the Debezium JDBC sink connector.</p> </div> </td> </tr> </table> </div> </div> <div class="sect2"> <h3 id="alternative_mysql_jdbc_drivers">Alternative MySQL JDBC drivers</h3> <div class="paragraph"> <p>In order to use IAM authentication on AWS, a special MySQL driver is required to provide that type of functionality. With Debezium 2.4, you can now provide a reference to this specific driver and the connector will use that driver instead of the default driver shipped with the connector.</p> </div> <div class="paragraph"> <p>As an example, to connect using IAM authentication on AWS, the following configuration is needed:</p> </div> <div class="listingblock"> <div class="content"> <pre class="CodeRay highlight"><code data-lang="text">database.jdbc.driver=software.aws.rds.jdbc.mysql.Driver
database.jdbc.protocol=jdbc:mysql:aws</code></pre> </div> </div> <div class="paragraph"> <p>The <code>database.jdbc.driver</code> specifies the driver that should be loaded by the connector and used to communicate with the MySQL database. The <code>database.jdbc.protocol</code> is a supplemental configuration property that may not be required in all contexts. It defaults to <code>jdbc:mysql</code> but since AWS requires <code>jdbc:mysql:aws</code>, this allows you to specify this derivative within the configuration.</p> </div> <div class="paragraph"> <p>We&#8217;ve love to hear feedback and whether something like this might be useful for other scenarios.</p> </div> </div> </div> </div> <div class="sect1"> <h2 id="other-changes">Other fixes</h2> <div class="sectionbody"> <div class="paragraph"> <p>In addition, there were quite a number of stability and bug fixes that made it into this release. These include the following:</p> </div> <div class="ulist"> <ul> <li> <p>Switch tracing to OpenTelemetry <a href="https://issues.redhat.com/browse/DBZ-2862">DBZ-2862</a></p> </li> <li> <p>Connector drop down causes a scroll bar <a href="https://issues.redhat.com/browse/DBZ-5421">DBZ-5421</a></p> </li> <li> <p>Provide outline for drawer component showing connector details <a href="https://issues.redhat.com/browse/DBZ-5831">DBZ-5831</a></p> </li> <li> <p>Modify scroll for the running connector component <a href="https://issues.redhat.com/browse/DBZ-5832">DBZ-5832</a></p> </li> <li> <p>Connector restart regression <a href="https://issues.redhat.com/browse/DBZ-6213">DBZ-6213</a></p> </li> <li> <p>Highlight information about how to configure the schema history topic to store data only for intended tables <a href="https://issues.redhat.com/browse/DBZ-6219">DBZ-6219</a></p> </li> <li> <p>Document Optimal MongoDB Oplog Config for Resiliency <a href="https://issues.redhat.com/browse/DBZ-6455">DBZ-6455</a></p> </li> <li> <p>JDBC Schema History: When the table name is passed as dbName.tableName, the connector does not start <a href="https://issues.redhat.com/browse/DBZ-6484">DBZ-6484</a></p> </li> <li> <p>Update the Edit connector UI to incorporate the feedback received from team in demo <a href="https://issues.redhat.com/browse/DBZ-6514">DBZ-6514</a></p> </li> <li> <p>Support blocking ad-hoc snapshots <a href="https://issues.redhat.com/browse/DBZ-6566">DBZ-6566</a></p> </li> <li> <p>Add new parameters to RabbitMQ consumer <a href="https://issues.redhat.com/browse/DBZ-6581">DBZ-6581</a></p> </li> <li> <p>Document read preference changes in 2.4 <a href="https://issues.redhat.com/browse/DBZ-6591">DBZ-6591</a></p> </li> <li> <p>Oracle DDL parser does not properly detect end of statement when comments obfuscate the semicolon <a href="https://issues.redhat.com/browse/DBZ-6599">DBZ-6599</a></p> </li> <li> <p>Received an unexpected message type that does not have an 'after' Debezium block <a href="https://issues.redhat.com/browse/DBZ-6637">DBZ-6637</a></p> </li> <li> <p>When Debezium Mongodb connector encounter authentication or under privilege errors, the connection between debezium and mongodb keeps going up. <a href="https://issues.redhat.com/browse/DBZ-6643">DBZ-6643</a></p> </li> <li> <p>Log appropriate error when JDBC connector receive SchemaChange record <a href="https://issues.redhat.com/browse/DBZ-6655">DBZ-6655</a></p> </li> <li> <p>Send tombstone events when partition queries are finished <a href="https://issues.redhat.com/browse/DBZ-6658">DBZ-6658</a></p> </li> <li> <p>Snapshot will not capture data when signal.data.collection is present without table.include.list <a href="https://issues.redhat.com/browse/DBZ-6669">DBZ-6669</a></p> </li> <li> <p>Retriable operations are retried infinitely since error handlers are not reused <a href="https://issues.redhat.com/browse/DBZ-6670">DBZ-6670</a></p> </li> <li> <p>Oracle DDL parser does not support column visibility on ALTER TABLE <a href="https://issues.redhat.com/browse/DBZ-6677">DBZ-6677</a></p> </li> <li> <p>Propagate source column name and allow sink to use it <a href="https://issues.redhat.com/browse/DBZ-6684">DBZ-6684</a></p> </li> <li> <p>Partition duplication after rebalances with single leader task <a href="https://issues.redhat.com/browse/DBZ-6685">DBZ-6685</a></p> </li> <li> <p>JDBC Sink Connector Fails on Loading Flat Data Containing Struct Type Fields from Kafka <a href="https://issues.redhat.com/browse/DBZ-6686">DBZ-6686</a></p> </li> <li> <p>SQLSyntaxErrorException using Debezium JDBC Sink connector <a href="https://issues.redhat.com/browse/DBZ-6687">DBZ-6687</a></p> </li> <li> <p>Should use topic.prefix rather than connector.server.name in MBean namings <a href="https://issues.redhat.com/browse/DBZ-6690">DBZ-6690</a></p> </li> <li> <p>CDC - Debezium x RabbitMQ - Debezium Server crashes when an UPDATE/DELETE on source database (PostgreSQL) <a href="https://issues.redhat.com/browse/DBZ-6691">DBZ-6691</a></p> </li> <li> <p>Missing operationTime field on ping command when executed against Atlas <a href="https://issues.redhat.com/browse/DBZ-6700">DBZ-6700</a></p> </li> <li> <p>MongoDB SRV protocol not working in Debezium Server <a href="https://issues.redhat.com/browse/DBZ-6701">DBZ-6701</a></p> </li> <li> <p>Disable jdk-outreach-workflow.yml in forked personal repo <a href="https://issues.redhat.com/browse/DBZ-6702">DBZ-6702</a></p> </li> <li> <p>Custom properties step not working correctly in validation of the properties added by user <a href="https://issues.redhat.com/browse/DBZ-6711">DBZ-6711</a></p> </li> <li> <p>Add tzdata-java to UI installation Dockerfile <a href="https://issues.redhat.com/browse/DBZ-6713">DBZ-6713</a></p> </li> <li> <p>Refactor EmbeddedEngine::run method <a href="https://issues.redhat.com/browse/DBZ-6715">DBZ-6715</a></p> </li> <li> <p>Oracle fails to process a DROP USER <a href="https://issues.redhat.com/browse/DBZ-6716">DBZ-6716</a></p> </li> <li> <p>Support alternative JDBC drivers in MySQL connector <a href="https://issues.redhat.com/browse/DBZ-6727">DBZ-6727</a></p> </li> <li> <p>Oracle LogMiner mining distance calculation should be skipped when upper bounds is not within distance <a href="https://issues.redhat.com/browse/DBZ-6733">DBZ-6733</a></p> </li> <li> <p>Add STOPPED and RESTARTING connector states to testing library <a href="https://issues.redhat.com/browse/DBZ-6734">DBZ-6734</a></p> </li> <li> <p>MariaDB: Unparseable DDL statement (ALTER TABLE IF EXISTS) <a href="https://issues.redhat.com/browse/DBZ-6736">DBZ-6736</a></p> </li> <li> <p>Update Quarkus to 3.2.3.Final <a href="https://issues.redhat.com/browse/DBZ-6740">DBZ-6740</a></p> </li> <li> <p>Decouple Debezium Server and Extension Quarkus versions <a href="https://issues.redhat.com/browse/DBZ-6744">DBZ-6744</a></p> </li> <li> <p>SingleProcessor remove redundant filter logic <a href="https://issues.redhat.com/browse/DBZ-6745">DBZ-6745</a></p> </li> <li> <p>MySQL dialect does not properly recognize non-default value longblob types due to typo <a href="https://issues.redhat.com/browse/DBZ-6753">DBZ-6753</a></p> </li> <li> <p>Add a new parameter for selecting the db index when using Redis Storage <a href="https://issues.redhat.com/browse/DBZ-6759">DBZ-6759</a></p> </li> <li> <p>Postgres tests for toasted byte array and toasted date array fail with decoderbufs plugin <a href="https://issues.redhat.com/browse/DBZ-6767">DBZ-6767</a></p> </li> <li> <p>Table schemas should be updated for each shard individually <a href="https://issues.redhat.com/browse/DBZ-6775">DBZ-6775</a></p> </li> <li> <p>Notifications and signals leaks between MBean instances when using JMX channels <a href="https://issues.redhat.com/browse/DBZ-6777">DBZ-6777</a></p> </li> <li> <p>Oracle XML column types are not properly resolved when adding XMLTYPE column during streaming <a href="https://issues.redhat.com/browse/DBZ-6782">DBZ-6782</a></p> </li> <li> <p>Bump the MySQL binlog client version to 0.28.1 which includes significant GTID event performance improvements <a href="https://issues.redhat.com/browse/DBZ-6783">DBZ-6783</a></p> </li> <li> <p>Add new Redis Sink connector parameter description to the documentation <a href="https://issues.redhat.com/browse/DBZ-6784">DBZ-6784</a></p> </li> <li> <p>Upgrade Kafka to 3.5.1 <a href="https://issues.redhat.com/browse/DBZ-6785">DBZ-6785</a></p> </li> </ul> </div> <div class="paragraph"> <p>Altogether, <a href="https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%202.4.0.Alpha2%20ORDER%20BY%20component%20ASC">62 issues</a> were fixed for this release. A big thank you to all the contributors from the community who worked on this release: <a href="https://github.com/roldanbob">Bob Roldan</a>, <a href="https://github.com/TyrantLucifer">Chao Tian</a>, <a href="https://github.com/Naros">Chris Cranford</a>, <a href="https://github.com/C0urante">Chris Egerton</a>, <a href="https://github.com/vidourem">David Remy</a>, <a href="https://github.com/faihofu">Fai Ho Fu</a>, <a href="https://github.com/gurpiarbassi">Gurps Bassi</a>, <a href="https://github.com/harveyyue">Harvey Yue</a>, <a href="https://github.com/indraraj">Indra Shukla</a>, <a href="https://github.com/jcechace">Jakub Cechacek</a>, <a href="https://github.com/jpechane">Jiri Pechanec</a>, <a href="https://github.com/joschi">Jochen Schalanda</a>, <a href="https://github.com/mfvitale">Mario Fiore Vitale</a>, <a href="https://github.com/mfortunat">Massimo Fortunat</a>, <a href="https://github.com/nancyxu123">Nancy Xu</a>, <a href="https://github.com/benesch">Nikhil Benesch</a>, <a href="https://github.com/paul-cheung">Paul Cheung</a>, <a href="https://github.com/roldanbob">Robert Roldan</a>, <a href="https://github.com/ironakj">Ronak Jain</a>, <a href="https://github.com/ryanvanhuuksloot">Ryan van Huuksloot</a>, <a href="https://github.com/eizners">Sergey Eizner</a>, <a href="https://github.com/twthorn">Thomas Thornton</a>, <a href="https://github.com/vjuranek">Vojtech Juranek</a>, <a href="https://github.com/j2gg0s">Yanjie Wang</a>, <a href="https://github.com/Ychopada">Yashashree Chopada</a>, <a href="https://github.com/vidourem">david remy</a>, and <a href="https://github.com/ibnubay">ibnubay</a>!</p> </div> </div> </div> <div class="sect1"> <h2 id="whats-next">What&#8217;s next?</h2> <div class="sectionbody"> <div class="paragraph"> <p>The Debezium 2.4 series is already packed with lots of new features, and we&#8217;re only scratching the surface. We have more in-store, including the new Oracle OpenLogReplicator adapter coming with Debezium 2.4 Alpha3 next week. After that, we&#8217;ll begin to wind down the development and shift our focus in the beta and release candidate cycle, targeting the end of September for a Debezium 2.4 final release.</p> </div> <div class="paragraph"> <p>Don&#8217;t forget about the Debezium Community Event, which I shared with you on the <a href="https://groups.google.com/g/debezium">mailing list</a>. If you have any ideas or suggestions, I&#8217;d love your feedback. We will be making an announcement in the next two weeks about the date/time and agenda.</p> </div> <div class="paragraph"> <p>Additionally, if you&#8217;re going to Current 2023 this year in San Jose, I&#8217;d love to meet up and discuss your experiences with Debezium. I&#8217;ll be there doing a talk on event-driven design with Debezium and Apicurio with my good friends Hans-Peter Grahsl and Carles Arnal. If you&#8217;re interested in more details, feel free to drop me a line in chat, on the mailing list or directly via email.</p> </div> <div class="paragraph"> <p>As always, if you have any ideas or suggestions, you can also get in touch with us on the <a href="https://groups.google.com/g/debezium">mailing list</a> or our <a href="https://debezium.zulipchat.com/login/#narrow/stream/302529-users">chat</a>. Until next time, don&#8217;t be a stranger and stay cool out there!</p> </div> </div> </div>]]></content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mongodb"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><category term="spanner"/><summary type="html"><![CDATA[Despite summer being well underway, Debezium contributors remain hard at work, and it&#8217;s my pleasure to announce the next preview release of Debezium 2.4 series, 2.4.0.Alpha2. This preview release includes a mix of improvements, bug fixes, and new features that are available for the Debezium community to test and offer feedback. Some highlights from this release include ad-hoc blocking snapshots, source-to-sink column name propagation, support for alternative MySQL drivers, and all Cassandra connectors with Debezium Server. Let&#8217;s take a few moments and dive into these and others. Breaking changes New features Other changes What&#8217;s next Breaking changes Debezium Server and Cassandra connectors For Cassandra connector users who may have been using Debezium Server or who may have wanted to use Debezium Server, we previously only shipped Cassandra 4 with the Debezium Server distribution. With Debezium 2.4, we now include all three Cassandra connector variants with the distribution, meaning that Cassandra 3 and DSE can now be used directly. However, for this to work, a new environment variable EXTRA_CONNECTOR was introduced to specify specifically which Cassandra connector variant should be used by Debezium Server. This means that if you were using Cassandra 4 with Debezium Server, you must include this environment variable when upgrading to have the same configuration continue to work as it did in prior versions. This new environment variable should be set to dse, cassandra-3, or cassandra-4 depending on the Cassandra version you intend to use for your Debezium Server source connector. MySQL BIGINT precision changed The Debezium for MySQL connector was not properly setting the precision for BIGINT data types when configuring the connector with bigint.unsigned.handling.mode as precise. Unfortunately, this led to a situation where the schema for such fields did not include the correct precision value. Debezium 2.4 includes DBZ-6714, which provides a fix to address the incorrect precision for such fields. This can lead to schema incompatibilities when using schema registry, so you may need to adjust your compatibility settings or take other actions if you need to use strict compatibility rules. Oracle snapshot and query fetch sizes increased Debezium 2.4 introduces a change in the default values for the snapshot.fetch.size and the query.fetch.size Oracle connector configuration properties. Previously, these properties used a default of 2000; however, thanks to a community contributor, it was identified that these values may likely be too low for production use. With this release, the Oracle connector will now use a default of 10000 for both properties, which should have a positive improvement on throughput for most users who were not explicitly setting these values. If you were previously using custom values for these settings in your connector configurations, then you will not see a change in your existing behavior. Only users who previously were not explicitly setting these values will notice that the new defaults will be used. These configuration properties are meant to act as tuning knobs, as a specific configuration for one JDBC environment may not work as well in a different environment. While we believe this change will have no negative impact, if you do notice a drop in performance, you can add these properties to your connector configuration setting them to their previous defaults of 2000. Vitess incorrectly mapped _bin columns For collations that end with the _bin designator, Vitess maps these to a data type of VARBINARY. As a result, the Vitess connector was inferring that these columns should be emitted as binary data; however, for character-based columns that used such collations, this was incorrect. Debezium 2.4 will now properly emit character-based columns that are collated with a _bin designator as string-based data rather than binary data. This means that if you are using schema registry, you may observe somee schema incompatibilities and you may need to adjust your compatibility settings or take other actions to mitigate this change. New Features Ad-hoc blocking snapshots Incremental snapshots were first introduced nearly two years ago in Debezium 1.6 and has remained quite popular in the community to deal with a variety of re-snapshot use cases. However, there are some use cases where the intertwined nature of read events with create, updates, and deletes may be less than ideal or even not supported by some consumer application. For those use cases, Debezium 2.4 introduces ad-hoc blocking snapshots. An ad-hoc blocking snapshot works in a similar way that ad-hoc incremental snapshots work; however, with one major difference. The snapshot is still triggered by sending a signal to Debezium; however when the signal is processed by the connector, the key difference is that streaming is put on hold while the snapshot process runs. This means you won&#8217;t be receiving a series of read events interwoven with create, update, or delete events. This also means that we&#8217;ll be processing the snapshot in a similar way to traditional snapshots, so the throughput should generally be higher than incremental snapshots. Be aware that ad-hoc blocking snapshots puts the reading of the transaction logs on hold while the snapshot is performed. This means the same requirements that a traditional snapshot has on transaction log availability also applies when using this type of ad-hoc snapshot mode. When streaming resumes, if a transaction log that is needed has since been removed, the connector will raise an error and stop. The signal to initiate an ad-hoc blocking snapshot is very similar to its ad-hoc incremental snapshot counterpart. The following signal below shows the payload to snapshot a specific table with a condition, but this uses the new blocking snapshot rather than the incremental snapshot: { &quot;type&quot;: &quot;execute-snapshot&quot;, &quot;data&quot;: { &quot;data-collections&quot;: [&quot;public.my_table&quot;], &quot;type&quot;: &quot;BLOCKING&quot;, (1) &quot;additional-condition&quot;: &quot;last_update_date &gt;= '2023-01-01'&quot; } } 1 The use of BLOCKING rather than INCREMENTAL differentiates the two ad-hoc snapshot modes. Source-to-sink column name propagation Normally column names map directly to field names and vice versa when consumed by sink connectors such as a JDBC connector. However, there are situations where the serialization technology, such as Avro, has very specific rules about field naming conventions. When a column&#8217;s name in a database table conflicts with the serialization rule&#8217;s naming conventions, Debezium will rename the field in the event so that it adheres to the serialization&#8217;s rules. This often means that a field will be prepended with underscores or invalid characters replaced with underscores. This can create problems for certain types of sinks, such as a JDBC sink connector, because the sink cannot easily deduce the original column name for the destination table nor can it adequately map between the event&#8217;s field name and a column name if they differ. This typically means users must use transformation chains on the sink side in order to reconstruct the event&#8217;s fields with namings that represent the source. Debezium 2.4 introduces a way to minimize and potentially avoid that entirely by propagating the original column name as a field schema parameter, much in the same way that we do for data types, precision, scale, and length. The schema parameter __debezium.source.column.name now includes the original column name when column or data type propagation is enabled. The Debezium JDBC sink connector already works with column and data type propagation, allowing for the sink connector to more accurately deduce column types, length, precision, and scale. With this new feature, the JDBC sink connector will automatically use the column name from this argument when it is provided to guarantee that the destination table will be created with the same column names as the source, even when using Avro or similar. This means no transformations are needed when using the Debezium JDBC sink connector. Alternative MySQL JDBC drivers In order to use IAM authentication on AWS, a special MySQL driver is required to provide that type of functionality. With Debezium 2.4, you can now provide a reference to this specific driver and the connector will use that driver instead of the default driver shipped with the connector. As an example, to connect using IAM authentication on AWS, the following configuration is needed: database.jdbc.driver=software.aws.rds.jdbc.mysql.Driver database.jdbc.protocol=jdbc:mysql:aws The database.jdbc.driver specifies the driver that should be loaded by the connector and used to communicate with the MySQL database. The database.jdbc.protocol is a supplemental configuration property that may not be required in all contexts. It defaults to jdbc:mysql but since AWS requires jdbc:mysql:aws, this allows you to specify this derivative within the configuration. We&#8217;ve love to hear feedback and whether something like this might be useful for other scenarios. Other fixes In addition, there were quite a number of stability and bug fixes that made it into this release. These include the following: Switch tracing to OpenTelemetry DBZ-2862 Connector drop down causes a scroll bar DBZ-5421 Provide outline for drawer component showing connector details DBZ-5831 Modify scroll for the running connector component DBZ-5832 Connector restart regression DBZ-6213 Highlight information about how to configure the schema history topic to store data only for intended tables DBZ-6219 Document Optimal MongoDB Oplog Config for Resiliency DBZ-6455 JDBC Schema History: When the table name is passed as dbName.tableName, the connector does not start DBZ-6484 Update the Edit connector UI to incorporate the feedback received from team in demo DBZ-6514 Support blocking ad-hoc snapshots DBZ-6566 Add new parameters to RabbitMQ consumer DBZ-6581 Document read preference changes in 2.4 DBZ-6591 Oracle DDL parser does not properly detect end of statement when comments obfuscate the semicolon DBZ-6599 Received an unexpected message type that does not have an 'after' Debezium block DBZ-6637 When Debezium Mongodb connector encounter authentication or under privilege errors, the connection between debezium and mongodb keeps going up. DBZ-6643 Log appropriate error when JDBC connector receive SchemaChange record DBZ-6655 Send tombstone events when partition queries are finished DBZ-6658 Snapshot will not capture data when signal.data.collection is present without table.include.list DBZ-6669 Retriable operations are retried infinitely since error handlers are not reused DBZ-6670 Oracle DDL parser does not support column visibility on ALTER TABLE DBZ-6677 Propagate source column name and allow sink to use it DBZ-6684 Partition duplication after rebalances with single leader task DBZ-6685 JDBC Sink Connector Fails on Loading Flat Data Containing Struct Type Fields from Kafka DBZ-6686 SQLSyntaxErrorException using Debezium JDBC Sink connector DBZ-6687 Should use topic.prefix rather than connector.server.name in MBean namings DBZ-6690 CDC - Debezium x RabbitMQ - Debezium Server crashes when an UPDATE/DELETE on source database (PostgreSQL) DBZ-6691 Missing operationTime field on ping command when executed against Atlas DBZ-6700 MongoDB SRV protocol not working in Debezium Server DBZ-6701 Disable jdk-outreach-workflow.yml in forked personal repo DBZ-6702 Custom properties step not working correctly in validation of the properties added by user DBZ-6711 Add tzdata-java to UI installation Dockerfile DBZ-6713 Refactor EmbeddedEngine::run method DBZ-6715 Oracle fails to process a DROP USER DBZ-6716 Support alternative JDBC drivers in MySQL connector DBZ-6727 Oracle LogMiner mining distance calculation should be skipped when upper bounds is not within distance DBZ-6733 Add STOPPED and RESTARTING connector states to testing library DBZ-6734 MariaDB: Unparseable DDL statement (ALTER TABLE IF EXISTS) DBZ-6736 Update Quarkus to 3.2.3.Final DBZ-6740 Decouple Debezium Server and Extension Quarkus versions DBZ-6744 SingleProcessor remove redundant filter logic DBZ-6745 MySQL dialect does not properly recognize non-default value longblob types due to typo DBZ-6753 Add a new parameter for selecting the db index when using Redis Storage DBZ-6759 Postgres tests for toasted byte array and toasted date array fail with decoderbufs plugin DBZ-6767 Table schemas should be updated for each shard individually DBZ-6775 Notifications and signals leaks between MBean instances when using JMX channels DBZ-6777 Oracle XML column types are not properly resolved when adding XMLTYPE column during streaming DBZ-6782 Bump the MySQL binlog client version to 0.28.1 which includes significant GTID event performance improvements DBZ-6783 Add new Redis Sink connector parameter description to the documentation DBZ-6784 Upgrade Kafka to 3.5.1 DBZ-6785 Altogether, 62 issues were fixed for this release. A big thank you to all the contributors from the community who worked on this release: Bob Roldan, Chao Tian, Chris Cranford, Chris Egerton, David Remy, Fai Ho Fu, Gurps Bassi, Harvey Yue, Indra Shukla, Jakub Cechacek, Jiri Pechanec, Jochen Schalanda, Mario Fiore Vitale, Massimo Fortunat, Nancy Xu, Nikhil Benesch, Paul Cheung, Robert Roldan, Ronak Jain, Ryan van Huuksloot, Sergey Eizner, Thomas Thornton, Vojtech Juranek, Yanjie Wang, Yashashree Chopada, david remy, and ibnubay! What&#8217;s next? The Debezium 2.4 series is already packed with lots of new features, and we&#8217;re only scratching the surface. We have more in-store, including the new Oracle OpenLogReplicator adapter coming with Debezium 2.4 Alpha3 next week. After that, we&#8217;ll begin to wind down the development and shift our focus in the beta and release candidate cycle, targeting the end of September for a Debezium 2.4 final release. Don&#8217;t forget about the Debezium Community Event, which I shared with you on the mailing list. If you have any ideas or suggestions, I&#8217;d love your feedback. We will be making an announcement in the next two weeks about the date/time and agenda. Additionally, if you&#8217;re going to Current 2023 this year in San Jose, I&#8217;d love to meet up and discuss your experiences with Debezium. I&#8217;ll be there doing a talk on event-driven design with Debezium and Apicurio with my good friends Hans-Peter Grahsl and Carles Arnal. If you&#8217;re interested in more details, feel free to drop me a line in chat, on the mailing list or directly via email. As always, if you have any ideas or suggestions, you can also get in touch with us on the mailing list or our chat. Until next time, don&#8217;t be a stranger and stay cool out there!]]></summary></entry></feed>